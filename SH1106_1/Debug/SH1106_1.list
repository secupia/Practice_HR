
SH1106_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ee0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08001fec  08001fec  00011fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080020c0  080020c0  000120c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080020c4  080020c4  000120c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  080020c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000c4  20000070  08002138  00020070  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000134  08002138  00020134  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  9 .debug_info   00010f88  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002541  00000000  00000000  00031021  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000052a4  00000000  00000000  00033562  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000758  00000000  00000000  00038808  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000b20  00000000  00000000  00038f60  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00005382  00000000  00000000  00039a80  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002a7d  00000000  00000000  0003ee02  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004187f  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001b78  00000000  00000000  000418fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08001fd4 	.word	0x08001fd4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08001fd4 	.word	0x08001fd4

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800014e:	4b0e      	ldr	r3, [pc, #56]	; (8000188 <HAL_InitTick+0x3c>)
{
 8000150:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f0 	udiv	r3, r3, r0
 800015c:	4a0b      	ldr	r2, [pc, #44]	; (800018c <HAL_InitTick+0x40>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 f892 	bl	800028c <HAL_SYSTICK_Config>
 8000168:	4604      	mov	r4, r0
 800016a:	b958      	cbnz	r0, 8000184 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016c:	2d0f      	cmp	r5, #15
 800016e:	d809      	bhi.n	8000184 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000170:	4602      	mov	r2, r0
 8000172:	4629      	mov	r1, r5
 8000174:	f04f 30ff 	mov.w	r0, #4294967295
 8000178:	f000 f854 	bl	8000224 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <HAL_InitTick+0x44>)
 800017e:	4620      	mov	r0, r4
 8000180:	601d      	str	r5, [r3, #0]
 8000182:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000184:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000186:	bd38      	pop	{r3, r4, r5, pc}
 8000188:	20000000 	.word	0x20000000
 800018c:	20000008 	.word	0x20000008
 8000190:	20000004 	.word	0x20000004

08000194 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000194:	4a07      	ldr	r2, [pc, #28]	; (80001b4 <HAL_Init+0x20>)
{
 8000196:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000198:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800019a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800019c:	f043 0310 	orr.w	r3, r3, #16
 80001a0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a2:	f000 f82d 	bl	8000200 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f7ff ffd0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001ac:	f000 fed8 	bl	8000f60 <HAL_MspInit>
}
 80001b0:	2000      	movs	r0, #0
 80001b2:	bd08      	pop	{r3, pc}
 80001b4:	40022000 	.word	0x40022000

080001b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x10>)
 80001ba:	4b04      	ldr	r3, [pc, #16]	; (80001cc <HAL_IncTick+0x14>)
 80001bc:	6811      	ldr	r1, [r2, #0]
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	440b      	add	r3, r1
 80001c2:	6013      	str	r3, [r2, #0]
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	20000098 	.word	0x20000098
 80001cc:	20000000 	.word	0x20000000

080001d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d0:	4b01      	ldr	r3, [pc, #4]	; (80001d8 <HAL_GetTick+0x8>)
 80001d2:	6818      	ldr	r0, [r3, #0]
}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	20000098 	.word	0x20000098

080001dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001dc:	b538      	push	{r3, r4, r5, lr}
 80001de:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80001e0:	f7ff fff6 	bl	80001d0 <HAL_GetTick>
 80001e4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001e6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80001e8:	bf1e      	ittt	ne
 80001ea:	4b04      	ldrne	r3, [pc, #16]	; (80001fc <HAL_Delay+0x20>)
 80001ec:	781b      	ldrbne	r3, [r3, #0]
 80001ee:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80001f0:	f7ff ffee 	bl	80001d0 <HAL_GetTick>
 80001f4:	1b40      	subs	r0, r0, r5
 80001f6:	4284      	cmp	r4, r0
 80001f8:	d8fa      	bhi.n	80001f0 <HAL_Delay+0x14>
  {
  }
}
 80001fa:	bd38      	pop	{r3, r4, r5, pc}
 80001fc:	20000000 	.word	0x20000000

08000200 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000200:	4a07      	ldr	r2, [pc, #28]	; (8000220 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000202:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000204:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000206:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800020a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800020e:	041b      	lsls	r3, r3, #16
 8000210:	0c1b      	lsrs	r3, r3, #16
 8000212:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000216:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800021a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800021c:	60d3      	str	r3, [r2, #12]
 800021e:	4770      	bx	lr
 8000220:	e000ed00 	.word	0xe000ed00

08000224 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000224:	4b17      	ldr	r3, [pc, #92]	; (8000284 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000226:	b530      	push	{r4, r5, lr}
 8000228:	68dc      	ldr	r4, [r3, #12]
 800022a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800022e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000232:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000234:	2b04      	cmp	r3, #4
 8000236:	bf28      	it	cs
 8000238:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800023a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800023c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000240:	bf98      	it	ls
 8000242:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000244:	fa05 f303 	lsl.w	r3, r5, r3
 8000248:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800024c:	bf88      	it	hi
 800024e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000250:	4019      	ands	r1, r3
 8000252:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000254:	fa05 f404 	lsl.w	r4, r5, r4
 8000258:	3c01      	subs	r4, #1
 800025a:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800025c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800025e:	ea42 0201 	orr.w	r2, r2, r1
 8000262:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000266:	bfaf      	iteee	ge
 8000268:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800026c:	4b06      	ldrlt	r3, [pc, #24]	; (8000288 <HAL_NVIC_SetPriority+0x64>)
 800026e:	f000 000f 	andlt.w	r0, r0, #15
 8000272:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000274:	bfa5      	ittet	ge
 8000276:	b2d2      	uxtbge	r2, r2
 8000278:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027c:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027e:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000282:	bd30      	pop	{r4, r5, pc}
 8000284:	e000ed00 	.word	0xe000ed00
 8000288:	e000ed14 	.word	0xe000ed14

0800028c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800028c:	3801      	subs	r0, #1
 800028e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000292:	d20a      	bcs.n	80002aa <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000294:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000296:	4b06      	ldr	r3, [pc, #24]	; (80002b0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000298:	4a06      	ldr	r2, [pc, #24]	; (80002b4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800029a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800029c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002a0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002a2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002a4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002a6:	601a      	str	r2, [r3, #0]
 80002a8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002aa:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	e000e010 	.word	0xe000e010
 80002b4:	e000ed00 	.word	0xe000ed00

080002b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80002b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80002bc:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80002be:	4616      	mov	r6, r2
 80002c0:	4b65      	ldr	r3, [pc, #404]	; (8000458 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80002c2:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8000468 <HAL_GPIO_Init+0x1b0>
 80002c6:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 800046c <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 80002ca:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002ce:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 80002d0:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002d4:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 80002d8:	45a0      	cmp	r8, r4
 80002da:	d17f      	bne.n	80003dc <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 80002dc:	684d      	ldr	r5, [r1, #4]
 80002de:	2d12      	cmp	r5, #18
 80002e0:	f000 80af 	beq.w	8000442 <HAL_GPIO_Init+0x18a>
 80002e4:	f200 8088 	bhi.w	80003f8 <HAL_GPIO_Init+0x140>
 80002e8:	2d02      	cmp	r5, #2
 80002ea:	f000 80a7 	beq.w	800043c <HAL_GPIO_Init+0x184>
 80002ee:	d87c      	bhi.n	80003ea <HAL_GPIO_Init+0x132>
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	f000 808e 	beq.w	8000412 <HAL_GPIO_Init+0x15a>
 80002f6:	2d01      	cmp	r5, #1
 80002f8:	f000 809e 	beq.w	8000438 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80002fc:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000300:	2cff      	cmp	r4, #255	; 0xff
 8000302:	bf93      	iteet	ls
 8000304:	4682      	movls	sl, r0
 8000306:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 800030a:	3d08      	subhi	r5, #8
 800030c:	f8d0 b000 	ldrls.w	fp, [r0]
 8000310:	bf92      	itee	ls
 8000312:	00b5      	lslls	r5, r6, #2
 8000314:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000318:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800031a:	fa09 f805 	lsl.w	r8, r9, r5
 800031e:	ea2b 0808 	bic.w	r8, fp, r8
 8000322:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000326:	bf88      	it	hi
 8000328:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800032c:	ea48 0505 	orr.w	r5, r8, r5
 8000330:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000334:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000338:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 800033c:	d04e      	beq.n	80003dc <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800033e:	4d47      	ldr	r5, [pc, #284]	; (800045c <HAL_GPIO_Init+0x1a4>)
 8000340:	4f46      	ldr	r7, [pc, #280]	; (800045c <HAL_GPIO_Init+0x1a4>)
 8000342:	69ad      	ldr	r5, [r5, #24]
 8000344:	f026 0803 	bic.w	r8, r6, #3
 8000348:	f045 0501 	orr.w	r5, r5, #1
 800034c:	61bd      	str	r5, [r7, #24]
 800034e:	69bd      	ldr	r5, [r7, #24]
 8000350:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000354:	f005 0501 	and.w	r5, r5, #1
 8000358:	9501      	str	r5, [sp, #4]
 800035a:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800035e:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000362:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000364:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000368:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800036c:	fa09 f90b 	lsl.w	r9, r9, fp
 8000370:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000374:	4d3a      	ldr	r5, [pc, #232]	; (8000460 <HAL_GPIO_Init+0x1a8>)
 8000376:	42a8      	cmp	r0, r5
 8000378:	d068      	beq.n	800044c <HAL_GPIO_Init+0x194>
 800037a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800037e:	42a8      	cmp	r0, r5
 8000380:	d066      	beq.n	8000450 <HAL_GPIO_Init+0x198>
 8000382:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000386:	42a8      	cmp	r0, r5
 8000388:	d064      	beq.n	8000454 <HAL_GPIO_Init+0x19c>
 800038a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800038e:	42a8      	cmp	r0, r5
 8000390:	bf0c      	ite	eq
 8000392:	2503      	moveq	r5, #3
 8000394:	2504      	movne	r5, #4
 8000396:	fa05 f50b 	lsl.w	r5, r5, fp
 800039a:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 800039e:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80003a2:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80003a4:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80003a8:	bf14      	ite	ne
 80003aa:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80003ac:	43a5      	biceq	r5, r4
 80003ae:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80003b0:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80003b2:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80003b6:	bf14      	ite	ne
 80003b8:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80003ba:	43a5      	biceq	r5, r4
 80003bc:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80003be:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80003c0:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80003c4:	bf14      	ite	ne
 80003c6:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80003c8:	43a5      	biceq	r5, r4
 80003ca:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80003cc:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80003ce:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80003d2:	bf14      	ite	ne
 80003d4:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80003d6:	ea25 0404 	biceq.w	r4, r5, r4
 80003da:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80003dc:	3601      	adds	r6, #1
 80003de:	2e10      	cmp	r6, #16
 80003e0:	f47f af73 	bne.w	80002ca <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 80003e4:	b003      	add	sp, #12
 80003e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 80003ea:	2d03      	cmp	r5, #3
 80003ec:	d022      	beq.n	8000434 <HAL_GPIO_Init+0x17c>
 80003ee:	2d11      	cmp	r5, #17
 80003f0:	d184      	bne.n	80002fc <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80003f2:	68ca      	ldr	r2, [r1, #12]
 80003f4:	3204      	adds	r2, #4
          break;
 80003f6:	e781      	b.n	80002fc <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80003f8:	4f1a      	ldr	r7, [pc, #104]	; (8000464 <HAL_GPIO_Init+0x1ac>)
 80003fa:	42bd      	cmp	r5, r7
 80003fc:	d009      	beq.n	8000412 <HAL_GPIO_Init+0x15a>
 80003fe:	d812      	bhi.n	8000426 <HAL_GPIO_Init+0x16e>
 8000400:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8000470 <HAL_GPIO_Init+0x1b8>
 8000404:	454d      	cmp	r5, r9
 8000406:	d004      	beq.n	8000412 <HAL_GPIO_Init+0x15a>
 8000408:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 800040c:	454d      	cmp	r5, r9
 800040e:	f47f af75 	bne.w	80002fc <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000412:	688a      	ldr	r2, [r1, #8]
 8000414:	b1c2      	cbz	r2, 8000448 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000416:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000418:	bf0c      	ite	eq
 800041a:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 800041e:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000422:	2208      	movs	r2, #8
 8000424:	e76a      	b.n	80002fc <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000426:	4575      	cmp	r5, lr
 8000428:	d0f3      	beq.n	8000412 <HAL_GPIO_Init+0x15a>
 800042a:	4565      	cmp	r5, ip
 800042c:	d0f1      	beq.n	8000412 <HAL_GPIO_Init+0x15a>
 800042e:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000474 <HAL_GPIO_Init+0x1bc>
 8000432:	e7eb      	b.n	800040c <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000434:	2200      	movs	r2, #0
 8000436:	e761      	b.n	80002fc <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000438:	68ca      	ldr	r2, [r1, #12]
          break;
 800043a:	e75f      	b.n	80002fc <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800043c:	68ca      	ldr	r2, [r1, #12]
 800043e:	3208      	adds	r2, #8
          break;
 8000440:	e75c      	b.n	80002fc <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000442:	68ca      	ldr	r2, [r1, #12]
 8000444:	320c      	adds	r2, #12
          break;
 8000446:	e759      	b.n	80002fc <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000448:	2204      	movs	r2, #4
 800044a:	e757      	b.n	80002fc <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800044c:	2500      	movs	r5, #0
 800044e:	e7a2      	b.n	8000396 <HAL_GPIO_Init+0xde>
 8000450:	2501      	movs	r5, #1
 8000452:	e7a0      	b.n	8000396 <HAL_GPIO_Init+0xde>
 8000454:	2502      	movs	r5, #2
 8000456:	e79e      	b.n	8000396 <HAL_GPIO_Init+0xde>
 8000458:	40010400 	.word	0x40010400
 800045c:	40021000 	.word	0x40021000
 8000460:	40010800 	.word	0x40010800
 8000464:	10210000 	.word	0x10210000
 8000468:	10310000 	.word	0x10310000
 800046c:	10320000 	.word	0x10320000
 8000470:	10110000 	.word	0x10110000
 8000474:	10220000 	.word	0x10220000

08000478 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000478:	b10a      	cbz	r2, 800047e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800047a:	6101      	str	r1, [r0, #16]
 800047c:	4770      	bx	lr
 800047e:	0409      	lsls	r1, r1, #16
 8000480:	e7fb      	b.n	800047a <HAL_GPIO_WritePin+0x2>

08000482 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000482:	68c3      	ldr	r3, [r0, #12]
 8000484:	4059      	eors	r1, r3
 8000486:	60c1      	str	r1, [r0, #12]
 8000488:	4770      	bx	lr
	...

0800048c <HAL_I2C_Init>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800048c:	b538      	push	{r3, r4, r5, lr}
  uint32_t freqrange = 0U;
  uint32_t pclk1 = 0U;

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 800048e:	4604      	mov	r4, r0
 8000490:	b908      	cbnz	r0, 8000496 <HAL_I2C_Init+0xa>
  {
    return HAL_ERROR;
 8000492:	2001      	movs	r0, #1
 8000494:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8000496:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800049a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800049e:	b91b      	cbnz	r3, 80004a8 <HAL_I2C_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80004a0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80004a4:	f000 fcd8 	bl	8000e58 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80004a8:	2324      	movs	r3, #36	; 0x24

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80004aa:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80004ac:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80004b0:	6813      	ldr	r3, [r2, #0]
 80004b2:	f023 0301 	bic.w	r3, r3, #1
 80004b6:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80004b8:	f000 fae2 	bl	8000a80 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80004bc:	6863      	ldr	r3, [r4, #4]
 80004be:	4a2f      	ldr	r2, [pc, #188]	; (800057c <HAL_I2C_Init+0xf0>)
 80004c0:	4293      	cmp	r3, r2
 80004c2:	d830      	bhi.n	8000526 <HAL_I2C_Init+0x9a>
 80004c4:	4a2e      	ldr	r2, [pc, #184]	; (8000580 <HAL_I2C_Init+0xf4>)
 80004c6:	4290      	cmp	r0, r2
 80004c8:	d9e3      	bls.n	8000492 <HAL_I2C_Init+0x6>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80004ca:	4a2e      	ldr	r2, [pc, #184]	; (8000584 <HAL_I2C_Init+0xf8>)

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 80004cc:	6821      	ldr	r1, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80004ce:	fbb0 f2f2 	udiv	r2, r0, r2
  hi2c->Instance->CR2 = freqrange;
 80004d2:	604a      	str	r2, [r1, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80004d4:	3201      	adds	r2, #1
 80004d6:	620a      	str	r2, [r1, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80004d8:	4a28      	ldr	r2, [pc, #160]	; (800057c <HAL_I2C_Init+0xf0>)
 80004da:	3801      	subs	r0, #1
 80004dc:	4293      	cmp	r3, r2
 80004de:	d832      	bhi.n	8000546 <HAL_I2C_Init+0xba>
 80004e0:	005b      	lsls	r3, r3, #1
 80004e2:	fbb0 f0f3 	udiv	r0, r0, r3
 80004e6:	1c43      	adds	r3, r0, #1
 80004e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80004ec:	2b04      	cmp	r3, #4
 80004ee:	bf38      	it	cc
 80004f0:	2304      	movcc	r3, #4
 80004f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80004f4:	6a22      	ldr	r2, [r4, #32]
 80004f6:	69e3      	ldr	r3, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80004f8:	2000      	movs	r0, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80004fa:	4313      	orrs	r3, r2
 80004fc:	600b      	str	r3, [r1, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 80004fe:	68e2      	ldr	r2, [r4, #12]
 8000500:	6923      	ldr	r3, [r4, #16]
 8000502:	4313      	orrs	r3, r2
 8000504:	608b      	str	r3, [r1, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8000506:	69a2      	ldr	r2, [r4, #24]
 8000508:	6963      	ldr	r3, [r4, #20]
 800050a:	4313      	orrs	r3, r2
 800050c:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 800050e:	680b      	ldr	r3, [r1, #0]
 8000510:	f043 0301 	orr.w	r3, r3, #1
 8000514:	600b      	str	r3, [r1, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8000516:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000518:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800051a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800051e:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000520:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
 8000524:	bd38      	pop	{r3, r4, r5, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000526:	4a18      	ldr	r2, [pc, #96]	; (8000588 <HAL_I2C_Init+0xfc>)
 8000528:	4290      	cmp	r0, r2
 800052a:	d9b2      	bls.n	8000492 <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 800052c:	4d15      	ldr	r5, [pc, #84]	; (8000584 <HAL_I2C_Init+0xf8>)
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800052e:	f44f 7296 	mov.w	r2, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8000532:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->CR2 = freqrange;
 8000536:	6821      	ldr	r1, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000538:	436a      	muls	r2, r5
  hi2c->Instance->CR2 = freqrange;
 800053a:	604d      	str	r5, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800053c:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8000540:	fbb2 f2f5 	udiv	r2, r2, r5
 8000544:	e7c6      	b.n	80004d4 <HAL_I2C_Init+0x48>
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000546:	68a2      	ldr	r2, [r4, #8]
 8000548:	b952      	cbnz	r2, 8000560 <HAL_I2C_Init+0xd4>
 800054a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800054e:	fbb0 f0f3 	udiv	r0, r0, r3
 8000552:	1c43      	adds	r3, r0, #1
 8000554:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000558:	b16b      	cbz	r3, 8000576 <HAL_I2C_Init+0xea>
 800055a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800055e:	e7c8      	b.n	80004f2 <HAL_I2C_Init+0x66>
 8000560:	2219      	movs	r2, #25
 8000562:	4353      	muls	r3, r2
 8000564:	fbb0 f0f3 	udiv	r0, r0, r3
 8000568:	1c43      	adds	r3, r0, #1
 800056a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800056e:	b113      	cbz	r3, 8000576 <HAL_I2C_Init+0xea>
 8000570:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000574:	e7bd      	b.n	80004f2 <HAL_I2C_Init+0x66>
 8000576:	2301      	movs	r3, #1
 8000578:	e7bb      	b.n	80004f2 <HAL_I2C_Init+0x66>
 800057a:	bf00      	nop
 800057c:	000186a0 	.word	0x000186a0
 8000580:	001e847f 	.word	0x001e847f
 8000584:	000f4240 	.word	0x000f4240
 8000588:	003d08ff 	.word	0x003d08ff

0800058c <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800058c:	6803      	ldr	r3, [r0, #0]
{
 800058e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000592:	07db      	lsls	r3, r3, #31
{
 8000594:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000596:	d410      	bmi.n	80005ba <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000598:	682b      	ldr	r3, [r5, #0]
 800059a:	079f      	lsls	r7, r3, #30
 800059c:	d45e      	bmi.n	800065c <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800059e:	682b      	ldr	r3, [r5, #0]
 80005a0:	0719      	lsls	r1, r3, #28
 80005a2:	f100 8095 	bmi.w	80006d0 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80005a6:	682b      	ldr	r3, [r5, #0]
 80005a8:	075a      	lsls	r2, r3, #29
 80005aa:	f100 80bf 	bmi.w	800072c <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80005ae:	69ea      	ldr	r2, [r5, #28]
 80005b0:	2a00      	cmp	r2, #0
 80005b2:	f040 812d 	bne.w	8000810 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80005b6:	2000      	movs	r0, #0
 80005b8:	e014      	b.n	80005e4 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80005ba:	4c90      	ldr	r4, [pc, #576]	; (80007fc <HAL_RCC_OscConfig+0x270>)
 80005bc:	6863      	ldr	r3, [r4, #4]
 80005be:	f003 030c 	and.w	r3, r3, #12
 80005c2:	2b04      	cmp	r3, #4
 80005c4:	d007      	beq.n	80005d6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80005c6:	6863      	ldr	r3, [r4, #4]
 80005c8:	f003 030c 	and.w	r3, r3, #12
 80005cc:	2b08      	cmp	r3, #8
 80005ce:	d10c      	bne.n	80005ea <HAL_RCC_OscConfig+0x5e>
 80005d0:	6863      	ldr	r3, [r4, #4]
 80005d2:	03de      	lsls	r6, r3, #15
 80005d4:	d509      	bpl.n	80005ea <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80005d6:	6823      	ldr	r3, [r4, #0]
 80005d8:	039c      	lsls	r4, r3, #14
 80005da:	d5dd      	bpl.n	8000598 <HAL_RCC_OscConfig+0xc>
 80005dc:	686b      	ldr	r3, [r5, #4]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d1da      	bne.n	8000598 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80005e2:	2001      	movs	r0, #1
}
 80005e4:	b002      	add	sp, #8
 80005e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005ea:	686b      	ldr	r3, [r5, #4]
 80005ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80005f0:	d110      	bne.n	8000614 <HAL_RCC_OscConfig+0x88>
 80005f2:	6823      	ldr	r3, [r4, #0]
 80005f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005f8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80005fa:	f7ff fde9 	bl	80001d0 <HAL_GetTick>
 80005fe:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000600:	6823      	ldr	r3, [r4, #0]
 8000602:	0398      	lsls	r0, r3, #14
 8000604:	d4c8      	bmi.n	8000598 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000606:	f7ff fde3 	bl	80001d0 <HAL_GetTick>
 800060a:	1b80      	subs	r0, r0, r6
 800060c:	2864      	cmp	r0, #100	; 0x64
 800060e:	d9f7      	bls.n	8000600 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000610:	2003      	movs	r0, #3
 8000612:	e7e7      	b.n	80005e4 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000614:	b99b      	cbnz	r3, 800063e <HAL_RCC_OscConfig+0xb2>
 8000616:	6823      	ldr	r3, [r4, #0]
 8000618:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800061c:	6023      	str	r3, [r4, #0]
 800061e:	6823      	ldr	r3, [r4, #0]
 8000620:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000624:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000626:	f7ff fdd3 	bl	80001d0 <HAL_GetTick>
 800062a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800062c:	6823      	ldr	r3, [r4, #0]
 800062e:	0399      	lsls	r1, r3, #14
 8000630:	d5b2      	bpl.n	8000598 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000632:	f7ff fdcd 	bl	80001d0 <HAL_GetTick>
 8000636:	1b80      	subs	r0, r0, r6
 8000638:	2864      	cmp	r0, #100	; 0x64
 800063a:	d9f7      	bls.n	800062c <HAL_RCC_OscConfig+0xa0>
 800063c:	e7e8      	b.n	8000610 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800063e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000642:	6823      	ldr	r3, [r4, #0]
 8000644:	d103      	bne.n	800064e <HAL_RCC_OscConfig+0xc2>
 8000646:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800064a:	6023      	str	r3, [r4, #0]
 800064c:	e7d1      	b.n	80005f2 <HAL_RCC_OscConfig+0x66>
 800064e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000652:	6023      	str	r3, [r4, #0]
 8000654:	6823      	ldr	r3, [r4, #0]
 8000656:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800065a:	e7cd      	b.n	80005f8 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800065c:	4c67      	ldr	r4, [pc, #412]	; (80007fc <HAL_RCC_OscConfig+0x270>)
 800065e:	6863      	ldr	r3, [r4, #4]
 8000660:	f013 0f0c 	tst.w	r3, #12
 8000664:	d007      	beq.n	8000676 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000666:	6863      	ldr	r3, [r4, #4]
 8000668:	f003 030c 	and.w	r3, r3, #12
 800066c:	2b08      	cmp	r3, #8
 800066e:	d110      	bne.n	8000692 <HAL_RCC_OscConfig+0x106>
 8000670:	6863      	ldr	r3, [r4, #4]
 8000672:	03da      	lsls	r2, r3, #15
 8000674:	d40d      	bmi.n	8000692 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000676:	6823      	ldr	r3, [r4, #0]
 8000678:	079b      	lsls	r3, r3, #30
 800067a:	d502      	bpl.n	8000682 <HAL_RCC_OscConfig+0xf6>
 800067c:	692b      	ldr	r3, [r5, #16]
 800067e:	2b01      	cmp	r3, #1
 8000680:	d1af      	bne.n	80005e2 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000682:	6823      	ldr	r3, [r4, #0]
 8000684:	696a      	ldr	r2, [r5, #20]
 8000686:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800068a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800068e:	6023      	str	r3, [r4, #0]
 8000690:	e785      	b.n	800059e <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000692:	692a      	ldr	r2, [r5, #16]
 8000694:	4b5a      	ldr	r3, [pc, #360]	; (8000800 <HAL_RCC_OscConfig+0x274>)
 8000696:	b16a      	cbz	r2, 80006b4 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8000698:	2201      	movs	r2, #1
 800069a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800069c:	f7ff fd98 	bl	80001d0 <HAL_GetTick>
 80006a0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80006a2:	6823      	ldr	r3, [r4, #0]
 80006a4:	079f      	lsls	r7, r3, #30
 80006a6:	d4ec      	bmi.n	8000682 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80006a8:	f7ff fd92 	bl	80001d0 <HAL_GetTick>
 80006ac:	1b80      	subs	r0, r0, r6
 80006ae:	2802      	cmp	r0, #2
 80006b0:	d9f7      	bls.n	80006a2 <HAL_RCC_OscConfig+0x116>
 80006b2:	e7ad      	b.n	8000610 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80006b4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80006b6:	f7ff fd8b 	bl	80001d0 <HAL_GetTick>
 80006ba:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80006bc:	6823      	ldr	r3, [r4, #0]
 80006be:	0798      	lsls	r0, r3, #30
 80006c0:	f57f af6d 	bpl.w	800059e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80006c4:	f7ff fd84 	bl	80001d0 <HAL_GetTick>
 80006c8:	1b80      	subs	r0, r0, r6
 80006ca:	2802      	cmp	r0, #2
 80006cc:	d9f6      	bls.n	80006bc <HAL_RCC_OscConfig+0x130>
 80006ce:	e79f      	b.n	8000610 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80006d0:	69aa      	ldr	r2, [r5, #24]
 80006d2:	4c4a      	ldr	r4, [pc, #296]	; (80007fc <HAL_RCC_OscConfig+0x270>)
 80006d4:	4b4b      	ldr	r3, [pc, #300]	; (8000804 <HAL_RCC_OscConfig+0x278>)
 80006d6:	b1da      	cbz	r2, 8000710 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 80006d8:	2201      	movs	r2, #1
 80006da:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80006dc:	f7ff fd78 	bl	80001d0 <HAL_GetTick>
 80006e0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80006e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80006e4:	079b      	lsls	r3, r3, #30
 80006e6:	d50d      	bpl.n	8000704 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80006e8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80006ec:	4b46      	ldr	r3, [pc, #280]	; (8000808 <HAL_RCC_OscConfig+0x27c>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80006f4:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80006f6:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80006f8:	9b01      	ldr	r3, [sp, #4]
 80006fa:	1e5a      	subs	r2, r3, #1
 80006fc:	9201      	str	r2, [sp, #4]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d1f9      	bne.n	80006f6 <HAL_RCC_OscConfig+0x16a>
 8000702:	e750      	b.n	80005a6 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000704:	f7ff fd64 	bl	80001d0 <HAL_GetTick>
 8000708:	1b80      	subs	r0, r0, r6
 800070a:	2802      	cmp	r0, #2
 800070c:	d9e9      	bls.n	80006e2 <HAL_RCC_OscConfig+0x156>
 800070e:	e77f      	b.n	8000610 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000710:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000712:	f7ff fd5d 	bl	80001d0 <HAL_GetTick>
 8000716:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000718:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800071a:	079f      	lsls	r7, r3, #30
 800071c:	f57f af43 	bpl.w	80005a6 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000720:	f7ff fd56 	bl	80001d0 <HAL_GetTick>
 8000724:	1b80      	subs	r0, r0, r6
 8000726:	2802      	cmp	r0, #2
 8000728:	d9f6      	bls.n	8000718 <HAL_RCC_OscConfig+0x18c>
 800072a:	e771      	b.n	8000610 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800072c:	4c33      	ldr	r4, [pc, #204]	; (80007fc <HAL_RCC_OscConfig+0x270>)
 800072e:	69e3      	ldr	r3, [r4, #28]
 8000730:	00d8      	lsls	r0, r3, #3
 8000732:	d424      	bmi.n	800077e <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8000734:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000736:	69e3      	ldr	r3, [r4, #28]
 8000738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800073c:	61e3      	str	r3, [r4, #28]
 800073e:	69e3      	ldr	r3, [r4, #28]
 8000740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000744:	9300      	str	r3, [sp, #0]
 8000746:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000748:	4e30      	ldr	r6, [pc, #192]	; (800080c <HAL_RCC_OscConfig+0x280>)
 800074a:	6833      	ldr	r3, [r6, #0]
 800074c:	05d9      	lsls	r1, r3, #23
 800074e:	d518      	bpl.n	8000782 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000750:	68eb      	ldr	r3, [r5, #12]
 8000752:	2b01      	cmp	r3, #1
 8000754:	d126      	bne.n	80007a4 <HAL_RCC_OscConfig+0x218>
 8000756:	6a23      	ldr	r3, [r4, #32]
 8000758:	f043 0301 	orr.w	r3, r3, #1
 800075c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800075e:	f7ff fd37 	bl	80001d0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000762:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000766:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000768:	6a23      	ldr	r3, [r4, #32]
 800076a:	079b      	lsls	r3, r3, #30
 800076c:	d53f      	bpl.n	80007ee <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 800076e:	2f00      	cmp	r7, #0
 8000770:	f43f af1d 	beq.w	80005ae <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000774:	69e3      	ldr	r3, [r4, #28]
 8000776:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800077a:	61e3      	str	r3, [r4, #28]
 800077c:	e717      	b.n	80005ae <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 800077e:	2700      	movs	r7, #0
 8000780:	e7e2      	b.n	8000748 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000782:	6833      	ldr	r3, [r6, #0]
 8000784:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000788:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800078a:	f7ff fd21 	bl	80001d0 <HAL_GetTick>
 800078e:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000790:	6833      	ldr	r3, [r6, #0]
 8000792:	05da      	lsls	r2, r3, #23
 8000794:	d4dc      	bmi.n	8000750 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000796:	f7ff fd1b 	bl	80001d0 <HAL_GetTick>
 800079a:	eba0 0008 	sub.w	r0, r0, r8
 800079e:	2864      	cmp	r0, #100	; 0x64
 80007a0:	d9f6      	bls.n	8000790 <HAL_RCC_OscConfig+0x204>
 80007a2:	e735      	b.n	8000610 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007a4:	b9ab      	cbnz	r3, 80007d2 <HAL_RCC_OscConfig+0x246>
 80007a6:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80007a8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007ac:	f023 0301 	bic.w	r3, r3, #1
 80007b0:	6223      	str	r3, [r4, #32]
 80007b2:	6a23      	ldr	r3, [r4, #32]
 80007b4:	f023 0304 	bic.w	r3, r3, #4
 80007b8:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80007ba:	f7ff fd09 	bl	80001d0 <HAL_GetTick>
 80007be:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80007c0:	6a23      	ldr	r3, [r4, #32]
 80007c2:	0798      	lsls	r0, r3, #30
 80007c4:	d5d3      	bpl.n	800076e <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80007c6:	f7ff fd03 	bl	80001d0 <HAL_GetTick>
 80007ca:	1b80      	subs	r0, r0, r6
 80007cc:	4540      	cmp	r0, r8
 80007ce:	d9f7      	bls.n	80007c0 <HAL_RCC_OscConfig+0x234>
 80007d0:	e71e      	b.n	8000610 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007d2:	2b05      	cmp	r3, #5
 80007d4:	6a23      	ldr	r3, [r4, #32]
 80007d6:	d103      	bne.n	80007e0 <HAL_RCC_OscConfig+0x254>
 80007d8:	f043 0304 	orr.w	r3, r3, #4
 80007dc:	6223      	str	r3, [r4, #32]
 80007de:	e7ba      	b.n	8000756 <HAL_RCC_OscConfig+0x1ca>
 80007e0:	f023 0301 	bic.w	r3, r3, #1
 80007e4:	6223      	str	r3, [r4, #32]
 80007e6:	6a23      	ldr	r3, [r4, #32]
 80007e8:	f023 0304 	bic.w	r3, r3, #4
 80007ec:	e7b6      	b.n	800075c <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80007ee:	f7ff fcef 	bl	80001d0 <HAL_GetTick>
 80007f2:	eba0 0008 	sub.w	r0, r0, r8
 80007f6:	42b0      	cmp	r0, r6
 80007f8:	d9b6      	bls.n	8000768 <HAL_RCC_OscConfig+0x1dc>
 80007fa:	e709      	b.n	8000610 <HAL_RCC_OscConfig+0x84>
 80007fc:	40021000 	.word	0x40021000
 8000800:	42420000 	.word	0x42420000
 8000804:	42420480 	.word	0x42420480
 8000808:	20000008 	.word	0x20000008
 800080c:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000810:	4c22      	ldr	r4, [pc, #136]	; (800089c <HAL_RCC_OscConfig+0x310>)
 8000812:	6863      	ldr	r3, [r4, #4]
 8000814:	f003 030c 	and.w	r3, r3, #12
 8000818:	2b08      	cmp	r3, #8
 800081a:	f43f aee2 	beq.w	80005e2 <HAL_RCC_OscConfig+0x56>
 800081e:	2300      	movs	r3, #0
 8000820:	4e1f      	ldr	r6, [pc, #124]	; (80008a0 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000822:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000824:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000826:	d12b      	bne.n	8000880 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8000828:	f7ff fcd2 	bl	80001d0 <HAL_GetTick>
 800082c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800082e:	6823      	ldr	r3, [r4, #0]
 8000830:	0199      	lsls	r1, r3, #6
 8000832:	d41f      	bmi.n	8000874 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000834:	6a2b      	ldr	r3, [r5, #32]
 8000836:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800083a:	d105      	bne.n	8000848 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800083c:	6862      	ldr	r2, [r4, #4]
 800083e:	68a9      	ldr	r1, [r5, #8]
 8000840:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000844:	430a      	orrs	r2, r1
 8000846:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000848:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800084a:	6862      	ldr	r2, [r4, #4]
 800084c:	430b      	orrs	r3, r1
 800084e:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000852:	4313      	orrs	r3, r2
 8000854:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000856:	2301      	movs	r3, #1
 8000858:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800085a:	f7ff fcb9 	bl	80001d0 <HAL_GetTick>
 800085e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000860:	6823      	ldr	r3, [r4, #0]
 8000862:	019a      	lsls	r2, r3, #6
 8000864:	f53f aea7 	bmi.w	80005b6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000868:	f7ff fcb2 	bl	80001d0 <HAL_GetTick>
 800086c:	1b40      	subs	r0, r0, r5
 800086e:	2802      	cmp	r0, #2
 8000870:	d9f6      	bls.n	8000860 <HAL_RCC_OscConfig+0x2d4>
 8000872:	e6cd      	b.n	8000610 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000874:	f7ff fcac 	bl	80001d0 <HAL_GetTick>
 8000878:	1bc0      	subs	r0, r0, r7
 800087a:	2802      	cmp	r0, #2
 800087c:	d9d7      	bls.n	800082e <HAL_RCC_OscConfig+0x2a2>
 800087e:	e6c7      	b.n	8000610 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000880:	f7ff fca6 	bl	80001d0 <HAL_GetTick>
 8000884:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000886:	6823      	ldr	r3, [r4, #0]
 8000888:	019b      	lsls	r3, r3, #6
 800088a:	f57f ae94 	bpl.w	80005b6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800088e:	f7ff fc9f 	bl	80001d0 <HAL_GetTick>
 8000892:	1b40      	subs	r0, r0, r5
 8000894:	2802      	cmp	r0, #2
 8000896:	d9f6      	bls.n	8000886 <HAL_RCC_OscConfig+0x2fa>
 8000898:	e6ba      	b.n	8000610 <HAL_RCC_OscConfig+0x84>
 800089a:	bf00      	nop
 800089c:	40021000 	.word	0x40021000
 80008a0:	42420060 	.word	0x42420060

080008a4 <HAL_RCC_GetSysClockFreq>:
{
 80008a4:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80008a6:	4b19      	ldr	r3, [pc, #100]	; (800090c <HAL_RCC_GetSysClockFreq+0x68>)
{
 80008a8:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80008aa:	ac02      	add	r4, sp, #8
 80008ac:	f103 0510 	add.w	r5, r3, #16
 80008b0:	4622      	mov	r2, r4
 80008b2:	6818      	ldr	r0, [r3, #0]
 80008b4:	6859      	ldr	r1, [r3, #4]
 80008b6:	3308      	adds	r3, #8
 80008b8:	c203      	stmia	r2!, {r0, r1}
 80008ba:	42ab      	cmp	r3, r5
 80008bc:	4614      	mov	r4, r2
 80008be:	d1f7      	bne.n	80008b0 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80008c0:	2301      	movs	r3, #1
 80008c2:	f88d 3004 	strb.w	r3, [sp, #4]
 80008c6:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 80008c8:	4911      	ldr	r1, [pc, #68]	; (8000910 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80008ca:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 80008ce:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80008d0:	f003 020c 	and.w	r2, r3, #12
 80008d4:	2a08      	cmp	r2, #8
 80008d6:	d117      	bne.n	8000908 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80008d8:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80008dc:	a806      	add	r0, sp, #24
 80008de:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80008e0:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80008e2:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80008e6:	d50c      	bpl.n	8000902 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80008e8:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80008ea:	480a      	ldr	r0, [pc, #40]	; (8000914 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80008ec:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80008f0:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80008f2:	aa06      	add	r2, sp, #24
 80008f4:	4413      	add	r3, r2
 80008f6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80008fa:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80008fe:	b007      	add	sp, #28
 8000900:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000902:	4805      	ldr	r0, [pc, #20]	; (8000918 <HAL_RCC_GetSysClockFreq+0x74>)
 8000904:	4350      	muls	r0, r2
 8000906:	e7fa      	b.n	80008fe <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8000908:	4802      	ldr	r0, [pc, #8]	; (8000914 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 800090a:	e7f8      	b.n	80008fe <HAL_RCC_GetSysClockFreq+0x5a>
 800090c:	08001fec 	.word	0x08001fec
 8000910:	40021000 	.word	0x40021000
 8000914:	007a1200 	.word	0x007a1200
 8000918:	003d0900 	.word	0x003d0900

0800091c <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800091c:	4a54      	ldr	r2, [pc, #336]	; (8000a70 <HAL_RCC_ClockConfig+0x154>)
{
 800091e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000922:	6813      	ldr	r3, [r2, #0]
{
 8000924:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000926:	f003 0307 	and.w	r3, r3, #7
 800092a:	428b      	cmp	r3, r1
{
 800092c:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800092e:	d32a      	bcc.n	8000986 <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000930:	6829      	ldr	r1, [r5, #0]
 8000932:	078c      	lsls	r4, r1, #30
 8000934:	d434      	bmi.n	80009a0 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000936:	07ca      	lsls	r2, r1, #31
 8000938:	d447      	bmi.n	80009ca <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800093a:	4a4d      	ldr	r2, [pc, #308]	; (8000a70 <HAL_RCC_ClockConfig+0x154>)
 800093c:	6813      	ldr	r3, [r2, #0]
 800093e:	f003 0307 	and.w	r3, r3, #7
 8000942:	429e      	cmp	r6, r3
 8000944:	f0c0 8082 	bcc.w	8000a4c <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000948:	682a      	ldr	r2, [r5, #0]
 800094a:	4c4a      	ldr	r4, [pc, #296]	; (8000a74 <HAL_RCC_ClockConfig+0x158>)
 800094c:	f012 0f04 	tst.w	r2, #4
 8000950:	f040 8087 	bne.w	8000a62 <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000954:	0713      	lsls	r3, r2, #28
 8000956:	d506      	bpl.n	8000966 <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000958:	6863      	ldr	r3, [r4, #4]
 800095a:	692a      	ldr	r2, [r5, #16]
 800095c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000960:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000964:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000966:	f7ff ff9d 	bl	80008a4 <HAL_RCC_GetSysClockFreq>
 800096a:	6863      	ldr	r3, [r4, #4]
 800096c:	4a42      	ldr	r2, [pc, #264]	; (8000a78 <HAL_RCC_ClockConfig+0x15c>)
 800096e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000972:	5cd3      	ldrb	r3, [r2, r3]
 8000974:	40d8      	lsrs	r0, r3
 8000976:	4b41      	ldr	r3, [pc, #260]	; (8000a7c <HAL_RCC_ClockConfig+0x160>)
 8000978:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800097a:	2000      	movs	r0, #0
 800097c:	f7ff fbe6 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 8000980:	2000      	movs	r0, #0
}
 8000982:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000986:	6813      	ldr	r3, [r2, #0]
 8000988:	f023 0307 	bic.w	r3, r3, #7
 800098c:	430b      	orrs	r3, r1
 800098e:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000990:	6813      	ldr	r3, [r2, #0]
 8000992:	f003 0307 	and.w	r3, r3, #7
 8000996:	4299      	cmp	r1, r3
 8000998:	d0ca      	beq.n	8000930 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 800099a:	2001      	movs	r0, #1
 800099c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80009a0:	4b34      	ldr	r3, [pc, #208]	; (8000a74 <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80009a2:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80009a6:	bf1e      	ittt	ne
 80009a8:	685a      	ldrne	r2, [r3, #4]
 80009aa:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 80009ae:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80009b0:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80009b2:	bf42      	ittt	mi
 80009b4:	685a      	ldrmi	r2, [r3, #4]
 80009b6:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80009ba:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80009bc:	685a      	ldr	r2, [r3, #4]
 80009be:	68a8      	ldr	r0, [r5, #8]
 80009c0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80009c4:	4302      	orrs	r2, r0
 80009c6:	605a      	str	r2, [r3, #4]
 80009c8:	e7b5      	b.n	8000936 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80009ca:	686a      	ldr	r2, [r5, #4]
 80009cc:	4c29      	ldr	r4, [pc, #164]	; (8000a74 <HAL_RCC_ClockConfig+0x158>)
 80009ce:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009d0:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80009d2:	d11c      	bne.n	8000a0e <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009d4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009d8:	d0df      	beq.n	800099a <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80009da:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009dc:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80009e0:	f023 0303 	bic.w	r3, r3, #3
 80009e4:	4313      	orrs	r3, r2
 80009e6:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80009e8:	f7ff fbf2 	bl	80001d0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80009ec:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80009ee:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80009f0:	2b01      	cmp	r3, #1
 80009f2:	d114      	bne.n	8000a1e <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80009f4:	6863      	ldr	r3, [r4, #4]
 80009f6:	f003 030c 	and.w	r3, r3, #12
 80009fa:	2b04      	cmp	r3, #4
 80009fc:	d09d      	beq.n	800093a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009fe:	f7ff fbe7 	bl	80001d0 <HAL_GetTick>
 8000a02:	1bc0      	subs	r0, r0, r7
 8000a04:	4540      	cmp	r0, r8
 8000a06:	d9f5      	bls.n	80009f4 <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 8000a08:	2003      	movs	r0, #3
 8000a0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000a0e:	2a02      	cmp	r2, #2
 8000a10:	d102      	bne.n	8000a18 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000a12:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000a16:	e7df      	b.n	80009d8 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a18:	f013 0f02 	tst.w	r3, #2
 8000a1c:	e7dc      	b.n	80009d8 <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000a1e:	2b02      	cmp	r3, #2
 8000a20:	d10f      	bne.n	8000a42 <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000a22:	6863      	ldr	r3, [r4, #4]
 8000a24:	f003 030c 	and.w	r3, r3, #12
 8000a28:	2b08      	cmp	r3, #8
 8000a2a:	d086      	beq.n	800093a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a2c:	f7ff fbd0 	bl	80001d0 <HAL_GetTick>
 8000a30:	1bc0      	subs	r0, r0, r7
 8000a32:	4540      	cmp	r0, r8
 8000a34:	d9f5      	bls.n	8000a22 <HAL_RCC_ClockConfig+0x106>
 8000a36:	e7e7      	b.n	8000a08 <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a38:	f7ff fbca 	bl	80001d0 <HAL_GetTick>
 8000a3c:	1bc0      	subs	r0, r0, r7
 8000a3e:	4540      	cmp	r0, r8
 8000a40:	d8e2      	bhi.n	8000a08 <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000a42:	6863      	ldr	r3, [r4, #4]
 8000a44:	f013 0f0c 	tst.w	r3, #12
 8000a48:	d1f6      	bne.n	8000a38 <HAL_RCC_ClockConfig+0x11c>
 8000a4a:	e776      	b.n	800093a <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000a4c:	6813      	ldr	r3, [r2, #0]
 8000a4e:	f023 0307 	bic.w	r3, r3, #7
 8000a52:	4333      	orrs	r3, r6
 8000a54:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000a56:	6813      	ldr	r3, [r2, #0]
 8000a58:	f003 0307 	and.w	r3, r3, #7
 8000a5c:	429e      	cmp	r6, r3
 8000a5e:	d19c      	bne.n	800099a <HAL_RCC_ClockConfig+0x7e>
 8000a60:	e772      	b.n	8000948 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000a62:	6863      	ldr	r3, [r4, #4]
 8000a64:	68e9      	ldr	r1, [r5, #12]
 8000a66:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000a6a:	430b      	orrs	r3, r1
 8000a6c:	6063      	str	r3, [r4, #4]
 8000a6e:	e771      	b.n	8000954 <HAL_RCC_ClockConfig+0x38>
 8000a70:	40022000 	.word	0x40022000
 8000a74:	40021000 	.word	0x40021000
 8000a78:	0800200d 	.word	0x0800200d
 8000a7c:	20000008 	.word	0x20000008

08000a80 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000a80:	4b04      	ldr	r3, [pc, #16]	; (8000a94 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000a82:	4a05      	ldr	r2, [pc, #20]	; (8000a98 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8000a8a:	5cd3      	ldrb	r3, [r2, r3]
 8000a8c:	4a03      	ldr	r2, [pc, #12]	; (8000a9c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000a8e:	6810      	ldr	r0, [r2, #0]
}    
 8000a90:	40d8      	lsrs	r0, r3
 8000a92:	4770      	bx	lr
 8000a94:	40021000 	.word	0x40021000
 8000a98:	0800201d 	.word	0x0800201d
 8000a9c:	20000008 	.word	0x20000008

08000aa0 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000aa0:	4b04      	ldr	r3, [pc, #16]	; (8000ab4 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000aa2:	4a05      	ldr	r2, [pc, #20]	; (8000ab8 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000aa4:	685b      	ldr	r3, [r3, #4]
 8000aa6:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8000aaa:	5cd3      	ldrb	r3, [r2, r3]
 8000aac:	4a03      	ldr	r2, [pc, #12]	; (8000abc <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000aae:	6810      	ldr	r0, [r2, #0]
} 
 8000ab0:	40d8      	lsrs	r0, r3
 8000ab2:	4770      	bx	lr
 8000ab4:	40021000 	.word	0x40021000
 8000ab8:	0800201d 	.word	0x0800201d
 8000abc:	20000008 	.word	0x20000008

08000ac0 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000ac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000ac4:	6805      	ldr	r5, [r0, #0]
 8000ac6:	68c2      	ldr	r2, [r0, #12]
 8000ac8:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000aca:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000acc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000ad4:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 8000ad6:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000ad8:	430b      	orrs	r3, r1
 8000ada:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8000adc:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8000ae0:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000ae4:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8000ae6:	4313      	orrs	r3, r2
 8000ae8:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000aea:	696b      	ldr	r3, [r5, #20]
 8000aec:	6982      	ldr	r2, [r0, #24]
 8000aee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000af2:	4313      	orrs	r3, r2
 8000af4:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8000af6:	4b40      	ldr	r3, [pc, #256]	; (8000bf8 <UART_SetConfig+0x138>)
{
 8000af8:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 8000afa:	429d      	cmp	r5, r3
 8000afc:	f04f 0419 	mov.w	r4, #25
 8000b00:	d146      	bne.n	8000b90 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8000b02:	f7ff ffcd 	bl	8000aa0 <HAL_RCC_GetPCLK2Freq>
 8000b06:	fb04 f300 	mul.w	r3, r4, r0
 8000b0a:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8000b0e:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000b12:	00b6      	lsls	r6, r6, #2
 8000b14:	fbb3 f3f6 	udiv	r3, r3, r6
 8000b18:	fbb3 f3f8 	udiv	r3, r3, r8
 8000b1c:	011e      	lsls	r6, r3, #4
 8000b1e:	f7ff ffbf 	bl	8000aa0 <HAL_RCC_GetPCLK2Freq>
 8000b22:	4360      	muls	r0, r4
 8000b24:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000b28:	009b      	lsls	r3, r3, #2
 8000b2a:	fbb0 f7f3 	udiv	r7, r0, r3
 8000b2e:	f7ff ffb7 	bl	8000aa0 <HAL_RCC_GetPCLK2Freq>
 8000b32:	4360      	muls	r0, r4
 8000b34:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000b38:	009b      	lsls	r3, r3, #2
 8000b3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000b3e:	fbb3 f3f8 	udiv	r3, r3, r8
 8000b42:	fb08 7313 	mls	r3, r8, r3, r7
 8000b46:	011b      	lsls	r3, r3, #4
 8000b48:	3332      	adds	r3, #50	; 0x32
 8000b4a:	fbb3 f3f8 	udiv	r3, r3, r8
 8000b4e:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8000b52:	f7ff ffa5 	bl	8000aa0 <HAL_RCC_GetPCLK2Freq>
 8000b56:	4360      	muls	r0, r4
 8000b58:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8000b5c:	0092      	lsls	r2, r2, #2
 8000b5e:	fbb0 faf2 	udiv	sl, r0, r2
 8000b62:	f7ff ff9d 	bl	8000aa0 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000b66:	4360      	muls	r0, r4
 8000b68:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000b6c:	009b      	lsls	r3, r3, #2
 8000b6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000b72:	fbb3 f3f8 	udiv	r3, r3, r8
 8000b76:	fb08 a313 	mls	r3, r8, r3, sl
 8000b7a:	011b      	lsls	r3, r3, #4
 8000b7c:	3332      	adds	r3, #50	; 0x32
 8000b7e:	fbb3 f3f8 	udiv	r3, r3, r8
 8000b82:	f003 030f 	and.w	r3, r3, #15
 8000b86:	433b      	orrs	r3, r7
 8000b88:	4433      	add	r3, r6
 8000b8a:	60ab      	str	r3, [r5, #8]
 8000b8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b90:	f7ff ff76 	bl	8000a80 <HAL_RCC_GetPCLK1Freq>
 8000b94:	fb04 f300 	mul.w	r3, r4, r0
 8000b98:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8000b9c:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000ba0:	00b6      	lsls	r6, r6, #2
 8000ba2:	fbb3 f3f6 	udiv	r3, r3, r6
 8000ba6:	fbb3 f3f8 	udiv	r3, r3, r8
 8000baa:	011e      	lsls	r6, r3, #4
 8000bac:	f7ff ff68 	bl	8000a80 <HAL_RCC_GetPCLK1Freq>
 8000bb0:	4360      	muls	r0, r4
 8000bb2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000bb6:	009b      	lsls	r3, r3, #2
 8000bb8:	fbb0 f7f3 	udiv	r7, r0, r3
 8000bbc:	f7ff ff60 	bl	8000a80 <HAL_RCC_GetPCLK1Freq>
 8000bc0:	4360      	muls	r0, r4
 8000bc2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000bc6:	009b      	lsls	r3, r3, #2
 8000bc8:	fbb0 f3f3 	udiv	r3, r0, r3
 8000bcc:	fbb3 f3f8 	udiv	r3, r3, r8
 8000bd0:	fb08 7313 	mls	r3, r8, r3, r7
 8000bd4:	011b      	lsls	r3, r3, #4
 8000bd6:	3332      	adds	r3, #50	; 0x32
 8000bd8:	fbb3 f3f8 	udiv	r3, r3, r8
 8000bdc:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8000be0:	f7ff ff4e 	bl	8000a80 <HAL_RCC_GetPCLK1Freq>
 8000be4:	4360      	muls	r0, r4
 8000be6:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8000bea:	0092      	lsls	r2, r2, #2
 8000bec:	fbb0 faf2 	udiv	sl, r0, r2
 8000bf0:	f7ff ff46 	bl	8000a80 <HAL_RCC_GetPCLK1Freq>
 8000bf4:	e7b7      	b.n	8000b66 <UART_SetConfig+0xa6>
 8000bf6:	bf00      	nop
 8000bf8:	40013800 	.word	0x40013800

08000bfc <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8000bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bfe:	4604      	mov	r4, r0
 8000c00:	460e      	mov	r6, r1
 8000c02:	4617      	mov	r7, r2
 8000c04:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8000c06:	6821      	ldr	r1, [r4, #0]
 8000c08:	680b      	ldr	r3, [r1, #0]
 8000c0a:	ea36 0303 	bics.w	r3, r6, r3
 8000c0e:	d101      	bne.n	8000c14 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8000c10:	2000      	movs	r0, #0
}
 8000c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000c14:	1c6b      	adds	r3, r5, #1
 8000c16:	d0f7      	beq.n	8000c08 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000c18:	b995      	cbnz	r5, 8000c40 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000c1a:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8000c1c:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000c1e:	68da      	ldr	r2, [r3, #12]
 8000c20:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8000c24:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000c26:	695a      	ldr	r2, [r3, #20]
 8000c28:	f022 0201 	bic.w	r2, r2, #1
 8000c2c:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8000c2e:	2320      	movs	r3, #32
 8000c30:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8000c34:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8000c38:	2300      	movs	r3, #0
 8000c3a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8000c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000c40:	f7ff fac6 	bl	80001d0 <HAL_GetTick>
 8000c44:	1bc0      	subs	r0, r0, r7
 8000c46:	4285      	cmp	r5, r0
 8000c48:	d2dd      	bcs.n	8000c06 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8000c4a:	e7e6      	b.n	8000c1a <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08000c4c <HAL_UART_Init>:
{
 8000c4c:	b510      	push	{r4, lr}
  if(huart == NULL)
 8000c4e:	4604      	mov	r4, r0
 8000c50:	b340      	cbz	r0, 8000ca4 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8000c52:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000c56:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000c5a:	b91b      	cbnz	r3, 8000c64 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8000c5c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8000c60:	f000 fa20 	bl	80010a4 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8000c64:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8000c66:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8000c68:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8000c6c:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8000c6e:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8000c70:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000c74:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8000c76:	f7ff ff23 	bl	8000ac0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000c7a:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000c7c:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000c7e:	691a      	ldr	r2, [r3, #16]
 8000c80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000c84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000c86:	695a      	ldr	r2, [r3, #20]
 8000c88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000c8c:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8000c8e:	68da      	ldr	r2, [r3, #12]
 8000c90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000c94:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 8000c96:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000c98:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8000c9a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8000c9e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8000ca2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000ca4:	2001      	movs	r0, #1
}
 8000ca6:	bd10      	pop	{r4, pc}

08000ca8 <HAL_UART_Transmit>:
{
 8000ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000cac:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8000cae:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8000cb2:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 8000cb4:	2b20      	cmp	r3, #32
{
 8000cb6:	460d      	mov	r5, r1
 8000cb8:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8000cba:	d14e      	bne.n	8000d5a <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0U))
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	d049      	beq.n	8000d54 <HAL_UART_Transmit+0xac>
 8000cc0:	2a00      	cmp	r2, #0
 8000cc2:	d047      	beq.n	8000d54 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8000cc4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	d046      	beq.n	8000d5a <HAL_UART_Transmit+0xb2>
 8000ccc:	2301      	movs	r3, #1
 8000cce:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000cd6:	2321      	movs	r3, #33	; 0x21
 8000cd8:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8000cdc:	f7ff fa78 	bl	80001d0 <HAL_GetTick>
 8000ce0:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 8000ce2:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8000ce6:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8000cea:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8000cec:	b29b      	uxth	r3, r3
 8000cee:	b96b      	cbnz	r3, 8000d0c <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8000cf0:	463b      	mov	r3, r7
 8000cf2:	4632      	mov	r2, r6
 8000cf4:	2140      	movs	r1, #64	; 0x40
 8000cf6:	4620      	mov	r0, r4
 8000cf8:	f7ff ff80 	bl	8000bfc <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000cfc:	b9a8      	cbnz	r0, 8000d2a <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8000cfe:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8000d00:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8000d04:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8000d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8000d0c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000d0e:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8000d10:	3b01      	subs	r3, #1
 8000d12:	b29b      	uxth	r3, r3
 8000d14:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000d16:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000d18:	2180      	movs	r1, #128	; 0x80
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000d1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000d1e:	4620      	mov	r0, r4
 8000d20:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000d22:	d10e      	bne.n	8000d42 <HAL_UART_Transmit+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000d24:	f7ff ff6a 	bl	8000bfc <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000d28:	b110      	cbz	r0, 8000d30 <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 8000d2a:	2003      	movs	r0, #3
 8000d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8000d30:	882b      	ldrh	r3, [r5, #0]
 8000d32:	6822      	ldr	r2, [r4, #0]
 8000d34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000d38:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8000d3a:	6923      	ldr	r3, [r4, #16]
 8000d3c:	b943      	cbnz	r3, 8000d50 <HAL_UART_Transmit+0xa8>
          pData +=2U;
 8000d3e:	3502      	adds	r5, #2
 8000d40:	e7d3      	b.n	8000cea <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000d42:	f7ff ff5b 	bl	8000bfc <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000d46:	2800      	cmp	r0, #0
 8000d48:	d1ef      	bne.n	8000d2a <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8000d4a:	6823      	ldr	r3, [r4, #0]
 8000d4c:	782a      	ldrb	r2, [r5, #0]
 8000d4e:	605a      	str	r2, [r3, #4]
 8000d50:	3501      	adds	r5, #1
 8000d52:	e7ca      	b.n	8000cea <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8000d54:	2001      	movs	r0, #1
 8000d56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8000d5a:	2002      	movs	r0, #2
}
 8000d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000d60 <MX_GPIO_Init>:
        * EXTI
*/
void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d60:	2210      	movs	r2, #16
{
 8000d62:	b530      	push	{r4, r5, lr}
 8000d64:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d66:	eb0d 0002 	add.w	r0, sp, r2
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	f000 fa26 	bl	80011bc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d70:	4b25      	ldr	r3, [pc, #148]	; (8000e08 <MX_GPIO_Init+0xa8>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 8000d72:	4d26      	ldr	r5, [pc, #152]	; (8000e0c <MX_GPIO_Init+0xac>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d74:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 8000d76:	4628      	mov	r0, r5
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d78:	f042 0208 	orr.w	r2, r2, #8
 8000d7c:	619a      	str	r2, [r3, #24]
 8000d7e:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 8000d80:	f44f 7170 	mov.w	r1, #960	; 0x3c0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d84:	f002 0208 	and.w	r2, r2, #8
 8000d88:	9200      	str	r2, [sp, #0]
 8000d8a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8c:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d8e:	2400      	movs	r4, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d90:	f042 0204 	orr.w	r2, r2, #4
 8000d94:	619a      	str	r2, [r3, #24]
 8000d96:	699a      	ldr	r2, [r3, #24]
 8000d98:	f002 0204 	and.w	r2, r2, #4
 8000d9c:	9201      	str	r2, [sp, #4]
 8000d9e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000da0:	699a      	ldr	r2, [r3, #24]
 8000da2:	f042 0210 	orr.w	r2, r2, #16
 8000da6:	619a      	str	r2, [r3, #24]
 8000da8:	699a      	ldr	r2, [r3, #24]
 8000daa:	f002 0210 	and.w	r2, r2, #16
 8000dae:	9202      	str	r2, [sp, #8]
 8000db0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000db2:	699a      	ldr	r2, [r3, #24]
 8000db4:	f042 0220 	orr.w	r2, r2, #32
 8000db8:	619a      	str	r2, [r3, #24]
 8000dba:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 8000dbc:	2200      	movs	r2, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dbe:	f003 0320 	and.w	r3, r3, #32
 8000dc2:	9303      	str	r3, [sp, #12]
 8000dc4:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 8000dc6:	f7ff fb57 	bl	8000478 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = KEY1_Pin;
 8000dca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 8000dce:	a904      	add	r1, sp, #16
 8000dd0:	480f      	ldr	r0, [pc, #60]	; (8000e10 <MX_GPIO_Init+0xb0>)
  GPIO_InitStruct.Pin = KEY1_Pin;
 8000dd2:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dd4:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 8000dd8:	f7ff fa6e 	bl	80002b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY2_Pin;
 8000ddc:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(KEY2_GPIO_Port, &GPIO_InitStruct);
 8000dde:	a904      	add	r1, sp, #16
 8000de0:	480c      	ldr	r0, [pc, #48]	; (8000e14 <MX_GPIO_Init+0xb4>)
  GPIO_InitStruct.Pin = KEY2_Pin;
 8000de2:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000de4:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(KEY2_GPIO_Port, &GPIO_InitStruct);
 8000de8:	f7ff fa66 	bl	80002b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin;
 8000dec:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000df0:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df2:	2301      	movs	r3, #1
 8000df4:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df6:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df8:	a904      	add	r1, sp, #16
 8000dfa:	4628      	mov	r0, r5
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfe:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e00:	f7ff fa5a 	bl	80002b8 <HAL_GPIO_Init>

}
 8000e04:	b009      	add	sp, #36	; 0x24
 8000e06:	bd30      	pop	{r4, r5, pc}
 8000e08:	40021000 	.word	0x40021000
 8000e0c:	40010c00 	.word	0x40010c00
 8000e10:	40011000 	.word	0x40011000
 8000e14:	40011400 	.word	0x40011400

08000e18 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000e18:	b508      	push	{r3, lr}

  hi2c2.Instance = I2C2;
 8000e1a:	480c      	ldr	r0, [pc, #48]	; (8000e4c <MX_I2C2_Init+0x34>)
  hi2c2.Init.ClockSpeed = 100000;
 8000e1c:	4b0c      	ldr	r3, [pc, #48]	; (8000e50 <MX_I2C2_Init+0x38>)
 8000e1e:	f8df e034 	ldr.w	lr, [pc, #52]	; 8000e54 <MX_I2C2_Init+0x3c>
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e22:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c2.Init.ClockSpeed = 100000;
 8000e26:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e2a:	2300      	movs	r3, #0
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e2c:	6102      	str	r2, [r0, #16]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e2e:	6083      	str	r3, [r0, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000e30:	60c3      	str	r3, [r0, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e32:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000e34:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e36:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e38:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000e3a:	f7ff fb27 	bl	800048c <HAL_I2C_Init>
 8000e3e:	b118      	cbz	r0, 8000e48 <MX_I2C2_Init+0x30>
  {
    Error_Handler();
  }

}
 8000e40:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8000e44:	f000 b88a 	b.w	8000f5c <Error_Handler>
 8000e48:	bd08      	pop	{r3, pc}
 8000e4a:	bf00      	nop
 8000e4c:	2000009c 	.word	0x2000009c
 8000e50:	40005800 	.word	0x40005800
 8000e54:	000186a0 	.word	0x000186a0

08000e58 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e58:	b510      	push	{r4, lr}
 8000e5a:	4604      	mov	r4, r0
 8000e5c:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5e:	2210      	movs	r2, #16
 8000e60:	2100      	movs	r1, #0
 8000e62:	a802      	add	r0, sp, #8
 8000e64:	f000 f9aa 	bl	80011bc <memset>
  if(i2cHandle->Instance==I2C2)
 8000e68:	6822      	ldr	r2, [r4, #0]
 8000e6a:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <HAL_I2C_MspInit+0x58>)
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	d11d      	bne.n	8000eac <HAL_I2C_MspInit+0x54>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e70:	4c10      	ldr	r4, [pc, #64]	; (8000eb4 <HAL_I2C_MspInit+0x5c>)
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e72:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e74:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e76:	4810      	ldr	r0, [pc, #64]	; (8000eb8 <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e78:	f043 0308 	orr.w	r3, r3, #8
 8000e7c:	61a3      	str	r3, [r4, #24]
 8000e7e:	69a3      	ldr	r3, [r4, #24]
 8000e80:	f003 0308 	and.w	r3, r3, #8
 8000e84:	9300      	str	r3, [sp, #0]
 8000e86:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000e88:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e8c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e8e:	2312      	movs	r3, #18
 8000e90:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e92:	2303      	movs	r3, #3
 8000e94:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e96:	f7ff fa0f 	bl	80002b8 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e9a:	69e3      	ldr	r3, [r4, #28]
 8000e9c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ea0:	61e3      	str	r3, [r4, #28]
 8000ea2:	69e3      	ldr	r3, [r4, #28]
 8000ea4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ea8:	9301      	str	r3, [sp, #4]
 8000eaa:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000eac:	b006      	add	sp, #24
 8000eae:	bd10      	pop	{r4, pc}
 8000eb0:	40005800 	.word	0x40005800
 8000eb4:	40021000 	.word	0x40021000
 8000eb8:	40010c00 	.word	0x40010c00

08000ebc <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000ebc:	b510      	push	{r4, lr}
 8000ebe:	4614      	mov	r4, r2
    HAL_UART_Transmit(&huart1, (uint8_t*)ptr, (uint16_t)len, 0xFFFFFFFF);
 8000ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec4:	b292      	uxth	r2, r2
 8000ec6:	4802      	ldr	r0, [pc, #8]	; (8000ed0 <_write+0x14>)
 8000ec8:	f7ff feee 	bl	8000ca8 <HAL_UART_Transmit>
	return len;
}
 8000ecc:	4620      	mov	r0, r4
 8000ece:	bd10      	pop	{r4, pc}
 8000ed0:	200000f0 	.word	0x200000f0

08000ed4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ed4:	b500      	push	{lr}
 8000ed6:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ed8:	2228      	movs	r2, #40	; 0x28
 8000eda:	2100      	movs	r1, #0
 8000edc:	a806      	add	r0, sp, #24
 8000ede:	f000 f96d 	bl	80011bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ee2:	2214      	movs	r2, #20
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	a801      	add	r0, sp, #4
 8000ee8:	f000 f968 	bl	80011bc <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000eec:	2302      	movs	r3, #2
 8000eee:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ef4:	2310      	movs	r3, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ef6:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ef8:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000efa:	f7ff fb47 	bl	800058c <HAL_RCC_OscConfig>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000efe:	2100      	movs	r1, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f00:	230f      	movs	r3, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f02:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f04:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f06:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f08:	9103      	str	r1, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f0a:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f0c:	9105      	str	r1, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f0e:	f7ff fd05 	bl	800091c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8000f12:	b011      	add	sp, #68	; 0x44
 8000f14:	f85d fb04 	ldr.w	pc, [sp], #4

08000f18 <main>:
{
 8000f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_Init();
 8000f1a:	f7ff f93b 	bl	8000194 <HAL_Init>
  uint8_t i = 0;
 8000f1e:	2400      	movs	r4, #0
  SystemClock_Config();
 8000f20:	f7ff ffd8 	bl	8000ed4 <SystemClock_Config>
  MX_GPIO_Init();
 8000f24:	f7ff ff1c 	bl	8000d60 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000f28:	f7ff ff76 	bl	8000e18 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8000f2c:	f000 f89e 	bl	800106c <MX_USART1_UART_Init>
      HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000f30:	4f08      	ldr	r7, [pc, #32]	; (8000f54 <main+0x3c>)
      printf("UART1 Test %3d\r\n", i++);
 8000f32:	4e09      	ldr	r6, [pc, #36]	; (8000f58 <main+0x40>)
      HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000f34:	2140      	movs	r1, #64	; 0x40
 8000f36:	4638      	mov	r0, r7
 8000f38:	f7ff faa3 	bl	8000482 <HAL_GPIO_TogglePin>
      printf("UART1 Test %3d\r\n", i++);
 8000f3c:	1c65      	adds	r5, r4, #1
      HAL_Delay(1000);
 8000f3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f42:	f7ff f94b 	bl	80001dc <HAL_Delay>
      printf("UART1 Test %3d\r\n", i++);
 8000f46:	b2ed      	uxtb	r5, r5
 8000f48:	4621      	mov	r1, r4
 8000f4a:	4630      	mov	r0, r6
 8000f4c:	f000 f93e 	bl	80011cc <iprintf>
 8000f50:	462c      	mov	r4, r5
 8000f52:	e7ef      	b.n	8000f34 <main+0x1c>
 8000f54:	40010c00 	.word	0x40010c00
 8000f58:	08001ffc 	.word	0x08001ffc

08000f5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f5c:	4770      	bx	lr
	...

08000f60 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f60:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <HAL_MspInit+0x3c>)
{
 8000f62:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f64:	699a      	ldr	r2, [r3, #24]
 8000f66:	f042 0201 	orr.w	r2, r2, #1
 8000f6a:	619a      	str	r2, [r3, #24]
 8000f6c:	699a      	ldr	r2, [r3, #24]
 8000f6e:	f002 0201 	and.w	r2, r2, #1
 8000f72:	9200      	str	r2, [sp, #0]
 8000f74:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f76:	69da      	ldr	r2, [r3, #28]
 8000f78:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000f7c:	61da      	str	r2, [r3, #28]
 8000f7e:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f80:	4a07      	ldr	r2, [pc, #28]	; (8000fa0 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f86:	9301      	str	r3, [sp, #4]
 8000f88:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f8a:	6853      	ldr	r3, [r2, #4]
 8000f8c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f90:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f94:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f96:	b002      	add	sp, #8
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	40010000 	.word	0x40010000

08000fa4 <NMI_Handler>:
 8000fa4:	4770      	bx	lr

08000fa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fa6:	e7fe      	b.n	8000fa6 <HardFault_Handler>

08000fa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fa8:	e7fe      	b.n	8000fa8 <MemManage_Handler>

08000faa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000faa:	e7fe      	b.n	8000faa <BusFault_Handler>

08000fac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fac:	e7fe      	b.n	8000fac <UsageFault_Handler>

08000fae <SVC_Handler>:
 8000fae:	4770      	bx	lr

08000fb0 <DebugMon_Handler>:
 8000fb0:	4770      	bx	lr

08000fb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fb2:	4770      	bx	lr

08000fb4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fb4:	f7ff b900 	b.w	80001b8 <HAL_IncTick>

08000fb8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fb8:	b570      	push	{r4, r5, r6, lr}
 8000fba:	460e      	mov	r6, r1
 8000fbc:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fbe:	460c      	mov	r4, r1
 8000fc0:	1ba3      	subs	r3, r4, r6
 8000fc2:	429d      	cmp	r5, r3
 8000fc4:	dc01      	bgt.n	8000fca <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8000fc6:	4628      	mov	r0, r5
 8000fc8:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8000fca:	f3af 8000 	nop.w
 8000fce:	f804 0b01 	strb.w	r0, [r4], #1
 8000fd2:	e7f5      	b.n	8000fc0 <_read+0x8>

08000fd4 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8000fd4:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000fd6:	4b0a      	ldr	r3, [pc, #40]	; (8001000 <_sbrk+0x2c>)
{
 8000fd8:	4602      	mov	r2, r0
	if (heap_end == 0)
 8000fda:	6819      	ldr	r1, [r3, #0]
 8000fdc:	b909      	cbnz	r1, 8000fe2 <_sbrk+0xe>
		heap_end = &end;
 8000fde:	4909      	ldr	r1, [pc, #36]	; (8001004 <_sbrk+0x30>)
 8000fe0:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8000fe2:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8000fe4:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8000fe6:	4402      	add	r2, r0
 8000fe8:	428a      	cmp	r2, r1
 8000fea:	d906      	bls.n	8000ffa <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8000fec:	f000 f8bc 	bl	8001168 <__errno>
 8000ff0:	230c      	movs	r3, #12
 8000ff2:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8000ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff8:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8000ffa:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8000ffc:	bd08      	pop	{r3, pc}
 8000ffe:	bf00      	nop
 8001000:	2000008c 	.word	0x2000008c
 8001004:	20000134 	.word	0x20000134

08001008 <_close>:

int _close(int file)
{
	return -1;
}
 8001008:	f04f 30ff 	mov.w	r0, #4294967295
 800100c:	4770      	bx	lr

0800100e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800100e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8001012:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8001014:	604b      	str	r3, [r1, #4]
}
 8001016:	4770      	bx	lr

08001018 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001018:	2001      	movs	r0, #1
 800101a:	4770      	bx	lr

0800101c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800101c:	2000      	movs	r0, #0
 800101e:	4770      	bx	lr

08001020 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001020:	4b0f      	ldr	r3, [pc, #60]	; (8001060 <SystemInit+0x40>)
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	f042 0201 	orr.w	r2, r2, #1
 8001028:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800102a:	6859      	ldr	r1, [r3, #4]
 800102c:	4a0d      	ldr	r2, [pc, #52]	; (8001064 <SystemInit+0x44>)
 800102e:	400a      	ands	r2, r1
 8001030:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001038:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800103c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001044:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001046:	685a      	ldr	r2, [r3, #4]
 8001048:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800104c:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800104e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001052:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001054:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001058:	4b03      	ldr	r3, [pc, #12]	; (8001068 <SystemInit+0x48>)
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	40021000 	.word	0x40021000
 8001064:	f8ff0000 	.word	0xf8ff0000
 8001068:	e000ed00 	.word	0xe000ed00

0800106c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800106c:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
 800106e:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
  huart1.Instance = USART1;
 8001072:	480a      	ldr	r0, [pc, #40]	; (800109c <MX_USART1_UART_Init+0x30>)
  huart1.Init.BaudRate = 115200;
 8001074:	4b0a      	ldr	r3, [pc, #40]	; (80010a0 <MX_USART1_UART_Init+0x34>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001076:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 115200;
 8001078:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800107c:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 800107e:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001080:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001082:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001084:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001086:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001088:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800108a:	f7ff fddf 	bl	8000c4c <HAL_UART_Init>
 800108e:	b118      	cbz	r0, 8001098 <MX_USART1_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 8001090:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001094:	f7ff bf62 	b.w	8000f5c <Error_Handler>
 8001098:	bd08      	pop	{r3, pc}
 800109a:	bf00      	nop
 800109c:	200000f0 	.word	0x200000f0
 80010a0:	40013800 	.word	0x40013800

080010a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010a4:	b510      	push	{r4, lr}
 80010a6:	4604      	mov	r4, r0
 80010a8:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010aa:	2210      	movs	r2, #16
 80010ac:	2100      	movs	r1, #0
 80010ae:	a802      	add	r0, sp, #8
 80010b0:	f000 f884 	bl	80011bc <memset>
  if(uartHandle->Instance==USART1)
 80010b4:	6822      	ldr	r2, [r4, #0]
 80010b6:	4b17      	ldr	r3, [pc, #92]	; (8001114 <HAL_UART_MspInit+0x70>)
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d128      	bne.n	800110e <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010bc:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80010c0:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c2:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 80010c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80010c8:	619a      	str	r2, [r3, #24]
 80010ca:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010cc:	4812      	ldr	r0, [pc, #72]	; (8001118 <HAL_UART_MspInit+0x74>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80010ce:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80010d2:	9200      	str	r2, [sp, #0]
 80010d4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d6:	699a      	ldr	r2, [r3, #24]
 80010d8:	f042 0204 	orr.w	r2, r2, #4
 80010dc:	619a      	str	r2, [r3, #24]
 80010de:	699b      	ldr	r3, [r3, #24]
 80010e0:	f003 0304 	and.w	r3, r3, #4
 80010e4:	9301      	str	r3, [sp, #4]
 80010e6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80010e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010ec:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ee:	2302      	movs	r3, #2
 80010f0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010f2:	2303      	movs	r3, #3
 80010f4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f6:	f7ff f8df 	bl	80002b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80010fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010fe:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001100:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001102:	a902      	add	r1, sp, #8
 8001104:	4804      	ldr	r0, [pc, #16]	; (8001118 <HAL_UART_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001106:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800110a:	f7ff f8d5 	bl	80002b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800110e:	b006      	add	sp, #24
 8001110:	bd10      	pop	{r4, pc}
 8001112:	bf00      	nop
 8001114:	40013800 	.word	0x40013800
 8001118:	40010800 	.word	0x40010800

0800111c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800111c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800111e:	e003      	b.n	8001128 <LoopCopyDataInit>

08001120 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001120:	4b0b      	ldr	r3, [pc, #44]	; (8001150 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001122:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001124:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001126:	3104      	adds	r1, #4

08001128 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001128:	480a      	ldr	r0, [pc, #40]	; (8001154 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800112a:	4b0b      	ldr	r3, [pc, #44]	; (8001158 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800112c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800112e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001130:	d3f6      	bcc.n	8001120 <CopyDataInit>
  ldr r2, =_sbss
 8001132:	4a0a      	ldr	r2, [pc, #40]	; (800115c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001134:	e002      	b.n	800113c <LoopFillZerobss>

08001136 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001136:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001138:	f842 3b04 	str.w	r3, [r2], #4

0800113c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800113c:	4b08      	ldr	r3, [pc, #32]	; (8001160 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800113e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001140:	d3f9      	bcc.n	8001136 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001142:	f7ff ff6d 	bl	8001020 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001146:	f000 f815 	bl	8001174 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800114a:	f7ff fee5 	bl	8000f18 <main>
  bx lr
 800114e:	4770      	bx	lr
  ldr r3, =_sidata
 8001150:	080020c8 	.word	0x080020c8
  ldr r0, =_sdata
 8001154:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001158:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 800115c:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8001160:	20000134 	.word	0x20000134

08001164 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001164:	e7fe      	b.n	8001164 <ADC1_2_IRQHandler>
	...

08001168 <__errno>:
 8001168:	4b01      	ldr	r3, [pc, #4]	; (8001170 <__errno+0x8>)
 800116a:	6818      	ldr	r0, [r3, #0]
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	2000000c 	.word	0x2000000c

08001174 <__libc_init_array>:
 8001174:	b570      	push	{r4, r5, r6, lr}
 8001176:	2500      	movs	r5, #0
 8001178:	4e0c      	ldr	r6, [pc, #48]	; (80011ac <__libc_init_array+0x38>)
 800117a:	4c0d      	ldr	r4, [pc, #52]	; (80011b0 <__libc_init_array+0x3c>)
 800117c:	1ba4      	subs	r4, r4, r6
 800117e:	10a4      	asrs	r4, r4, #2
 8001180:	42a5      	cmp	r5, r4
 8001182:	d109      	bne.n	8001198 <__libc_init_array+0x24>
 8001184:	f000 ff26 	bl	8001fd4 <_init>
 8001188:	2500      	movs	r5, #0
 800118a:	4e0a      	ldr	r6, [pc, #40]	; (80011b4 <__libc_init_array+0x40>)
 800118c:	4c0a      	ldr	r4, [pc, #40]	; (80011b8 <__libc_init_array+0x44>)
 800118e:	1ba4      	subs	r4, r4, r6
 8001190:	10a4      	asrs	r4, r4, #2
 8001192:	42a5      	cmp	r5, r4
 8001194:	d105      	bne.n	80011a2 <__libc_init_array+0x2e>
 8001196:	bd70      	pop	{r4, r5, r6, pc}
 8001198:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800119c:	4798      	blx	r3
 800119e:	3501      	adds	r5, #1
 80011a0:	e7ee      	b.n	8001180 <__libc_init_array+0xc>
 80011a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80011a6:	4798      	blx	r3
 80011a8:	3501      	adds	r5, #1
 80011aa:	e7f2      	b.n	8001192 <__libc_init_array+0x1e>
 80011ac:	080020c0 	.word	0x080020c0
 80011b0:	080020c0 	.word	0x080020c0
 80011b4:	080020c0 	.word	0x080020c0
 80011b8:	080020c4 	.word	0x080020c4

080011bc <memset>:
 80011bc:	4603      	mov	r3, r0
 80011be:	4402      	add	r2, r0
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d100      	bne.n	80011c6 <memset+0xa>
 80011c4:	4770      	bx	lr
 80011c6:	f803 1b01 	strb.w	r1, [r3], #1
 80011ca:	e7f9      	b.n	80011c0 <memset+0x4>

080011cc <iprintf>:
 80011cc:	b40f      	push	{r0, r1, r2, r3}
 80011ce:	4b0a      	ldr	r3, [pc, #40]	; (80011f8 <iprintf+0x2c>)
 80011d0:	b513      	push	{r0, r1, r4, lr}
 80011d2:	681c      	ldr	r4, [r3, #0]
 80011d4:	b124      	cbz	r4, 80011e0 <iprintf+0x14>
 80011d6:	69a3      	ldr	r3, [r4, #24]
 80011d8:	b913      	cbnz	r3, 80011e0 <iprintf+0x14>
 80011da:	4620      	mov	r0, r4
 80011dc:	f000 f84e 	bl	800127c <__sinit>
 80011e0:	ab05      	add	r3, sp, #20
 80011e2:	9a04      	ldr	r2, [sp, #16]
 80011e4:	68a1      	ldr	r1, [r4, #8]
 80011e6:	4620      	mov	r0, r4
 80011e8:	9301      	str	r3, [sp, #4]
 80011ea:	f000 f957 	bl	800149c <_vfiprintf_r>
 80011ee:	b002      	add	sp, #8
 80011f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80011f4:	b004      	add	sp, #16
 80011f6:	4770      	bx	lr
 80011f8:	2000000c 	.word	0x2000000c

080011fc <_cleanup_r>:
 80011fc:	4901      	ldr	r1, [pc, #4]	; (8001204 <_cleanup_r+0x8>)
 80011fe:	f000 b8a9 	b.w	8001354 <_fwalk_reent>
 8001202:	bf00      	nop
 8001204:	08001d75 	.word	0x08001d75

08001208 <std.isra.0>:
 8001208:	2300      	movs	r3, #0
 800120a:	b510      	push	{r4, lr}
 800120c:	4604      	mov	r4, r0
 800120e:	6003      	str	r3, [r0, #0]
 8001210:	6043      	str	r3, [r0, #4]
 8001212:	6083      	str	r3, [r0, #8]
 8001214:	8181      	strh	r1, [r0, #12]
 8001216:	6643      	str	r3, [r0, #100]	; 0x64
 8001218:	81c2      	strh	r2, [r0, #14]
 800121a:	6103      	str	r3, [r0, #16]
 800121c:	6143      	str	r3, [r0, #20]
 800121e:	6183      	str	r3, [r0, #24]
 8001220:	4619      	mov	r1, r3
 8001222:	2208      	movs	r2, #8
 8001224:	305c      	adds	r0, #92	; 0x5c
 8001226:	f7ff ffc9 	bl	80011bc <memset>
 800122a:	4b05      	ldr	r3, [pc, #20]	; (8001240 <std.isra.0+0x38>)
 800122c:	6224      	str	r4, [r4, #32]
 800122e:	6263      	str	r3, [r4, #36]	; 0x24
 8001230:	4b04      	ldr	r3, [pc, #16]	; (8001244 <std.isra.0+0x3c>)
 8001232:	62a3      	str	r3, [r4, #40]	; 0x28
 8001234:	4b04      	ldr	r3, [pc, #16]	; (8001248 <std.isra.0+0x40>)
 8001236:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001238:	4b04      	ldr	r3, [pc, #16]	; (800124c <std.isra.0+0x44>)
 800123a:	6323      	str	r3, [r4, #48]	; 0x30
 800123c:	bd10      	pop	{r4, pc}
 800123e:	bf00      	nop
 8001240:	08001a19 	.word	0x08001a19
 8001244:	08001a3b 	.word	0x08001a3b
 8001248:	08001a73 	.word	0x08001a73
 800124c:	08001a97 	.word	0x08001a97

08001250 <__sfmoreglue>:
 8001250:	b570      	push	{r4, r5, r6, lr}
 8001252:	2568      	movs	r5, #104	; 0x68
 8001254:	1e4a      	subs	r2, r1, #1
 8001256:	4355      	muls	r5, r2
 8001258:	460e      	mov	r6, r1
 800125a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800125e:	f000 f897 	bl	8001390 <_malloc_r>
 8001262:	4604      	mov	r4, r0
 8001264:	b140      	cbz	r0, 8001278 <__sfmoreglue+0x28>
 8001266:	2100      	movs	r1, #0
 8001268:	e880 0042 	stmia.w	r0, {r1, r6}
 800126c:	300c      	adds	r0, #12
 800126e:	60a0      	str	r0, [r4, #8]
 8001270:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001274:	f7ff ffa2 	bl	80011bc <memset>
 8001278:	4620      	mov	r0, r4
 800127a:	bd70      	pop	{r4, r5, r6, pc}

0800127c <__sinit>:
 800127c:	6983      	ldr	r3, [r0, #24]
 800127e:	b510      	push	{r4, lr}
 8001280:	4604      	mov	r4, r0
 8001282:	bb33      	cbnz	r3, 80012d2 <__sinit+0x56>
 8001284:	6483      	str	r3, [r0, #72]	; 0x48
 8001286:	64c3      	str	r3, [r0, #76]	; 0x4c
 8001288:	6503      	str	r3, [r0, #80]	; 0x50
 800128a:	4b12      	ldr	r3, [pc, #72]	; (80012d4 <__sinit+0x58>)
 800128c:	4a12      	ldr	r2, [pc, #72]	; (80012d8 <__sinit+0x5c>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	6282      	str	r2, [r0, #40]	; 0x28
 8001292:	4298      	cmp	r0, r3
 8001294:	bf04      	itt	eq
 8001296:	2301      	moveq	r3, #1
 8001298:	6183      	streq	r3, [r0, #24]
 800129a:	f000 f81f 	bl	80012dc <__sfp>
 800129e:	6060      	str	r0, [r4, #4]
 80012a0:	4620      	mov	r0, r4
 80012a2:	f000 f81b 	bl	80012dc <__sfp>
 80012a6:	60a0      	str	r0, [r4, #8]
 80012a8:	4620      	mov	r0, r4
 80012aa:	f000 f817 	bl	80012dc <__sfp>
 80012ae:	2200      	movs	r2, #0
 80012b0:	60e0      	str	r0, [r4, #12]
 80012b2:	2104      	movs	r1, #4
 80012b4:	6860      	ldr	r0, [r4, #4]
 80012b6:	f7ff ffa7 	bl	8001208 <std.isra.0>
 80012ba:	2201      	movs	r2, #1
 80012bc:	2109      	movs	r1, #9
 80012be:	68a0      	ldr	r0, [r4, #8]
 80012c0:	f7ff ffa2 	bl	8001208 <std.isra.0>
 80012c4:	2202      	movs	r2, #2
 80012c6:	2112      	movs	r1, #18
 80012c8:	68e0      	ldr	r0, [r4, #12]
 80012ca:	f7ff ff9d 	bl	8001208 <std.isra.0>
 80012ce:	2301      	movs	r3, #1
 80012d0:	61a3      	str	r3, [r4, #24]
 80012d2:	bd10      	pop	{r4, pc}
 80012d4:	08002028 	.word	0x08002028
 80012d8:	080011fd 	.word	0x080011fd

080012dc <__sfp>:
 80012dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012de:	4b1c      	ldr	r3, [pc, #112]	; (8001350 <__sfp+0x74>)
 80012e0:	4607      	mov	r7, r0
 80012e2:	681e      	ldr	r6, [r3, #0]
 80012e4:	69b3      	ldr	r3, [r6, #24]
 80012e6:	b913      	cbnz	r3, 80012ee <__sfp+0x12>
 80012e8:	4630      	mov	r0, r6
 80012ea:	f7ff ffc7 	bl	800127c <__sinit>
 80012ee:	3648      	adds	r6, #72	; 0x48
 80012f0:	68b4      	ldr	r4, [r6, #8]
 80012f2:	6873      	ldr	r3, [r6, #4]
 80012f4:	3b01      	subs	r3, #1
 80012f6:	d503      	bpl.n	8001300 <__sfp+0x24>
 80012f8:	6833      	ldr	r3, [r6, #0]
 80012fa:	b133      	cbz	r3, 800130a <__sfp+0x2e>
 80012fc:	6836      	ldr	r6, [r6, #0]
 80012fe:	e7f7      	b.n	80012f0 <__sfp+0x14>
 8001300:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001304:	b16d      	cbz	r5, 8001322 <__sfp+0x46>
 8001306:	3468      	adds	r4, #104	; 0x68
 8001308:	e7f4      	b.n	80012f4 <__sfp+0x18>
 800130a:	2104      	movs	r1, #4
 800130c:	4638      	mov	r0, r7
 800130e:	f7ff ff9f 	bl	8001250 <__sfmoreglue>
 8001312:	6030      	str	r0, [r6, #0]
 8001314:	2800      	cmp	r0, #0
 8001316:	d1f1      	bne.n	80012fc <__sfp+0x20>
 8001318:	230c      	movs	r3, #12
 800131a:	4604      	mov	r4, r0
 800131c:	603b      	str	r3, [r7, #0]
 800131e:	4620      	mov	r0, r4
 8001320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001322:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001326:	81e3      	strh	r3, [r4, #14]
 8001328:	2301      	movs	r3, #1
 800132a:	6665      	str	r5, [r4, #100]	; 0x64
 800132c:	81a3      	strh	r3, [r4, #12]
 800132e:	6025      	str	r5, [r4, #0]
 8001330:	60a5      	str	r5, [r4, #8]
 8001332:	6065      	str	r5, [r4, #4]
 8001334:	6125      	str	r5, [r4, #16]
 8001336:	6165      	str	r5, [r4, #20]
 8001338:	61a5      	str	r5, [r4, #24]
 800133a:	2208      	movs	r2, #8
 800133c:	4629      	mov	r1, r5
 800133e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001342:	f7ff ff3b 	bl	80011bc <memset>
 8001346:	6365      	str	r5, [r4, #52]	; 0x34
 8001348:	63a5      	str	r5, [r4, #56]	; 0x38
 800134a:	64a5      	str	r5, [r4, #72]	; 0x48
 800134c:	64e5      	str	r5, [r4, #76]	; 0x4c
 800134e:	e7e6      	b.n	800131e <__sfp+0x42>
 8001350:	08002028 	.word	0x08002028

08001354 <_fwalk_reent>:
 8001354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001358:	4680      	mov	r8, r0
 800135a:	4689      	mov	r9, r1
 800135c:	2600      	movs	r6, #0
 800135e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001362:	b914      	cbnz	r4, 800136a <_fwalk_reent+0x16>
 8001364:	4630      	mov	r0, r6
 8001366:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800136a:	68a5      	ldr	r5, [r4, #8]
 800136c:	6867      	ldr	r7, [r4, #4]
 800136e:	3f01      	subs	r7, #1
 8001370:	d501      	bpl.n	8001376 <_fwalk_reent+0x22>
 8001372:	6824      	ldr	r4, [r4, #0]
 8001374:	e7f5      	b.n	8001362 <_fwalk_reent+0xe>
 8001376:	89ab      	ldrh	r3, [r5, #12]
 8001378:	2b01      	cmp	r3, #1
 800137a:	d907      	bls.n	800138c <_fwalk_reent+0x38>
 800137c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001380:	3301      	adds	r3, #1
 8001382:	d003      	beq.n	800138c <_fwalk_reent+0x38>
 8001384:	4629      	mov	r1, r5
 8001386:	4640      	mov	r0, r8
 8001388:	47c8      	blx	r9
 800138a:	4306      	orrs	r6, r0
 800138c:	3568      	adds	r5, #104	; 0x68
 800138e:	e7ee      	b.n	800136e <_fwalk_reent+0x1a>

08001390 <_malloc_r>:
 8001390:	b570      	push	{r4, r5, r6, lr}
 8001392:	1ccd      	adds	r5, r1, #3
 8001394:	f025 0503 	bic.w	r5, r5, #3
 8001398:	3508      	adds	r5, #8
 800139a:	2d0c      	cmp	r5, #12
 800139c:	bf38      	it	cc
 800139e:	250c      	movcc	r5, #12
 80013a0:	2d00      	cmp	r5, #0
 80013a2:	4606      	mov	r6, r0
 80013a4:	db01      	blt.n	80013aa <_malloc_r+0x1a>
 80013a6:	42a9      	cmp	r1, r5
 80013a8:	d903      	bls.n	80013b2 <_malloc_r+0x22>
 80013aa:	230c      	movs	r3, #12
 80013ac:	6033      	str	r3, [r6, #0]
 80013ae:	2000      	movs	r0, #0
 80013b0:	bd70      	pop	{r4, r5, r6, pc}
 80013b2:	f000 fd8d 	bl	8001ed0 <__malloc_lock>
 80013b6:	4a23      	ldr	r2, [pc, #140]	; (8001444 <_malloc_r+0xb4>)
 80013b8:	6814      	ldr	r4, [r2, #0]
 80013ba:	4621      	mov	r1, r4
 80013bc:	b991      	cbnz	r1, 80013e4 <_malloc_r+0x54>
 80013be:	4c22      	ldr	r4, [pc, #136]	; (8001448 <_malloc_r+0xb8>)
 80013c0:	6823      	ldr	r3, [r4, #0]
 80013c2:	b91b      	cbnz	r3, 80013cc <_malloc_r+0x3c>
 80013c4:	4630      	mov	r0, r6
 80013c6:	f000 fb17 	bl	80019f8 <_sbrk_r>
 80013ca:	6020      	str	r0, [r4, #0]
 80013cc:	4629      	mov	r1, r5
 80013ce:	4630      	mov	r0, r6
 80013d0:	f000 fb12 	bl	80019f8 <_sbrk_r>
 80013d4:	1c43      	adds	r3, r0, #1
 80013d6:	d126      	bne.n	8001426 <_malloc_r+0x96>
 80013d8:	230c      	movs	r3, #12
 80013da:	4630      	mov	r0, r6
 80013dc:	6033      	str	r3, [r6, #0]
 80013de:	f000 fd78 	bl	8001ed2 <__malloc_unlock>
 80013e2:	e7e4      	b.n	80013ae <_malloc_r+0x1e>
 80013e4:	680b      	ldr	r3, [r1, #0]
 80013e6:	1b5b      	subs	r3, r3, r5
 80013e8:	d41a      	bmi.n	8001420 <_malloc_r+0x90>
 80013ea:	2b0b      	cmp	r3, #11
 80013ec:	d90f      	bls.n	800140e <_malloc_r+0x7e>
 80013ee:	600b      	str	r3, [r1, #0]
 80013f0:	18cc      	adds	r4, r1, r3
 80013f2:	50cd      	str	r5, [r1, r3]
 80013f4:	4630      	mov	r0, r6
 80013f6:	f000 fd6c 	bl	8001ed2 <__malloc_unlock>
 80013fa:	f104 000b 	add.w	r0, r4, #11
 80013fe:	1d23      	adds	r3, r4, #4
 8001400:	f020 0007 	bic.w	r0, r0, #7
 8001404:	1ac3      	subs	r3, r0, r3
 8001406:	d01b      	beq.n	8001440 <_malloc_r+0xb0>
 8001408:	425a      	negs	r2, r3
 800140a:	50e2      	str	r2, [r4, r3]
 800140c:	bd70      	pop	{r4, r5, r6, pc}
 800140e:	428c      	cmp	r4, r1
 8001410:	bf0b      	itete	eq
 8001412:	6863      	ldreq	r3, [r4, #4]
 8001414:	684b      	ldrne	r3, [r1, #4]
 8001416:	6013      	streq	r3, [r2, #0]
 8001418:	6063      	strne	r3, [r4, #4]
 800141a:	bf18      	it	ne
 800141c:	460c      	movne	r4, r1
 800141e:	e7e9      	b.n	80013f4 <_malloc_r+0x64>
 8001420:	460c      	mov	r4, r1
 8001422:	6849      	ldr	r1, [r1, #4]
 8001424:	e7ca      	b.n	80013bc <_malloc_r+0x2c>
 8001426:	1cc4      	adds	r4, r0, #3
 8001428:	f024 0403 	bic.w	r4, r4, #3
 800142c:	42a0      	cmp	r0, r4
 800142e:	d005      	beq.n	800143c <_malloc_r+0xac>
 8001430:	1a21      	subs	r1, r4, r0
 8001432:	4630      	mov	r0, r6
 8001434:	f000 fae0 	bl	80019f8 <_sbrk_r>
 8001438:	3001      	adds	r0, #1
 800143a:	d0cd      	beq.n	80013d8 <_malloc_r+0x48>
 800143c:	6025      	str	r5, [r4, #0]
 800143e:	e7d9      	b.n	80013f4 <_malloc_r+0x64>
 8001440:	bd70      	pop	{r4, r5, r6, pc}
 8001442:	bf00      	nop
 8001444:	20000090 	.word	0x20000090
 8001448:	20000094 	.word	0x20000094

0800144c <__sfputc_r>:
 800144c:	6893      	ldr	r3, [r2, #8]
 800144e:	b410      	push	{r4}
 8001450:	3b01      	subs	r3, #1
 8001452:	2b00      	cmp	r3, #0
 8001454:	6093      	str	r3, [r2, #8]
 8001456:	da08      	bge.n	800146a <__sfputc_r+0x1e>
 8001458:	6994      	ldr	r4, [r2, #24]
 800145a:	42a3      	cmp	r3, r4
 800145c:	db02      	blt.n	8001464 <__sfputc_r+0x18>
 800145e:	b2cb      	uxtb	r3, r1
 8001460:	2b0a      	cmp	r3, #10
 8001462:	d102      	bne.n	800146a <__sfputc_r+0x1e>
 8001464:	bc10      	pop	{r4}
 8001466:	f000 bb1b 	b.w	8001aa0 <__swbuf_r>
 800146a:	6813      	ldr	r3, [r2, #0]
 800146c:	1c58      	adds	r0, r3, #1
 800146e:	6010      	str	r0, [r2, #0]
 8001470:	7019      	strb	r1, [r3, #0]
 8001472:	b2c8      	uxtb	r0, r1
 8001474:	bc10      	pop	{r4}
 8001476:	4770      	bx	lr

08001478 <__sfputs_r>:
 8001478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800147a:	4606      	mov	r6, r0
 800147c:	460f      	mov	r7, r1
 800147e:	4614      	mov	r4, r2
 8001480:	18d5      	adds	r5, r2, r3
 8001482:	42ac      	cmp	r4, r5
 8001484:	d101      	bne.n	800148a <__sfputs_r+0x12>
 8001486:	2000      	movs	r0, #0
 8001488:	e007      	b.n	800149a <__sfputs_r+0x22>
 800148a:	463a      	mov	r2, r7
 800148c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001490:	4630      	mov	r0, r6
 8001492:	f7ff ffdb 	bl	800144c <__sfputc_r>
 8001496:	1c43      	adds	r3, r0, #1
 8001498:	d1f3      	bne.n	8001482 <__sfputs_r+0xa>
 800149a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800149c <_vfiprintf_r>:
 800149c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014a0:	b09d      	sub	sp, #116	; 0x74
 80014a2:	460c      	mov	r4, r1
 80014a4:	4617      	mov	r7, r2
 80014a6:	9303      	str	r3, [sp, #12]
 80014a8:	4606      	mov	r6, r0
 80014aa:	b118      	cbz	r0, 80014b4 <_vfiprintf_r+0x18>
 80014ac:	6983      	ldr	r3, [r0, #24]
 80014ae:	b90b      	cbnz	r3, 80014b4 <_vfiprintf_r+0x18>
 80014b0:	f7ff fee4 	bl	800127c <__sinit>
 80014b4:	4b7c      	ldr	r3, [pc, #496]	; (80016a8 <_vfiprintf_r+0x20c>)
 80014b6:	429c      	cmp	r4, r3
 80014b8:	d157      	bne.n	800156a <_vfiprintf_r+0xce>
 80014ba:	6874      	ldr	r4, [r6, #4]
 80014bc:	89a3      	ldrh	r3, [r4, #12]
 80014be:	0718      	lsls	r0, r3, #28
 80014c0:	d55d      	bpl.n	800157e <_vfiprintf_r+0xe2>
 80014c2:	6923      	ldr	r3, [r4, #16]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d05a      	beq.n	800157e <_vfiprintf_r+0xe2>
 80014c8:	2300      	movs	r3, #0
 80014ca:	9309      	str	r3, [sp, #36]	; 0x24
 80014cc:	2320      	movs	r3, #32
 80014ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80014d2:	2330      	movs	r3, #48	; 0x30
 80014d4:	f04f 0b01 	mov.w	fp, #1
 80014d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80014dc:	46b8      	mov	r8, r7
 80014de:	4645      	mov	r5, r8
 80014e0:	f815 3b01 	ldrb.w	r3, [r5], #1
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d155      	bne.n	8001594 <_vfiprintf_r+0xf8>
 80014e8:	ebb8 0a07 	subs.w	sl, r8, r7
 80014ec:	d00b      	beq.n	8001506 <_vfiprintf_r+0x6a>
 80014ee:	4653      	mov	r3, sl
 80014f0:	463a      	mov	r2, r7
 80014f2:	4621      	mov	r1, r4
 80014f4:	4630      	mov	r0, r6
 80014f6:	f7ff ffbf 	bl	8001478 <__sfputs_r>
 80014fa:	3001      	adds	r0, #1
 80014fc:	f000 80c4 	beq.w	8001688 <_vfiprintf_r+0x1ec>
 8001500:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001502:	4453      	add	r3, sl
 8001504:	9309      	str	r3, [sp, #36]	; 0x24
 8001506:	f898 3000 	ldrb.w	r3, [r8]
 800150a:	2b00      	cmp	r3, #0
 800150c:	f000 80bc 	beq.w	8001688 <_vfiprintf_r+0x1ec>
 8001510:	2300      	movs	r3, #0
 8001512:	f04f 32ff 	mov.w	r2, #4294967295
 8001516:	9304      	str	r3, [sp, #16]
 8001518:	9307      	str	r3, [sp, #28]
 800151a:	9205      	str	r2, [sp, #20]
 800151c:	9306      	str	r3, [sp, #24]
 800151e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001522:	931a      	str	r3, [sp, #104]	; 0x68
 8001524:	2205      	movs	r2, #5
 8001526:	7829      	ldrb	r1, [r5, #0]
 8001528:	4860      	ldr	r0, [pc, #384]	; (80016ac <_vfiprintf_r+0x210>)
 800152a:	f000 fcc3 	bl	8001eb4 <memchr>
 800152e:	f105 0801 	add.w	r8, r5, #1
 8001532:	9b04      	ldr	r3, [sp, #16]
 8001534:	2800      	cmp	r0, #0
 8001536:	d131      	bne.n	800159c <_vfiprintf_r+0x100>
 8001538:	06d9      	lsls	r1, r3, #27
 800153a:	bf44      	itt	mi
 800153c:	2220      	movmi	r2, #32
 800153e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001542:	071a      	lsls	r2, r3, #28
 8001544:	bf44      	itt	mi
 8001546:	222b      	movmi	r2, #43	; 0x2b
 8001548:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800154c:	782a      	ldrb	r2, [r5, #0]
 800154e:	2a2a      	cmp	r2, #42	; 0x2a
 8001550:	d02c      	beq.n	80015ac <_vfiprintf_r+0x110>
 8001552:	2100      	movs	r1, #0
 8001554:	200a      	movs	r0, #10
 8001556:	9a07      	ldr	r2, [sp, #28]
 8001558:	46a8      	mov	r8, r5
 800155a:	f898 3000 	ldrb.w	r3, [r8]
 800155e:	3501      	adds	r5, #1
 8001560:	3b30      	subs	r3, #48	; 0x30
 8001562:	2b09      	cmp	r3, #9
 8001564:	d96d      	bls.n	8001642 <_vfiprintf_r+0x1a6>
 8001566:	b371      	cbz	r1, 80015c6 <_vfiprintf_r+0x12a>
 8001568:	e026      	b.n	80015b8 <_vfiprintf_r+0x11c>
 800156a:	4b51      	ldr	r3, [pc, #324]	; (80016b0 <_vfiprintf_r+0x214>)
 800156c:	429c      	cmp	r4, r3
 800156e:	d101      	bne.n	8001574 <_vfiprintf_r+0xd8>
 8001570:	68b4      	ldr	r4, [r6, #8]
 8001572:	e7a3      	b.n	80014bc <_vfiprintf_r+0x20>
 8001574:	4b4f      	ldr	r3, [pc, #316]	; (80016b4 <_vfiprintf_r+0x218>)
 8001576:	429c      	cmp	r4, r3
 8001578:	bf08      	it	eq
 800157a:	68f4      	ldreq	r4, [r6, #12]
 800157c:	e79e      	b.n	80014bc <_vfiprintf_r+0x20>
 800157e:	4621      	mov	r1, r4
 8001580:	4630      	mov	r0, r6
 8001582:	f000 faf1 	bl	8001b68 <__swsetup_r>
 8001586:	2800      	cmp	r0, #0
 8001588:	d09e      	beq.n	80014c8 <_vfiprintf_r+0x2c>
 800158a:	f04f 30ff 	mov.w	r0, #4294967295
 800158e:	b01d      	add	sp, #116	; 0x74
 8001590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001594:	2b25      	cmp	r3, #37	; 0x25
 8001596:	d0a7      	beq.n	80014e8 <_vfiprintf_r+0x4c>
 8001598:	46a8      	mov	r8, r5
 800159a:	e7a0      	b.n	80014de <_vfiprintf_r+0x42>
 800159c:	4a43      	ldr	r2, [pc, #268]	; (80016ac <_vfiprintf_r+0x210>)
 800159e:	4645      	mov	r5, r8
 80015a0:	1a80      	subs	r0, r0, r2
 80015a2:	fa0b f000 	lsl.w	r0, fp, r0
 80015a6:	4318      	orrs	r0, r3
 80015a8:	9004      	str	r0, [sp, #16]
 80015aa:	e7bb      	b.n	8001524 <_vfiprintf_r+0x88>
 80015ac:	9a03      	ldr	r2, [sp, #12]
 80015ae:	1d11      	adds	r1, r2, #4
 80015b0:	6812      	ldr	r2, [r2, #0]
 80015b2:	9103      	str	r1, [sp, #12]
 80015b4:	2a00      	cmp	r2, #0
 80015b6:	db01      	blt.n	80015bc <_vfiprintf_r+0x120>
 80015b8:	9207      	str	r2, [sp, #28]
 80015ba:	e004      	b.n	80015c6 <_vfiprintf_r+0x12a>
 80015bc:	4252      	negs	r2, r2
 80015be:	f043 0302 	orr.w	r3, r3, #2
 80015c2:	9207      	str	r2, [sp, #28]
 80015c4:	9304      	str	r3, [sp, #16]
 80015c6:	f898 3000 	ldrb.w	r3, [r8]
 80015ca:	2b2e      	cmp	r3, #46	; 0x2e
 80015cc:	d110      	bne.n	80015f0 <_vfiprintf_r+0x154>
 80015ce:	f898 3001 	ldrb.w	r3, [r8, #1]
 80015d2:	f108 0101 	add.w	r1, r8, #1
 80015d6:	2b2a      	cmp	r3, #42	; 0x2a
 80015d8:	d137      	bne.n	800164a <_vfiprintf_r+0x1ae>
 80015da:	9b03      	ldr	r3, [sp, #12]
 80015dc:	f108 0802 	add.w	r8, r8, #2
 80015e0:	1d1a      	adds	r2, r3, #4
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	9203      	str	r2, [sp, #12]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	bfb8      	it	lt
 80015ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80015ee:	9305      	str	r3, [sp, #20]
 80015f0:	4d31      	ldr	r5, [pc, #196]	; (80016b8 <_vfiprintf_r+0x21c>)
 80015f2:	2203      	movs	r2, #3
 80015f4:	f898 1000 	ldrb.w	r1, [r8]
 80015f8:	4628      	mov	r0, r5
 80015fa:	f000 fc5b 	bl	8001eb4 <memchr>
 80015fe:	b140      	cbz	r0, 8001612 <_vfiprintf_r+0x176>
 8001600:	2340      	movs	r3, #64	; 0x40
 8001602:	1b40      	subs	r0, r0, r5
 8001604:	fa03 f000 	lsl.w	r0, r3, r0
 8001608:	9b04      	ldr	r3, [sp, #16]
 800160a:	f108 0801 	add.w	r8, r8, #1
 800160e:	4303      	orrs	r3, r0
 8001610:	9304      	str	r3, [sp, #16]
 8001612:	f898 1000 	ldrb.w	r1, [r8]
 8001616:	2206      	movs	r2, #6
 8001618:	4828      	ldr	r0, [pc, #160]	; (80016bc <_vfiprintf_r+0x220>)
 800161a:	f108 0701 	add.w	r7, r8, #1
 800161e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001622:	f000 fc47 	bl	8001eb4 <memchr>
 8001626:	2800      	cmp	r0, #0
 8001628:	d034      	beq.n	8001694 <_vfiprintf_r+0x1f8>
 800162a:	4b25      	ldr	r3, [pc, #148]	; (80016c0 <_vfiprintf_r+0x224>)
 800162c:	bb03      	cbnz	r3, 8001670 <_vfiprintf_r+0x1d4>
 800162e:	9b03      	ldr	r3, [sp, #12]
 8001630:	3307      	adds	r3, #7
 8001632:	f023 0307 	bic.w	r3, r3, #7
 8001636:	3308      	adds	r3, #8
 8001638:	9303      	str	r3, [sp, #12]
 800163a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800163c:	444b      	add	r3, r9
 800163e:	9309      	str	r3, [sp, #36]	; 0x24
 8001640:	e74c      	b.n	80014dc <_vfiprintf_r+0x40>
 8001642:	fb00 3202 	mla	r2, r0, r2, r3
 8001646:	2101      	movs	r1, #1
 8001648:	e786      	b.n	8001558 <_vfiprintf_r+0xbc>
 800164a:	2300      	movs	r3, #0
 800164c:	250a      	movs	r5, #10
 800164e:	4618      	mov	r0, r3
 8001650:	9305      	str	r3, [sp, #20]
 8001652:	4688      	mov	r8, r1
 8001654:	f898 2000 	ldrb.w	r2, [r8]
 8001658:	3101      	adds	r1, #1
 800165a:	3a30      	subs	r2, #48	; 0x30
 800165c:	2a09      	cmp	r2, #9
 800165e:	d903      	bls.n	8001668 <_vfiprintf_r+0x1cc>
 8001660:	2b00      	cmp	r3, #0
 8001662:	d0c5      	beq.n	80015f0 <_vfiprintf_r+0x154>
 8001664:	9005      	str	r0, [sp, #20]
 8001666:	e7c3      	b.n	80015f0 <_vfiprintf_r+0x154>
 8001668:	fb05 2000 	mla	r0, r5, r0, r2
 800166c:	2301      	movs	r3, #1
 800166e:	e7f0      	b.n	8001652 <_vfiprintf_r+0x1b6>
 8001670:	ab03      	add	r3, sp, #12
 8001672:	9300      	str	r3, [sp, #0]
 8001674:	4622      	mov	r2, r4
 8001676:	4b13      	ldr	r3, [pc, #76]	; (80016c4 <_vfiprintf_r+0x228>)
 8001678:	a904      	add	r1, sp, #16
 800167a:	4630      	mov	r0, r6
 800167c:	f3af 8000 	nop.w
 8001680:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001684:	4681      	mov	r9, r0
 8001686:	d1d8      	bne.n	800163a <_vfiprintf_r+0x19e>
 8001688:	89a3      	ldrh	r3, [r4, #12]
 800168a:	065b      	lsls	r3, r3, #25
 800168c:	f53f af7d 	bmi.w	800158a <_vfiprintf_r+0xee>
 8001690:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001692:	e77c      	b.n	800158e <_vfiprintf_r+0xf2>
 8001694:	ab03      	add	r3, sp, #12
 8001696:	9300      	str	r3, [sp, #0]
 8001698:	4622      	mov	r2, r4
 800169a:	4b0a      	ldr	r3, [pc, #40]	; (80016c4 <_vfiprintf_r+0x228>)
 800169c:	a904      	add	r1, sp, #16
 800169e:	4630      	mov	r0, r6
 80016a0:	f000 f88a 	bl	80017b8 <_printf_i>
 80016a4:	e7ec      	b.n	8001680 <_vfiprintf_r+0x1e4>
 80016a6:	bf00      	nop
 80016a8:	0800204c 	.word	0x0800204c
 80016ac:	0800208c 	.word	0x0800208c
 80016b0:	0800206c 	.word	0x0800206c
 80016b4:	0800202c 	.word	0x0800202c
 80016b8:	08002092 	.word	0x08002092
 80016bc:	08002096 	.word	0x08002096
 80016c0:	00000000 	.word	0x00000000
 80016c4:	08001479 	.word	0x08001479

080016c8 <_printf_common>:
 80016c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80016cc:	4691      	mov	r9, r2
 80016ce:	461f      	mov	r7, r3
 80016d0:	688a      	ldr	r2, [r1, #8]
 80016d2:	690b      	ldr	r3, [r1, #16]
 80016d4:	4606      	mov	r6, r0
 80016d6:	4293      	cmp	r3, r2
 80016d8:	bfb8      	it	lt
 80016da:	4613      	movlt	r3, r2
 80016dc:	f8c9 3000 	str.w	r3, [r9]
 80016e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80016e4:	460c      	mov	r4, r1
 80016e6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80016ea:	b112      	cbz	r2, 80016f2 <_printf_common+0x2a>
 80016ec:	3301      	adds	r3, #1
 80016ee:	f8c9 3000 	str.w	r3, [r9]
 80016f2:	6823      	ldr	r3, [r4, #0]
 80016f4:	0699      	lsls	r1, r3, #26
 80016f6:	bf42      	ittt	mi
 80016f8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80016fc:	3302      	addmi	r3, #2
 80016fe:	f8c9 3000 	strmi.w	r3, [r9]
 8001702:	6825      	ldr	r5, [r4, #0]
 8001704:	f015 0506 	ands.w	r5, r5, #6
 8001708:	d107      	bne.n	800171a <_printf_common+0x52>
 800170a:	f104 0a19 	add.w	sl, r4, #25
 800170e:	68e3      	ldr	r3, [r4, #12]
 8001710:	f8d9 2000 	ldr.w	r2, [r9]
 8001714:	1a9b      	subs	r3, r3, r2
 8001716:	429d      	cmp	r5, r3
 8001718:	db2a      	blt.n	8001770 <_printf_common+0xa8>
 800171a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800171e:	6822      	ldr	r2, [r4, #0]
 8001720:	3300      	adds	r3, #0
 8001722:	bf18      	it	ne
 8001724:	2301      	movne	r3, #1
 8001726:	0692      	lsls	r2, r2, #26
 8001728:	d42f      	bmi.n	800178a <_printf_common+0xc2>
 800172a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800172e:	4639      	mov	r1, r7
 8001730:	4630      	mov	r0, r6
 8001732:	47c0      	blx	r8
 8001734:	3001      	adds	r0, #1
 8001736:	d022      	beq.n	800177e <_printf_common+0xb6>
 8001738:	6823      	ldr	r3, [r4, #0]
 800173a:	68e5      	ldr	r5, [r4, #12]
 800173c:	f003 0306 	and.w	r3, r3, #6
 8001740:	2b04      	cmp	r3, #4
 8001742:	bf18      	it	ne
 8001744:	2500      	movne	r5, #0
 8001746:	f8d9 2000 	ldr.w	r2, [r9]
 800174a:	f04f 0900 	mov.w	r9, #0
 800174e:	bf08      	it	eq
 8001750:	1aad      	subeq	r5, r5, r2
 8001752:	68a3      	ldr	r3, [r4, #8]
 8001754:	6922      	ldr	r2, [r4, #16]
 8001756:	bf08      	it	eq
 8001758:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800175c:	4293      	cmp	r3, r2
 800175e:	bfc4      	itt	gt
 8001760:	1a9b      	subgt	r3, r3, r2
 8001762:	18ed      	addgt	r5, r5, r3
 8001764:	341a      	adds	r4, #26
 8001766:	454d      	cmp	r5, r9
 8001768:	d11b      	bne.n	80017a2 <_printf_common+0xda>
 800176a:	2000      	movs	r0, #0
 800176c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001770:	2301      	movs	r3, #1
 8001772:	4652      	mov	r2, sl
 8001774:	4639      	mov	r1, r7
 8001776:	4630      	mov	r0, r6
 8001778:	47c0      	blx	r8
 800177a:	3001      	adds	r0, #1
 800177c:	d103      	bne.n	8001786 <_printf_common+0xbe>
 800177e:	f04f 30ff 	mov.w	r0, #4294967295
 8001782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001786:	3501      	adds	r5, #1
 8001788:	e7c1      	b.n	800170e <_printf_common+0x46>
 800178a:	2030      	movs	r0, #48	; 0x30
 800178c:	18e1      	adds	r1, r4, r3
 800178e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001792:	1c5a      	adds	r2, r3, #1
 8001794:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001798:	4422      	add	r2, r4
 800179a:	3302      	adds	r3, #2
 800179c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80017a0:	e7c3      	b.n	800172a <_printf_common+0x62>
 80017a2:	2301      	movs	r3, #1
 80017a4:	4622      	mov	r2, r4
 80017a6:	4639      	mov	r1, r7
 80017a8:	4630      	mov	r0, r6
 80017aa:	47c0      	blx	r8
 80017ac:	3001      	adds	r0, #1
 80017ae:	d0e6      	beq.n	800177e <_printf_common+0xb6>
 80017b0:	f109 0901 	add.w	r9, r9, #1
 80017b4:	e7d7      	b.n	8001766 <_printf_common+0x9e>
	...

080017b8 <_printf_i>:
 80017b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80017bc:	4617      	mov	r7, r2
 80017be:	7e0a      	ldrb	r2, [r1, #24]
 80017c0:	b085      	sub	sp, #20
 80017c2:	2a6e      	cmp	r2, #110	; 0x6e
 80017c4:	4698      	mov	r8, r3
 80017c6:	4606      	mov	r6, r0
 80017c8:	460c      	mov	r4, r1
 80017ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80017cc:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80017d0:	f000 80bc 	beq.w	800194c <_printf_i+0x194>
 80017d4:	d81a      	bhi.n	800180c <_printf_i+0x54>
 80017d6:	2a63      	cmp	r2, #99	; 0x63
 80017d8:	d02e      	beq.n	8001838 <_printf_i+0x80>
 80017da:	d80a      	bhi.n	80017f2 <_printf_i+0x3a>
 80017dc:	2a00      	cmp	r2, #0
 80017de:	f000 80c8 	beq.w	8001972 <_printf_i+0x1ba>
 80017e2:	2a58      	cmp	r2, #88	; 0x58
 80017e4:	f000 808a 	beq.w	80018fc <_printf_i+0x144>
 80017e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80017ec:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80017f0:	e02a      	b.n	8001848 <_printf_i+0x90>
 80017f2:	2a64      	cmp	r2, #100	; 0x64
 80017f4:	d001      	beq.n	80017fa <_printf_i+0x42>
 80017f6:	2a69      	cmp	r2, #105	; 0x69
 80017f8:	d1f6      	bne.n	80017e8 <_printf_i+0x30>
 80017fa:	6821      	ldr	r1, [r4, #0]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001802:	d023      	beq.n	800184c <_printf_i+0x94>
 8001804:	1d11      	adds	r1, r2, #4
 8001806:	6019      	str	r1, [r3, #0]
 8001808:	6813      	ldr	r3, [r2, #0]
 800180a:	e027      	b.n	800185c <_printf_i+0xa4>
 800180c:	2a73      	cmp	r2, #115	; 0x73
 800180e:	f000 80b4 	beq.w	800197a <_printf_i+0x1c2>
 8001812:	d808      	bhi.n	8001826 <_printf_i+0x6e>
 8001814:	2a6f      	cmp	r2, #111	; 0x6f
 8001816:	d02a      	beq.n	800186e <_printf_i+0xb6>
 8001818:	2a70      	cmp	r2, #112	; 0x70
 800181a:	d1e5      	bne.n	80017e8 <_printf_i+0x30>
 800181c:	680a      	ldr	r2, [r1, #0]
 800181e:	f042 0220 	orr.w	r2, r2, #32
 8001822:	600a      	str	r2, [r1, #0]
 8001824:	e003      	b.n	800182e <_printf_i+0x76>
 8001826:	2a75      	cmp	r2, #117	; 0x75
 8001828:	d021      	beq.n	800186e <_printf_i+0xb6>
 800182a:	2a78      	cmp	r2, #120	; 0x78
 800182c:	d1dc      	bne.n	80017e8 <_printf_i+0x30>
 800182e:	2278      	movs	r2, #120	; 0x78
 8001830:	496f      	ldr	r1, [pc, #444]	; (80019f0 <_printf_i+0x238>)
 8001832:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8001836:	e064      	b.n	8001902 <_printf_i+0x14a>
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800183e:	1d11      	adds	r1, r2, #4
 8001840:	6019      	str	r1, [r3, #0]
 8001842:	6813      	ldr	r3, [r2, #0]
 8001844:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001848:	2301      	movs	r3, #1
 800184a:	e0a3      	b.n	8001994 <_printf_i+0x1dc>
 800184c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8001850:	f102 0104 	add.w	r1, r2, #4
 8001854:	6019      	str	r1, [r3, #0]
 8001856:	d0d7      	beq.n	8001808 <_printf_i+0x50>
 8001858:	f9b2 3000 	ldrsh.w	r3, [r2]
 800185c:	2b00      	cmp	r3, #0
 800185e:	da03      	bge.n	8001868 <_printf_i+0xb0>
 8001860:	222d      	movs	r2, #45	; 0x2d
 8001862:	425b      	negs	r3, r3
 8001864:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001868:	4962      	ldr	r1, [pc, #392]	; (80019f4 <_printf_i+0x23c>)
 800186a:	220a      	movs	r2, #10
 800186c:	e017      	b.n	800189e <_printf_i+0xe6>
 800186e:	6820      	ldr	r0, [r4, #0]
 8001870:	6819      	ldr	r1, [r3, #0]
 8001872:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001876:	d003      	beq.n	8001880 <_printf_i+0xc8>
 8001878:	1d08      	adds	r0, r1, #4
 800187a:	6018      	str	r0, [r3, #0]
 800187c:	680b      	ldr	r3, [r1, #0]
 800187e:	e006      	b.n	800188e <_printf_i+0xd6>
 8001880:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001884:	f101 0004 	add.w	r0, r1, #4
 8001888:	6018      	str	r0, [r3, #0]
 800188a:	d0f7      	beq.n	800187c <_printf_i+0xc4>
 800188c:	880b      	ldrh	r3, [r1, #0]
 800188e:	2a6f      	cmp	r2, #111	; 0x6f
 8001890:	bf14      	ite	ne
 8001892:	220a      	movne	r2, #10
 8001894:	2208      	moveq	r2, #8
 8001896:	4957      	ldr	r1, [pc, #348]	; (80019f4 <_printf_i+0x23c>)
 8001898:	2000      	movs	r0, #0
 800189a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800189e:	6865      	ldr	r5, [r4, #4]
 80018a0:	2d00      	cmp	r5, #0
 80018a2:	60a5      	str	r5, [r4, #8]
 80018a4:	f2c0 809c 	blt.w	80019e0 <_printf_i+0x228>
 80018a8:	6820      	ldr	r0, [r4, #0]
 80018aa:	f020 0004 	bic.w	r0, r0, #4
 80018ae:	6020      	str	r0, [r4, #0]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d13f      	bne.n	8001934 <_printf_i+0x17c>
 80018b4:	2d00      	cmp	r5, #0
 80018b6:	f040 8095 	bne.w	80019e4 <_printf_i+0x22c>
 80018ba:	4675      	mov	r5, lr
 80018bc:	2a08      	cmp	r2, #8
 80018be:	d10b      	bne.n	80018d8 <_printf_i+0x120>
 80018c0:	6823      	ldr	r3, [r4, #0]
 80018c2:	07da      	lsls	r2, r3, #31
 80018c4:	d508      	bpl.n	80018d8 <_printf_i+0x120>
 80018c6:	6923      	ldr	r3, [r4, #16]
 80018c8:	6862      	ldr	r2, [r4, #4]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	bfde      	ittt	le
 80018ce:	2330      	movle	r3, #48	; 0x30
 80018d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80018d4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80018d8:	ebae 0305 	sub.w	r3, lr, r5
 80018dc:	6123      	str	r3, [r4, #16]
 80018de:	f8cd 8000 	str.w	r8, [sp]
 80018e2:	463b      	mov	r3, r7
 80018e4:	aa03      	add	r2, sp, #12
 80018e6:	4621      	mov	r1, r4
 80018e8:	4630      	mov	r0, r6
 80018ea:	f7ff feed 	bl	80016c8 <_printf_common>
 80018ee:	3001      	adds	r0, #1
 80018f0:	d155      	bne.n	800199e <_printf_i+0x1e6>
 80018f2:	f04f 30ff 	mov.w	r0, #4294967295
 80018f6:	b005      	add	sp, #20
 80018f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80018fc:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8001900:	493c      	ldr	r1, [pc, #240]	; (80019f4 <_printf_i+0x23c>)
 8001902:	6822      	ldr	r2, [r4, #0]
 8001904:	6818      	ldr	r0, [r3, #0]
 8001906:	f012 0f80 	tst.w	r2, #128	; 0x80
 800190a:	f100 0504 	add.w	r5, r0, #4
 800190e:	601d      	str	r5, [r3, #0]
 8001910:	d001      	beq.n	8001916 <_printf_i+0x15e>
 8001912:	6803      	ldr	r3, [r0, #0]
 8001914:	e002      	b.n	800191c <_printf_i+0x164>
 8001916:	0655      	lsls	r5, r2, #25
 8001918:	d5fb      	bpl.n	8001912 <_printf_i+0x15a>
 800191a:	8803      	ldrh	r3, [r0, #0]
 800191c:	07d0      	lsls	r0, r2, #31
 800191e:	bf44      	itt	mi
 8001920:	f042 0220 	orrmi.w	r2, r2, #32
 8001924:	6022      	strmi	r2, [r4, #0]
 8001926:	b91b      	cbnz	r3, 8001930 <_printf_i+0x178>
 8001928:	6822      	ldr	r2, [r4, #0]
 800192a:	f022 0220 	bic.w	r2, r2, #32
 800192e:	6022      	str	r2, [r4, #0]
 8001930:	2210      	movs	r2, #16
 8001932:	e7b1      	b.n	8001898 <_printf_i+0xe0>
 8001934:	4675      	mov	r5, lr
 8001936:	fbb3 f0f2 	udiv	r0, r3, r2
 800193a:	fb02 3310 	mls	r3, r2, r0, r3
 800193e:	5ccb      	ldrb	r3, [r1, r3]
 8001940:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001944:	4603      	mov	r3, r0
 8001946:	2800      	cmp	r0, #0
 8001948:	d1f5      	bne.n	8001936 <_printf_i+0x17e>
 800194a:	e7b7      	b.n	80018bc <_printf_i+0x104>
 800194c:	6808      	ldr	r0, [r1, #0]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001954:	6949      	ldr	r1, [r1, #20]
 8001956:	d004      	beq.n	8001962 <_printf_i+0x1aa>
 8001958:	1d10      	adds	r0, r2, #4
 800195a:	6018      	str	r0, [r3, #0]
 800195c:	6813      	ldr	r3, [r2, #0]
 800195e:	6019      	str	r1, [r3, #0]
 8001960:	e007      	b.n	8001972 <_printf_i+0x1ba>
 8001962:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001966:	f102 0004 	add.w	r0, r2, #4
 800196a:	6018      	str	r0, [r3, #0]
 800196c:	6813      	ldr	r3, [r2, #0]
 800196e:	d0f6      	beq.n	800195e <_printf_i+0x1a6>
 8001970:	8019      	strh	r1, [r3, #0]
 8001972:	2300      	movs	r3, #0
 8001974:	4675      	mov	r5, lr
 8001976:	6123      	str	r3, [r4, #16]
 8001978:	e7b1      	b.n	80018de <_printf_i+0x126>
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	1d11      	adds	r1, r2, #4
 800197e:	6019      	str	r1, [r3, #0]
 8001980:	6815      	ldr	r5, [r2, #0]
 8001982:	2100      	movs	r1, #0
 8001984:	6862      	ldr	r2, [r4, #4]
 8001986:	4628      	mov	r0, r5
 8001988:	f000 fa94 	bl	8001eb4 <memchr>
 800198c:	b108      	cbz	r0, 8001992 <_printf_i+0x1da>
 800198e:	1b40      	subs	r0, r0, r5
 8001990:	6060      	str	r0, [r4, #4]
 8001992:	6863      	ldr	r3, [r4, #4]
 8001994:	6123      	str	r3, [r4, #16]
 8001996:	2300      	movs	r3, #0
 8001998:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800199c:	e79f      	b.n	80018de <_printf_i+0x126>
 800199e:	6923      	ldr	r3, [r4, #16]
 80019a0:	462a      	mov	r2, r5
 80019a2:	4639      	mov	r1, r7
 80019a4:	4630      	mov	r0, r6
 80019a6:	47c0      	blx	r8
 80019a8:	3001      	adds	r0, #1
 80019aa:	d0a2      	beq.n	80018f2 <_printf_i+0x13a>
 80019ac:	6823      	ldr	r3, [r4, #0]
 80019ae:	079b      	lsls	r3, r3, #30
 80019b0:	d507      	bpl.n	80019c2 <_printf_i+0x20a>
 80019b2:	2500      	movs	r5, #0
 80019b4:	f104 0919 	add.w	r9, r4, #25
 80019b8:	68e3      	ldr	r3, [r4, #12]
 80019ba:	9a03      	ldr	r2, [sp, #12]
 80019bc:	1a9b      	subs	r3, r3, r2
 80019be:	429d      	cmp	r5, r3
 80019c0:	db05      	blt.n	80019ce <_printf_i+0x216>
 80019c2:	68e0      	ldr	r0, [r4, #12]
 80019c4:	9b03      	ldr	r3, [sp, #12]
 80019c6:	4298      	cmp	r0, r3
 80019c8:	bfb8      	it	lt
 80019ca:	4618      	movlt	r0, r3
 80019cc:	e793      	b.n	80018f6 <_printf_i+0x13e>
 80019ce:	2301      	movs	r3, #1
 80019d0:	464a      	mov	r2, r9
 80019d2:	4639      	mov	r1, r7
 80019d4:	4630      	mov	r0, r6
 80019d6:	47c0      	blx	r8
 80019d8:	3001      	adds	r0, #1
 80019da:	d08a      	beq.n	80018f2 <_printf_i+0x13a>
 80019dc:	3501      	adds	r5, #1
 80019de:	e7eb      	b.n	80019b8 <_printf_i+0x200>
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d1a7      	bne.n	8001934 <_printf_i+0x17c>
 80019e4:	780b      	ldrb	r3, [r1, #0]
 80019e6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80019ea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80019ee:	e765      	b.n	80018bc <_printf_i+0x104>
 80019f0:	080020ae 	.word	0x080020ae
 80019f4:	0800209d 	.word	0x0800209d

080019f8 <_sbrk_r>:
 80019f8:	b538      	push	{r3, r4, r5, lr}
 80019fa:	2300      	movs	r3, #0
 80019fc:	4c05      	ldr	r4, [pc, #20]	; (8001a14 <_sbrk_r+0x1c>)
 80019fe:	4605      	mov	r5, r0
 8001a00:	4608      	mov	r0, r1
 8001a02:	6023      	str	r3, [r4, #0]
 8001a04:	f7ff fae6 	bl	8000fd4 <_sbrk>
 8001a08:	1c43      	adds	r3, r0, #1
 8001a0a:	d102      	bne.n	8001a12 <_sbrk_r+0x1a>
 8001a0c:	6823      	ldr	r3, [r4, #0]
 8001a0e:	b103      	cbz	r3, 8001a12 <_sbrk_r+0x1a>
 8001a10:	602b      	str	r3, [r5, #0]
 8001a12:	bd38      	pop	{r3, r4, r5, pc}
 8001a14:	20000130 	.word	0x20000130

08001a18 <__sread>:
 8001a18:	b510      	push	{r4, lr}
 8001a1a:	460c      	mov	r4, r1
 8001a1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a20:	f000 faa4 	bl	8001f6c <_read_r>
 8001a24:	2800      	cmp	r0, #0
 8001a26:	bfab      	itete	ge
 8001a28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001a2a:	89a3      	ldrhlt	r3, [r4, #12]
 8001a2c:	181b      	addge	r3, r3, r0
 8001a2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001a32:	bfac      	ite	ge
 8001a34:	6563      	strge	r3, [r4, #84]	; 0x54
 8001a36:	81a3      	strhlt	r3, [r4, #12]
 8001a38:	bd10      	pop	{r4, pc}

08001a3a <__swrite>:
 8001a3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a3e:	461f      	mov	r7, r3
 8001a40:	898b      	ldrh	r3, [r1, #12]
 8001a42:	4605      	mov	r5, r0
 8001a44:	05db      	lsls	r3, r3, #23
 8001a46:	460c      	mov	r4, r1
 8001a48:	4616      	mov	r6, r2
 8001a4a:	d505      	bpl.n	8001a58 <__swrite+0x1e>
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a54:	f000 f9b8 	bl	8001dc8 <_lseek_r>
 8001a58:	89a3      	ldrh	r3, [r4, #12]
 8001a5a:	4632      	mov	r2, r6
 8001a5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001a60:	81a3      	strh	r3, [r4, #12]
 8001a62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001a66:	463b      	mov	r3, r7
 8001a68:	4628      	mov	r0, r5
 8001a6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001a6e:	f000 b869 	b.w	8001b44 <_write_r>

08001a72 <__sseek>:
 8001a72:	b510      	push	{r4, lr}
 8001a74:	460c      	mov	r4, r1
 8001a76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a7a:	f000 f9a5 	bl	8001dc8 <_lseek_r>
 8001a7e:	1c43      	adds	r3, r0, #1
 8001a80:	89a3      	ldrh	r3, [r4, #12]
 8001a82:	bf15      	itete	ne
 8001a84:	6560      	strne	r0, [r4, #84]	; 0x54
 8001a86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001a8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001a8e:	81a3      	strheq	r3, [r4, #12]
 8001a90:	bf18      	it	ne
 8001a92:	81a3      	strhne	r3, [r4, #12]
 8001a94:	bd10      	pop	{r4, pc}

08001a96 <__sclose>:
 8001a96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a9a:	f000 b8d3 	b.w	8001c44 <_close_r>
	...

08001aa0 <__swbuf_r>:
 8001aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001aa2:	460e      	mov	r6, r1
 8001aa4:	4614      	mov	r4, r2
 8001aa6:	4605      	mov	r5, r0
 8001aa8:	b118      	cbz	r0, 8001ab2 <__swbuf_r+0x12>
 8001aaa:	6983      	ldr	r3, [r0, #24]
 8001aac:	b90b      	cbnz	r3, 8001ab2 <__swbuf_r+0x12>
 8001aae:	f7ff fbe5 	bl	800127c <__sinit>
 8001ab2:	4b21      	ldr	r3, [pc, #132]	; (8001b38 <__swbuf_r+0x98>)
 8001ab4:	429c      	cmp	r4, r3
 8001ab6:	d12a      	bne.n	8001b0e <__swbuf_r+0x6e>
 8001ab8:	686c      	ldr	r4, [r5, #4]
 8001aba:	69a3      	ldr	r3, [r4, #24]
 8001abc:	60a3      	str	r3, [r4, #8]
 8001abe:	89a3      	ldrh	r3, [r4, #12]
 8001ac0:	071a      	lsls	r2, r3, #28
 8001ac2:	d52e      	bpl.n	8001b22 <__swbuf_r+0x82>
 8001ac4:	6923      	ldr	r3, [r4, #16]
 8001ac6:	b363      	cbz	r3, 8001b22 <__swbuf_r+0x82>
 8001ac8:	6923      	ldr	r3, [r4, #16]
 8001aca:	6820      	ldr	r0, [r4, #0]
 8001acc:	b2f6      	uxtb	r6, r6
 8001ace:	1ac0      	subs	r0, r0, r3
 8001ad0:	6963      	ldr	r3, [r4, #20]
 8001ad2:	4637      	mov	r7, r6
 8001ad4:	4298      	cmp	r0, r3
 8001ad6:	db04      	blt.n	8001ae2 <__swbuf_r+0x42>
 8001ad8:	4621      	mov	r1, r4
 8001ada:	4628      	mov	r0, r5
 8001adc:	f000 f94a 	bl	8001d74 <_fflush_r>
 8001ae0:	bb28      	cbnz	r0, 8001b2e <__swbuf_r+0x8e>
 8001ae2:	68a3      	ldr	r3, [r4, #8]
 8001ae4:	3001      	adds	r0, #1
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	60a3      	str	r3, [r4, #8]
 8001aea:	6823      	ldr	r3, [r4, #0]
 8001aec:	1c5a      	adds	r2, r3, #1
 8001aee:	6022      	str	r2, [r4, #0]
 8001af0:	701e      	strb	r6, [r3, #0]
 8001af2:	6963      	ldr	r3, [r4, #20]
 8001af4:	4298      	cmp	r0, r3
 8001af6:	d004      	beq.n	8001b02 <__swbuf_r+0x62>
 8001af8:	89a3      	ldrh	r3, [r4, #12]
 8001afa:	07db      	lsls	r3, r3, #31
 8001afc:	d519      	bpl.n	8001b32 <__swbuf_r+0x92>
 8001afe:	2e0a      	cmp	r6, #10
 8001b00:	d117      	bne.n	8001b32 <__swbuf_r+0x92>
 8001b02:	4621      	mov	r1, r4
 8001b04:	4628      	mov	r0, r5
 8001b06:	f000 f935 	bl	8001d74 <_fflush_r>
 8001b0a:	b190      	cbz	r0, 8001b32 <__swbuf_r+0x92>
 8001b0c:	e00f      	b.n	8001b2e <__swbuf_r+0x8e>
 8001b0e:	4b0b      	ldr	r3, [pc, #44]	; (8001b3c <__swbuf_r+0x9c>)
 8001b10:	429c      	cmp	r4, r3
 8001b12:	d101      	bne.n	8001b18 <__swbuf_r+0x78>
 8001b14:	68ac      	ldr	r4, [r5, #8]
 8001b16:	e7d0      	b.n	8001aba <__swbuf_r+0x1a>
 8001b18:	4b09      	ldr	r3, [pc, #36]	; (8001b40 <__swbuf_r+0xa0>)
 8001b1a:	429c      	cmp	r4, r3
 8001b1c:	bf08      	it	eq
 8001b1e:	68ec      	ldreq	r4, [r5, #12]
 8001b20:	e7cb      	b.n	8001aba <__swbuf_r+0x1a>
 8001b22:	4621      	mov	r1, r4
 8001b24:	4628      	mov	r0, r5
 8001b26:	f000 f81f 	bl	8001b68 <__swsetup_r>
 8001b2a:	2800      	cmp	r0, #0
 8001b2c:	d0cc      	beq.n	8001ac8 <__swbuf_r+0x28>
 8001b2e:	f04f 37ff 	mov.w	r7, #4294967295
 8001b32:	4638      	mov	r0, r7
 8001b34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b36:	bf00      	nop
 8001b38:	0800204c 	.word	0x0800204c
 8001b3c:	0800206c 	.word	0x0800206c
 8001b40:	0800202c 	.word	0x0800202c

08001b44 <_write_r>:
 8001b44:	b538      	push	{r3, r4, r5, lr}
 8001b46:	4605      	mov	r5, r0
 8001b48:	4608      	mov	r0, r1
 8001b4a:	4611      	mov	r1, r2
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	4c05      	ldr	r4, [pc, #20]	; (8001b64 <_write_r+0x20>)
 8001b50:	6022      	str	r2, [r4, #0]
 8001b52:	461a      	mov	r2, r3
 8001b54:	f7ff f9b2 	bl	8000ebc <_write>
 8001b58:	1c43      	adds	r3, r0, #1
 8001b5a:	d102      	bne.n	8001b62 <_write_r+0x1e>
 8001b5c:	6823      	ldr	r3, [r4, #0]
 8001b5e:	b103      	cbz	r3, 8001b62 <_write_r+0x1e>
 8001b60:	602b      	str	r3, [r5, #0]
 8001b62:	bd38      	pop	{r3, r4, r5, pc}
 8001b64:	20000130 	.word	0x20000130

08001b68 <__swsetup_r>:
 8001b68:	4b32      	ldr	r3, [pc, #200]	; (8001c34 <__swsetup_r+0xcc>)
 8001b6a:	b570      	push	{r4, r5, r6, lr}
 8001b6c:	681d      	ldr	r5, [r3, #0]
 8001b6e:	4606      	mov	r6, r0
 8001b70:	460c      	mov	r4, r1
 8001b72:	b125      	cbz	r5, 8001b7e <__swsetup_r+0x16>
 8001b74:	69ab      	ldr	r3, [r5, #24]
 8001b76:	b913      	cbnz	r3, 8001b7e <__swsetup_r+0x16>
 8001b78:	4628      	mov	r0, r5
 8001b7a:	f7ff fb7f 	bl	800127c <__sinit>
 8001b7e:	4b2e      	ldr	r3, [pc, #184]	; (8001c38 <__swsetup_r+0xd0>)
 8001b80:	429c      	cmp	r4, r3
 8001b82:	d10f      	bne.n	8001ba4 <__swsetup_r+0x3c>
 8001b84:	686c      	ldr	r4, [r5, #4]
 8001b86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001b8a:	b29a      	uxth	r2, r3
 8001b8c:	0715      	lsls	r5, r2, #28
 8001b8e:	d42c      	bmi.n	8001bea <__swsetup_r+0x82>
 8001b90:	06d0      	lsls	r0, r2, #27
 8001b92:	d411      	bmi.n	8001bb8 <__swsetup_r+0x50>
 8001b94:	2209      	movs	r2, #9
 8001b96:	6032      	str	r2, [r6, #0]
 8001b98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b9c:	81a3      	strh	r3, [r4, #12]
 8001b9e:	f04f 30ff 	mov.w	r0, #4294967295
 8001ba2:	bd70      	pop	{r4, r5, r6, pc}
 8001ba4:	4b25      	ldr	r3, [pc, #148]	; (8001c3c <__swsetup_r+0xd4>)
 8001ba6:	429c      	cmp	r4, r3
 8001ba8:	d101      	bne.n	8001bae <__swsetup_r+0x46>
 8001baa:	68ac      	ldr	r4, [r5, #8]
 8001bac:	e7eb      	b.n	8001b86 <__swsetup_r+0x1e>
 8001bae:	4b24      	ldr	r3, [pc, #144]	; (8001c40 <__swsetup_r+0xd8>)
 8001bb0:	429c      	cmp	r4, r3
 8001bb2:	bf08      	it	eq
 8001bb4:	68ec      	ldreq	r4, [r5, #12]
 8001bb6:	e7e6      	b.n	8001b86 <__swsetup_r+0x1e>
 8001bb8:	0751      	lsls	r1, r2, #29
 8001bba:	d512      	bpl.n	8001be2 <__swsetup_r+0x7a>
 8001bbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001bbe:	b141      	cbz	r1, 8001bd2 <__swsetup_r+0x6a>
 8001bc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001bc4:	4299      	cmp	r1, r3
 8001bc6:	d002      	beq.n	8001bce <__swsetup_r+0x66>
 8001bc8:	4630      	mov	r0, r6
 8001bca:	f000 f983 	bl	8001ed4 <_free_r>
 8001bce:	2300      	movs	r3, #0
 8001bd0:	6363      	str	r3, [r4, #52]	; 0x34
 8001bd2:	89a3      	ldrh	r3, [r4, #12]
 8001bd4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001bd8:	81a3      	strh	r3, [r4, #12]
 8001bda:	2300      	movs	r3, #0
 8001bdc:	6063      	str	r3, [r4, #4]
 8001bde:	6923      	ldr	r3, [r4, #16]
 8001be0:	6023      	str	r3, [r4, #0]
 8001be2:	89a3      	ldrh	r3, [r4, #12]
 8001be4:	f043 0308 	orr.w	r3, r3, #8
 8001be8:	81a3      	strh	r3, [r4, #12]
 8001bea:	6923      	ldr	r3, [r4, #16]
 8001bec:	b94b      	cbnz	r3, 8001c02 <__swsetup_r+0x9a>
 8001bee:	89a3      	ldrh	r3, [r4, #12]
 8001bf0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001bf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bf8:	d003      	beq.n	8001c02 <__swsetup_r+0x9a>
 8001bfa:	4621      	mov	r1, r4
 8001bfc:	4630      	mov	r0, r6
 8001bfe:	f000 f919 	bl	8001e34 <__smakebuf_r>
 8001c02:	89a2      	ldrh	r2, [r4, #12]
 8001c04:	f012 0301 	ands.w	r3, r2, #1
 8001c08:	d00c      	beq.n	8001c24 <__swsetup_r+0xbc>
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60a3      	str	r3, [r4, #8]
 8001c0e:	6963      	ldr	r3, [r4, #20]
 8001c10:	425b      	negs	r3, r3
 8001c12:	61a3      	str	r3, [r4, #24]
 8001c14:	6923      	ldr	r3, [r4, #16]
 8001c16:	b953      	cbnz	r3, 8001c2e <__swsetup_r+0xc6>
 8001c18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001c1c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8001c20:	d1ba      	bne.n	8001b98 <__swsetup_r+0x30>
 8001c22:	bd70      	pop	{r4, r5, r6, pc}
 8001c24:	0792      	lsls	r2, r2, #30
 8001c26:	bf58      	it	pl
 8001c28:	6963      	ldrpl	r3, [r4, #20]
 8001c2a:	60a3      	str	r3, [r4, #8]
 8001c2c:	e7f2      	b.n	8001c14 <__swsetup_r+0xac>
 8001c2e:	2000      	movs	r0, #0
 8001c30:	e7f7      	b.n	8001c22 <__swsetup_r+0xba>
 8001c32:	bf00      	nop
 8001c34:	2000000c 	.word	0x2000000c
 8001c38:	0800204c 	.word	0x0800204c
 8001c3c:	0800206c 	.word	0x0800206c
 8001c40:	0800202c 	.word	0x0800202c

08001c44 <_close_r>:
 8001c44:	b538      	push	{r3, r4, r5, lr}
 8001c46:	2300      	movs	r3, #0
 8001c48:	4c05      	ldr	r4, [pc, #20]	; (8001c60 <_close_r+0x1c>)
 8001c4a:	4605      	mov	r5, r0
 8001c4c:	4608      	mov	r0, r1
 8001c4e:	6023      	str	r3, [r4, #0]
 8001c50:	f7ff f9da 	bl	8001008 <_close>
 8001c54:	1c43      	adds	r3, r0, #1
 8001c56:	d102      	bne.n	8001c5e <_close_r+0x1a>
 8001c58:	6823      	ldr	r3, [r4, #0]
 8001c5a:	b103      	cbz	r3, 8001c5e <_close_r+0x1a>
 8001c5c:	602b      	str	r3, [r5, #0]
 8001c5e:	bd38      	pop	{r3, r4, r5, pc}
 8001c60:	20000130 	.word	0x20000130

08001c64 <__sflush_r>:
 8001c64:	898a      	ldrh	r2, [r1, #12]
 8001c66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c6a:	4605      	mov	r5, r0
 8001c6c:	0710      	lsls	r0, r2, #28
 8001c6e:	460c      	mov	r4, r1
 8001c70:	d45a      	bmi.n	8001d28 <__sflush_r+0xc4>
 8001c72:	684b      	ldr	r3, [r1, #4]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	dc05      	bgt.n	8001c84 <__sflush_r+0x20>
 8001c78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	dc02      	bgt.n	8001c84 <__sflush_r+0x20>
 8001c7e:	2000      	movs	r0, #0
 8001c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001c86:	2e00      	cmp	r6, #0
 8001c88:	d0f9      	beq.n	8001c7e <__sflush_r+0x1a>
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001c90:	682f      	ldr	r7, [r5, #0]
 8001c92:	602b      	str	r3, [r5, #0]
 8001c94:	d033      	beq.n	8001cfe <__sflush_r+0x9a>
 8001c96:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001c98:	89a3      	ldrh	r3, [r4, #12]
 8001c9a:	075a      	lsls	r2, r3, #29
 8001c9c:	d505      	bpl.n	8001caa <__sflush_r+0x46>
 8001c9e:	6863      	ldr	r3, [r4, #4]
 8001ca0:	1ac0      	subs	r0, r0, r3
 8001ca2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001ca4:	b10b      	cbz	r3, 8001caa <__sflush_r+0x46>
 8001ca6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ca8:	1ac0      	subs	r0, r0, r3
 8001caa:	2300      	movs	r3, #0
 8001cac:	4602      	mov	r2, r0
 8001cae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001cb0:	6a21      	ldr	r1, [r4, #32]
 8001cb2:	4628      	mov	r0, r5
 8001cb4:	47b0      	blx	r6
 8001cb6:	1c43      	adds	r3, r0, #1
 8001cb8:	89a3      	ldrh	r3, [r4, #12]
 8001cba:	d106      	bne.n	8001cca <__sflush_r+0x66>
 8001cbc:	6829      	ldr	r1, [r5, #0]
 8001cbe:	291d      	cmp	r1, #29
 8001cc0:	d84b      	bhi.n	8001d5a <__sflush_r+0xf6>
 8001cc2:	4a2b      	ldr	r2, [pc, #172]	; (8001d70 <__sflush_r+0x10c>)
 8001cc4:	40ca      	lsrs	r2, r1
 8001cc6:	07d6      	lsls	r6, r2, #31
 8001cc8:	d547      	bpl.n	8001d5a <__sflush_r+0xf6>
 8001cca:	2200      	movs	r2, #0
 8001ccc:	6062      	str	r2, [r4, #4]
 8001cce:	6922      	ldr	r2, [r4, #16]
 8001cd0:	04d9      	lsls	r1, r3, #19
 8001cd2:	6022      	str	r2, [r4, #0]
 8001cd4:	d504      	bpl.n	8001ce0 <__sflush_r+0x7c>
 8001cd6:	1c42      	adds	r2, r0, #1
 8001cd8:	d101      	bne.n	8001cde <__sflush_r+0x7a>
 8001cda:	682b      	ldr	r3, [r5, #0]
 8001cdc:	b903      	cbnz	r3, 8001ce0 <__sflush_r+0x7c>
 8001cde:	6560      	str	r0, [r4, #84]	; 0x54
 8001ce0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001ce2:	602f      	str	r7, [r5, #0]
 8001ce4:	2900      	cmp	r1, #0
 8001ce6:	d0ca      	beq.n	8001c7e <__sflush_r+0x1a>
 8001ce8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001cec:	4299      	cmp	r1, r3
 8001cee:	d002      	beq.n	8001cf6 <__sflush_r+0x92>
 8001cf0:	4628      	mov	r0, r5
 8001cf2:	f000 f8ef 	bl	8001ed4 <_free_r>
 8001cf6:	2000      	movs	r0, #0
 8001cf8:	6360      	str	r0, [r4, #52]	; 0x34
 8001cfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001cfe:	6a21      	ldr	r1, [r4, #32]
 8001d00:	2301      	movs	r3, #1
 8001d02:	4628      	mov	r0, r5
 8001d04:	47b0      	blx	r6
 8001d06:	1c41      	adds	r1, r0, #1
 8001d08:	d1c6      	bne.n	8001c98 <__sflush_r+0x34>
 8001d0a:	682b      	ldr	r3, [r5, #0]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d0c3      	beq.n	8001c98 <__sflush_r+0x34>
 8001d10:	2b1d      	cmp	r3, #29
 8001d12:	d001      	beq.n	8001d18 <__sflush_r+0xb4>
 8001d14:	2b16      	cmp	r3, #22
 8001d16:	d101      	bne.n	8001d1c <__sflush_r+0xb8>
 8001d18:	602f      	str	r7, [r5, #0]
 8001d1a:	e7b0      	b.n	8001c7e <__sflush_r+0x1a>
 8001d1c:	89a3      	ldrh	r3, [r4, #12]
 8001d1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d22:	81a3      	strh	r3, [r4, #12]
 8001d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d28:	690f      	ldr	r7, [r1, #16]
 8001d2a:	2f00      	cmp	r7, #0
 8001d2c:	d0a7      	beq.n	8001c7e <__sflush_r+0x1a>
 8001d2e:	0793      	lsls	r3, r2, #30
 8001d30:	bf18      	it	ne
 8001d32:	2300      	movne	r3, #0
 8001d34:	680e      	ldr	r6, [r1, #0]
 8001d36:	bf08      	it	eq
 8001d38:	694b      	ldreq	r3, [r1, #20]
 8001d3a:	eba6 0807 	sub.w	r8, r6, r7
 8001d3e:	600f      	str	r7, [r1, #0]
 8001d40:	608b      	str	r3, [r1, #8]
 8001d42:	f1b8 0f00 	cmp.w	r8, #0
 8001d46:	dd9a      	ble.n	8001c7e <__sflush_r+0x1a>
 8001d48:	4643      	mov	r3, r8
 8001d4a:	463a      	mov	r2, r7
 8001d4c:	6a21      	ldr	r1, [r4, #32]
 8001d4e:	4628      	mov	r0, r5
 8001d50:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001d52:	47b0      	blx	r6
 8001d54:	2800      	cmp	r0, #0
 8001d56:	dc07      	bgt.n	8001d68 <__sflush_r+0x104>
 8001d58:	89a3      	ldrh	r3, [r4, #12]
 8001d5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d5e:	81a3      	strh	r3, [r4, #12]
 8001d60:	f04f 30ff 	mov.w	r0, #4294967295
 8001d64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d68:	4407      	add	r7, r0
 8001d6a:	eba8 0800 	sub.w	r8, r8, r0
 8001d6e:	e7e8      	b.n	8001d42 <__sflush_r+0xde>
 8001d70:	20400001 	.word	0x20400001

08001d74 <_fflush_r>:
 8001d74:	b538      	push	{r3, r4, r5, lr}
 8001d76:	690b      	ldr	r3, [r1, #16]
 8001d78:	4605      	mov	r5, r0
 8001d7a:	460c      	mov	r4, r1
 8001d7c:	b1db      	cbz	r3, 8001db6 <_fflush_r+0x42>
 8001d7e:	b118      	cbz	r0, 8001d88 <_fflush_r+0x14>
 8001d80:	6983      	ldr	r3, [r0, #24]
 8001d82:	b90b      	cbnz	r3, 8001d88 <_fflush_r+0x14>
 8001d84:	f7ff fa7a 	bl	800127c <__sinit>
 8001d88:	4b0c      	ldr	r3, [pc, #48]	; (8001dbc <_fflush_r+0x48>)
 8001d8a:	429c      	cmp	r4, r3
 8001d8c:	d109      	bne.n	8001da2 <_fflush_r+0x2e>
 8001d8e:	686c      	ldr	r4, [r5, #4]
 8001d90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001d94:	b17b      	cbz	r3, 8001db6 <_fflush_r+0x42>
 8001d96:	4621      	mov	r1, r4
 8001d98:	4628      	mov	r0, r5
 8001d9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001d9e:	f7ff bf61 	b.w	8001c64 <__sflush_r>
 8001da2:	4b07      	ldr	r3, [pc, #28]	; (8001dc0 <_fflush_r+0x4c>)
 8001da4:	429c      	cmp	r4, r3
 8001da6:	d101      	bne.n	8001dac <_fflush_r+0x38>
 8001da8:	68ac      	ldr	r4, [r5, #8]
 8001daa:	e7f1      	b.n	8001d90 <_fflush_r+0x1c>
 8001dac:	4b05      	ldr	r3, [pc, #20]	; (8001dc4 <_fflush_r+0x50>)
 8001dae:	429c      	cmp	r4, r3
 8001db0:	bf08      	it	eq
 8001db2:	68ec      	ldreq	r4, [r5, #12]
 8001db4:	e7ec      	b.n	8001d90 <_fflush_r+0x1c>
 8001db6:	2000      	movs	r0, #0
 8001db8:	bd38      	pop	{r3, r4, r5, pc}
 8001dba:	bf00      	nop
 8001dbc:	0800204c 	.word	0x0800204c
 8001dc0:	0800206c 	.word	0x0800206c
 8001dc4:	0800202c 	.word	0x0800202c

08001dc8 <_lseek_r>:
 8001dc8:	b538      	push	{r3, r4, r5, lr}
 8001dca:	4605      	mov	r5, r0
 8001dcc:	4608      	mov	r0, r1
 8001dce:	4611      	mov	r1, r2
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	4c05      	ldr	r4, [pc, #20]	; (8001de8 <_lseek_r+0x20>)
 8001dd4:	6022      	str	r2, [r4, #0]
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	f7ff f920 	bl	800101c <_lseek>
 8001ddc:	1c43      	adds	r3, r0, #1
 8001dde:	d102      	bne.n	8001de6 <_lseek_r+0x1e>
 8001de0:	6823      	ldr	r3, [r4, #0]
 8001de2:	b103      	cbz	r3, 8001de6 <_lseek_r+0x1e>
 8001de4:	602b      	str	r3, [r5, #0]
 8001de6:	bd38      	pop	{r3, r4, r5, pc}
 8001de8:	20000130 	.word	0x20000130

08001dec <__swhatbuf_r>:
 8001dec:	b570      	push	{r4, r5, r6, lr}
 8001dee:	460e      	mov	r6, r1
 8001df0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001df4:	b090      	sub	sp, #64	; 0x40
 8001df6:	2900      	cmp	r1, #0
 8001df8:	4614      	mov	r4, r2
 8001dfa:	461d      	mov	r5, r3
 8001dfc:	da07      	bge.n	8001e0e <__swhatbuf_r+0x22>
 8001dfe:	2300      	movs	r3, #0
 8001e00:	602b      	str	r3, [r5, #0]
 8001e02:	89b3      	ldrh	r3, [r6, #12]
 8001e04:	061a      	lsls	r2, r3, #24
 8001e06:	d410      	bmi.n	8001e2a <__swhatbuf_r+0x3e>
 8001e08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e0c:	e00e      	b.n	8001e2c <__swhatbuf_r+0x40>
 8001e0e:	aa01      	add	r2, sp, #4
 8001e10:	f000 f8be 	bl	8001f90 <_fstat_r>
 8001e14:	2800      	cmp	r0, #0
 8001e16:	dbf2      	blt.n	8001dfe <__swhatbuf_r+0x12>
 8001e18:	9a02      	ldr	r2, [sp, #8]
 8001e1a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001e1e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001e22:	425a      	negs	r2, r3
 8001e24:	415a      	adcs	r2, r3
 8001e26:	602a      	str	r2, [r5, #0]
 8001e28:	e7ee      	b.n	8001e08 <__swhatbuf_r+0x1c>
 8001e2a:	2340      	movs	r3, #64	; 0x40
 8001e2c:	2000      	movs	r0, #0
 8001e2e:	6023      	str	r3, [r4, #0]
 8001e30:	b010      	add	sp, #64	; 0x40
 8001e32:	bd70      	pop	{r4, r5, r6, pc}

08001e34 <__smakebuf_r>:
 8001e34:	898b      	ldrh	r3, [r1, #12]
 8001e36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001e38:	079d      	lsls	r5, r3, #30
 8001e3a:	4606      	mov	r6, r0
 8001e3c:	460c      	mov	r4, r1
 8001e3e:	d507      	bpl.n	8001e50 <__smakebuf_r+0x1c>
 8001e40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001e44:	6023      	str	r3, [r4, #0]
 8001e46:	6123      	str	r3, [r4, #16]
 8001e48:	2301      	movs	r3, #1
 8001e4a:	6163      	str	r3, [r4, #20]
 8001e4c:	b002      	add	sp, #8
 8001e4e:	bd70      	pop	{r4, r5, r6, pc}
 8001e50:	ab01      	add	r3, sp, #4
 8001e52:	466a      	mov	r2, sp
 8001e54:	f7ff ffca 	bl	8001dec <__swhatbuf_r>
 8001e58:	9900      	ldr	r1, [sp, #0]
 8001e5a:	4605      	mov	r5, r0
 8001e5c:	4630      	mov	r0, r6
 8001e5e:	f7ff fa97 	bl	8001390 <_malloc_r>
 8001e62:	b948      	cbnz	r0, 8001e78 <__smakebuf_r+0x44>
 8001e64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e68:	059a      	lsls	r2, r3, #22
 8001e6a:	d4ef      	bmi.n	8001e4c <__smakebuf_r+0x18>
 8001e6c:	f023 0303 	bic.w	r3, r3, #3
 8001e70:	f043 0302 	orr.w	r3, r3, #2
 8001e74:	81a3      	strh	r3, [r4, #12]
 8001e76:	e7e3      	b.n	8001e40 <__smakebuf_r+0xc>
 8001e78:	4b0d      	ldr	r3, [pc, #52]	; (8001eb0 <__smakebuf_r+0x7c>)
 8001e7a:	62b3      	str	r3, [r6, #40]	; 0x28
 8001e7c:	89a3      	ldrh	r3, [r4, #12]
 8001e7e:	6020      	str	r0, [r4, #0]
 8001e80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e84:	81a3      	strh	r3, [r4, #12]
 8001e86:	9b00      	ldr	r3, [sp, #0]
 8001e88:	6120      	str	r0, [r4, #16]
 8001e8a:	6163      	str	r3, [r4, #20]
 8001e8c:	9b01      	ldr	r3, [sp, #4]
 8001e8e:	b15b      	cbz	r3, 8001ea8 <__smakebuf_r+0x74>
 8001e90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001e94:	4630      	mov	r0, r6
 8001e96:	f000 f88d 	bl	8001fb4 <_isatty_r>
 8001e9a:	b128      	cbz	r0, 8001ea8 <__smakebuf_r+0x74>
 8001e9c:	89a3      	ldrh	r3, [r4, #12]
 8001e9e:	f023 0303 	bic.w	r3, r3, #3
 8001ea2:	f043 0301 	orr.w	r3, r3, #1
 8001ea6:	81a3      	strh	r3, [r4, #12]
 8001ea8:	89a3      	ldrh	r3, [r4, #12]
 8001eaa:	431d      	orrs	r5, r3
 8001eac:	81a5      	strh	r5, [r4, #12]
 8001eae:	e7cd      	b.n	8001e4c <__smakebuf_r+0x18>
 8001eb0:	080011fd 	.word	0x080011fd

08001eb4 <memchr>:
 8001eb4:	b510      	push	{r4, lr}
 8001eb6:	b2c9      	uxtb	r1, r1
 8001eb8:	4402      	add	r2, r0
 8001eba:	4290      	cmp	r0, r2
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	d101      	bne.n	8001ec4 <memchr+0x10>
 8001ec0:	2000      	movs	r0, #0
 8001ec2:	bd10      	pop	{r4, pc}
 8001ec4:	781c      	ldrb	r4, [r3, #0]
 8001ec6:	3001      	adds	r0, #1
 8001ec8:	428c      	cmp	r4, r1
 8001eca:	d1f6      	bne.n	8001eba <memchr+0x6>
 8001ecc:	4618      	mov	r0, r3
 8001ece:	bd10      	pop	{r4, pc}

08001ed0 <__malloc_lock>:
 8001ed0:	4770      	bx	lr

08001ed2 <__malloc_unlock>:
 8001ed2:	4770      	bx	lr

08001ed4 <_free_r>:
 8001ed4:	b538      	push	{r3, r4, r5, lr}
 8001ed6:	4605      	mov	r5, r0
 8001ed8:	2900      	cmp	r1, #0
 8001eda:	d043      	beq.n	8001f64 <_free_r+0x90>
 8001edc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001ee0:	1f0c      	subs	r4, r1, #4
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	bfb8      	it	lt
 8001ee6:	18e4      	addlt	r4, r4, r3
 8001ee8:	f7ff fff2 	bl	8001ed0 <__malloc_lock>
 8001eec:	4a1e      	ldr	r2, [pc, #120]	; (8001f68 <_free_r+0x94>)
 8001eee:	6813      	ldr	r3, [r2, #0]
 8001ef0:	4610      	mov	r0, r2
 8001ef2:	b933      	cbnz	r3, 8001f02 <_free_r+0x2e>
 8001ef4:	6063      	str	r3, [r4, #4]
 8001ef6:	6014      	str	r4, [r2, #0]
 8001ef8:	4628      	mov	r0, r5
 8001efa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001efe:	f7ff bfe8 	b.w	8001ed2 <__malloc_unlock>
 8001f02:	42a3      	cmp	r3, r4
 8001f04:	d90b      	bls.n	8001f1e <_free_r+0x4a>
 8001f06:	6821      	ldr	r1, [r4, #0]
 8001f08:	1862      	adds	r2, r4, r1
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	bf01      	itttt	eq
 8001f0e:	681a      	ldreq	r2, [r3, #0]
 8001f10:	685b      	ldreq	r3, [r3, #4]
 8001f12:	1852      	addeq	r2, r2, r1
 8001f14:	6022      	streq	r2, [r4, #0]
 8001f16:	6063      	str	r3, [r4, #4]
 8001f18:	6004      	str	r4, [r0, #0]
 8001f1a:	e7ed      	b.n	8001ef8 <_free_r+0x24>
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	685a      	ldr	r2, [r3, #4]
 8001f20:	b10a      	cbz	r2, 8001f26 <_free_r+0x52>
 8001f22:	42a2      	cmp	r2, r4
 8001f24:	d9fa      	bls.n	8001f1c <_free_r+0x48>
 8001f26:	6819      	ldr	r1, [r3, #0]
 8001f28:	1858      	adds	r0, r3, r1
 8001f2a:	42a0      	cmp	r0, r4
 8001f2c:	d10b      	bne.n	8001f46 <_free_r+0x72>
 8001f2e:	6820      	ldr	r0, [r4, #0]
 8001f30:	4401      	add	r1, r0
 8001f32:	1858      	adds	r0, r3, r1
 8001f34:	4282      	cmp	r2, r0
 8001f36:	6019      	str	r1, [r3, #0]
 8001f38:	d1de      	bne.n	8001ef8 <_free_r+0x24>
 8001f3a:	6810      	ldr	r0, [r2, #0]
 8001f3c:	6852      	ldr	r2, [r2, #4]
 8001f3e:	4401      	add	r1, r0
 8001f40:	6019      	str	r1, [r3, #0]
 8001f42:	605a      	str	r2, [r3, #4]
 8001f44:	e7d8      	b.n	8001ef8 <_free_r+0x24>
 8001f46:	d902      	bls.n	8001f4e <_free_r+0x7a>
 8001f48:	230c      	movs	r3, #12
 8001f4a:	602b      	str	r3, [r5, #0]
 8001f4c:	e7d4      	b.n	8001ef8 <_free_r+0x24>
 8001f4e:	6820      	ldr	r0, [r4, #0]
 8001f50:	1821      	adds	r1, r4, r0
 8001f52:	428a      	cmp	r2, r1
 8001f54:	bf01      	itttt	eq
 8001f56:	6811      	ldreq	r1, [r2, #0]
 8001f58:	6852      	ldreq	r2, [r2, #4]
 8001f5a:	1809      	addeq	r1, r1, r0
 8001f5c:	6021      	streq	r1, [r4, #0]
 8001f5e:	6062      	str	r2, [r4, #4]
 8001f60:	605c      	str	r4, [r3, #4]
 8001f62:	e7c9      	b.n	8001ef8 <_free_r+0x24>
 8001f64:	bd38      	pop	{r3, r4, r5, pc}
 8001f66:	bf00      	nop
 8001f68:	20000090 	.word	0x20000090

08001f6c <_read_r>:
 8001f6c:	b538      	push	{r3, r4, r5, lr}
 8001f6e:	4605      	mov	r5, r0
 8001f70:	4608      	mov	r0, r1
 8001f72:	4611      	mov	r1, r2
 8001f74:	2200      	movs	r2, #0
 8001f76:	4c05      	ldr	r4, [pc, #20]	; (8001f8c <_read_r+0x20>)
 8001f78:	6022      	str	r2, [r4, #0]
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	f7ff f81c 	bl	8000fb8 <_read>
 8001f80:	1c43      	adds	r3, r0, #1
 8001f82:	d102      	bne.n	8001f8a <_read_r+0x1e>
 8001f84:	6823      	ldr	r3, [r4, #0]
 8001f86:	b103      	cbz	r3, 8001f8a <_read_r+0x1e>
 8001f88:	602b      	str	r3, [r5, #0]
 8001f8a:	bd38      	pop	{r3, r4, r5, pc}
 8001f8c:	20000130 	.word	0x20000130

08001f90 <_fstat_r>:
 8001f90:	b538      	push	{r3, r4, r5, lr}
 8001f92:	2300      	movs	r3, #0
 8001f94:	4c06      	ldr	r4, [pc, #24]	; (8001fb0 <_fstat_r+0x20>)
 8001f96:	4605      	mov	r5, r0
 8001f98:	4608      	mov	r0, r1
 8001f9a:	4611      	mov	r1, r2
 8001f9c:	6023      	str	r3, [r4, #0]
 8001f9e:	f7ff f836 	bl	800100e <_fstat>
 8001fa2:	1c43      	adds	r3, r0, #1
 8001fa4:	d102      	bne.n	8001fac <_fstat_r+0x1c>
 8001fa6:	6823      	ldr	r3, [r4, #0]
 8001fa8:	b103      	cbz	r3, 8001fac <_fstat_r+0x1c>
 8001faa:	602b      	str	r3, [r5, #0]
 8001fac:	bd38      	pop	{r3, r4, r5, pc}
 8001fae:	bf00      	nop
 8001fb0:	20000130 	.word	0x20000130

08001fb4 <_isatty_r>:
 8001fb4:	b538      	push	{r3, r4, r5, lr}
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	4c05      	ldr	r4, [pc, #20]	; (8001fd0 <_isatty_r+0x1c>)
 8001fba:	4605      	mov	r5, r0
 8001fbc:	4608      	mov	r0, r1
 8001fbe:	6023      	str	r3, [r4, #0]
 8001fc0:	f7ff f82a 	bl	8001018 <_isatty>
 8001fc4:	1c43      	adds	r3, r0, #1
 8001fc6:	d102      	bne.n	8001fce <_isatty_r+0x1a>
 8001fc8:	6823      	ldr	r3, [r4, #0]
 8001fca:	b103      	cbz	r3, 8001fce <_isatty_r+0x1a>
 8001fcc:	602b      	str	r3, [r5, #0]
 8001fce:	bd38      	pop	{r3, r4, r5, pc}
 8001fd0:	20000130 	.word	0x20000130

08001fd4 <_init>:
 8001fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fd6:	bf00      	nop
 8001fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fda:	bc08      	pop	{r3}
 8001fdc:	469e      	mov	lr, r3
 8001fde:	4770      	bx	lr

08001fe0 <_fini>:
 8001fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fe2:	bf00      	nop
 8001fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fe6:	bc08      	pop	{r3}
 8001fe8:	469e      	mov	lr, r3
 8001fea:	4770      	bx	lr
