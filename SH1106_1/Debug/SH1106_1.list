
SH1106_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027ac  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001180  080028b8  080028b8  000128b8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003a38  08003a38  00013a38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003a3c  08003a3c  00013a3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000d50  20000000  08003a40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000004c4  20000d50  08004790  00020d50  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20001214  08004790  00021214  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020d50  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001621a  00000000  00000000  00020d79  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002d91  00000000  00000000  00036f93  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006f41  00000000  00000000  00039d24  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000008c8  00000000  00000000  00040c68  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000cd8  00000000  00000000  00041530  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000061f8  00000000  00000000  00042208  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002db6  00000000  00000000  00048400  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004b1b6  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001c10  00000000  00000000  0004b234  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000d50 	.word	0x20000d50
 8000128:	00000000 	.word	0x00000000
 800012c:	080028a0 	.word	0x080028a0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000d54 	.word	0x20000d54
 8000148:	080028a0 	.word	0x080028a0

0800014c <_draw_circle_8>:
								      1-white
											0-black	
 * @retvalue   :None
******************************************************************************/  
static void _draw_circle_8(u8 xc, u8 yc, u8 x, u8 y, u8 color)
{
 800014c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000150:	4690      	mov	r8, r2
 8000152:	4604      	mov	r4, r0
 8000154:	469a      	mov	sl, r3
 8000156:	460d      	mov	r5, r1
 8000158:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
	OLED_Set_Pixel(xc + x, yc + y, color);
 800015c:	eb01 0903 	add.w	r9, r1, r3
 8000160:	eb00 0b02 	add.w	fp, r0, r2
 8000164:	fa5f fb8b 	uxtb.w	fp, fp
 8000168:	fa5f f989 	uxtb.w	r9, r9
 800016c:	4632      	mov	r2, r6
 800016e:	4649      	mov	r1, r9
 8000170:	4658      	mov	r0, fp
	OLED_Set_Pixel(xc - x, yc + y, color);
 8000172:	eba4 0708 	sub.w	r7, r4, r8
	OLED_Set_Pixel(xc + x, yc + y, color);
 8000176:	f001 f88d 	bl	8001294 <OLED_Set_Pixel>
	OLED_Set_Pixel(xc - x, yc + y, color);
 800017a:	b2ff      	uxtb	r7, r7
 800017c:	4649      	mov	r1, r9
	OLED_Set_Pixel(xc + x, yc - y, color);
 800017e:	eba5 090a 	sub.w	r9, r5, sl
	OLED_Set_Pixel(xc - x, yc + y, color);
 8000182:	4632      	mov	r2, r6
 8000184:	4638      	mov	r0, r7
	OLED_Set_Pixel(xc + x, yc - y, color);
 8000186:	fa5f f989 	uxtb.w	r9, r9
	OLED_Set_Pixel(xc - x, yc + y, color);
 800018a:	f001 f883 	bl	8001294 <OLED_Set_Pixel>
	OLED_Set_Pixel(xc + x, yc - y, color);
 800018e:	4632      	mov	r2, r6
 8000190:	4649      	mov	r1, r9
 8000192:	4658      	mov	r0, fp
 8000194:	f001 f87e 	bl	8001294 <OLED_Set_Pixel>
	OLED_Set_Pixel(xc - x, yc - y, color);
 8000198:	4649      	mov	r1, r9
 800019a:	4638      	mov	r0, r7
	OLED_Set_Pixel(xc + y, yc + x, color);
 800019c:	eb08 0905 	add.w	r9, r8, r5
 80001a0:	eb04 070a 	add.w	r7, r4, sl
	OLED_Set_Pixel(xc - x, yc - y, color);
 80001a4:	4632      	mov	r2, r6
	OLED_Set_Pixel(xc + y, yc + x, color);
 80001a6:	b2ff      	uxtb	r7, r7
 80001a8:	fa5f f989 	uxtb.w	r9, r9
	OLED_Set_Pixel(xc - y, yc + x, color);
 80001ac:	eba4 040a 	sub.w	r4, r4, sl
	OLED_Set_Pixel(xc - x, yc - y, color);
 80001b0:	f001 f870 	bl	8001294 <OLED_Set_Pixel>
	OLED_Set_Pixel(xc - y, yc + x, color);
 80001b4:	b2e4      	uxtb	r4, r4
	OLED_Set_Pixel(xc + y, yc + x, color);
 80001b6:	4632      	mov	r2, r6
 80001b8:	4649      	mov	r1, r9
 80001ba:	4638      	mov	r0, r7
	OLED_Set_Pixel(xc + y, yc - x, color);
 80001bc:	eba5 0508 	sub.w	r5, r5, r8
	OLED_Set_Pixel(xc + y, yc + x, color);
 80001c0:	f001 f868 	bl	8001294 <OLED_Set_Pixel>
	OLED_Set_Pixel(xc + y, yc - x, color);
 80001c4:	b2ed      	uxtb	r5, r5
	OLED_Set_Pixel(xc - y, yc + x, color);
 80001c6:	4632      	mov	r2, r6
 80001c8:	4649      	mov	r1, r9
 80001ca:	4620      	mov	r0, r4
 80001cc:	f001 f862 	bl	8001294 <OLED_Set_Pixel>
	OLED_Set_Pixel(xc + y, yc - x, color);
 80001d0:	4632      	mov	r2, r6
 80001d2:	4629      	mov	r1, r5
 80001d4:	4638      	mov	r0, r7
 80001d6:	f001 f85d 	bl	8001294 <OLED_Set_Pixel>
	OLED_Set_Pixel(xc - y, yc - x, color);
 80001da:	4632      	mov	r2, r6
 80001dc:	4629      	mov	r1, r5
 80001de:	4620      	mov	r0, r4
}
 80001e0:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	OLED_Set_Pixel(xc - y, yc - x, color);
 80001e4:	f001 b856 	b.w	8001294 <OLED_Set_Pixel>

080001e8 <GUI_Fill>:
{  	
 80001e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80001ec:	4681      	mov	r9, r0
 80001ee:	4688      	mov	r8, r1
	for(i=0;i<height;i++)
 80001f0:	f04f 0b00 	mov.w	fp, #0
	u8 width=ex-sx+1; 		//得到填充的宽度
 80001f4:	1a15      	subs	r5, r2, r0
	u8 height=ey-sy+1;		//高度
 80001f6:	1a5e      	subs	r6, r3, r1
	u8 width=ex-sx+1; 		//得到填充的宽度
 80001f8:	3501      	adds	r5, #1
	u8 height=ey-sy+1;		//高度
 80001fa:	3601      	adds	r6, #1
{  	
 80001fc:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
	u8 width=ex-sx+1; 		//得到填充的宽度
 8000200:	b2ed      	uxtb	r5, r5
	u8 height=ey-sy+1;		//高度
 8000202:	b2f6      	uxtb	r6, r6
 8000204:	fa5f f18b 	uxtb.w	r1, fp
	for(i=0;i<height;i++)
 8000208:	428e      	cmp	r6, r1
 800020a:	d910      	bls.n	800022e <GUI_Fill+0x46>
				OLED_Set_Pixel(sx+j, sy+i,color);
 800020c:	4441      	add	r1, r8
 800020e:	2700      	movs	r7, #0
 8000210:	b2cc      	uxtb	r4, r1
 8000212:	e006      	b.n	8000222 <GUI_Fill+0x3a>
 8000214:	4448      	add	r0, r9
 8000216:	4652      	mov	r2, sl
 8000218:	4621      	mov	r1, r4
 800021a:	b2c0      	uxtb	r0, r0
 800021c:	f001 f83a 	bl	8001294 <OLED_Set_Pixel>
 8000220:	3701      	adds	r7, #1
 8000222:	b2f8      	uxtb	r0, r7
		for(j=0;j<width;j++)
 8000224:	4285      	cmp	r5, r0
 8000226:	d8f5      	bhi.n	8000214 <GUI_Fill+0x2c>
 8000228:	f10b 0b01 	add.w	fp, fp, #1
 800022c:	e7ea      	b.n	8000204 <GUI_Fill+0x1c>
}
 800022e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	OLED_Display();
 8000232:	f001 b845 	b.w	80012c0 <OLED_Display>

08000236 <GUI_DrawLine>:
{
 8000236:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800023a:	b085      	sub	sp, #20
 800023c:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
	delta_x=x2-x1; //计算坐标增量 
 8000240:	4682      	mov	sl, r0
{
 8000242:	9401      	str	r4, [sp, #4]
	delta_x=x2-x1; //计算坐标增量 
 8000244:	1a14      	subs	r4, r2, r0
	if(delta_x>0)incx=1; //设置单步方向 
 8000246:	2c00      	cmp	r4, #0
	delta_y=y2-y1; 
 8000248:	468b      	mov	fp, r1
 800024a:	eba3 0501 	sub.w	r5, r3, r1
	if(delta_x>0)incx=1; //设置单步方向 
 800024e:	dc1d      	bgt.n	800028c <GUI_DrawLine+0x56>
	else if(delta_x==0)incx=0;//垂直线 
 8000250:	d01e      	beq.n	8000290 <GUI_DrawLine+0x5a>
	else {incx=-1;delta_x=-delta_x;} 
 8000252:	f04f 33ff 	mov.w	r3, #4294967295
 8000256:	4264      	negs	r4, r4
	if(delta_y>0)incy=1; 
 8000258:	2d00      	cmp	r5, #0
 800025a:	dc1b      	bgt.n	8000294 <GUI_DrawLine+0x5e>
	else if(delta_y==0)incy=0;//水平线 
 800025c:	d01c      	beq.n	8000298 <GUI_DrawLine+0x62>
	else{incy=-1;delta_y=-delta_y;} 
 800025e:	f04f 32ff 	mov.w	r2, #4294967295
 8000262:	426d      	negs	r5, r5
	if(delta_y>0)incy=1; 
 8000264:	9200      	str	r2, [sp, #0]
	for(t=0;t<=distance+1;t++ )//画线输出 
 8000266:	2600      	movs	r6, #0
 8000268:	42ac      	cmp	r4, r5
 800026a:	46a1      	mov	r9, r4
 800026c:	bfb8      	it	lt
 800026e:	46a9      	movlt	r9, r5
	int xerr=0,yerr=0,delta_x,delta_y,distance; 
 8000270:	46b0      	mov	r8, r6
 8000272:	4637      	mov	r7, r6
	for(t=0;t<=distance+1;t++ )//画线输出 
 8000274:	f109 0201 	add.w	r2, r9, #1
 8000278:	9202      	str	r2, [sp, #8]
 800027a:	9902      	ldr	r1, [sp, #8]
 800027c:	b2b2      	uxth	r2, r6
 800027e:	428a      	cmp	r2, r1
 8000280:	dd0c      	ble.n	800029c <GUI_DrawLine+0x66>
} 
 8000282:	b005      	add	sp, #20
 8000284:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	OLED_Display();
 8000288:	f001 b81a 	b.w	80012c0 <OLED_Display>
	if(delta_x>0)incx=1; //设置单步方向 
 800028c:	2301      	movs	r3, #1
 800028e:	e7e3      	b.n	8000258 <GUI_DrawLine+0x22>
	else if(delta_x==0)incx=0;//垂直线 
 8000290:	4623      	mov	r3, r4
 8000292:	e7e1      	b.n	8000258 <GUI_DrawLine+0x22>
	if(delta_y>0)incy=1; 
 8000294:	2201      	movs	r2, #1
 8000296:	e7e5      	b.n	8000264 <GUI_DrawLine+0x2e>
	else if(delta_y==0)incy=0;//水平线 
 8000298:	9500      	str	r5, [sp, #0]
 800029a:	e7e4      	b.n	8000266 <GUI_DrawLine+0x30>
		OLED_Set_Pixel(uRow,uCol,color);
 800029c:	9a01      	ldr	r2, [sp, #4]
 800029e:	fa5f f18b 	uxtb.w	r1, fp
 80002a2:	fa5f f08a 	uxtb.w	r0, sl
 80002a6:	9303      	str	r3, [sp, #12]
 80002a8:	f000 fff4 	bl	8001294 <OLED_Set_Pixel>
		xerr+=delta_x ; 
 80002ac:	4427      	add	r7, r4
		if(xerr>distance) 
 80002ae:	9b03      	ldr	r3, [sp, #12]
 80002b0:	454f      	cmp	r7, r9
		yerr+=delta_y ; 
 80002b2:	44a8      	add	r8, r5
			xerr-=distance; 
 80002b4:	bfc4      	itt	gt
 80002b6:	eba7 0709 	subgt.w	r7, r7, r9
			uRow+=incx; 
 80002ba:	449a      	addgt	sl, r3
		if(yerr>distance) 
 80002bc:	45c8      	cmp	r8, r9
			uCol+=incy; 
 80002be:	bfc2      	ittt	gt
 80002c0:	9a00      	ldrgt	r2, [sp, #0]
			yerr-=distance; 
 80002c2:	eba8 0809 	subgt.w	r8, r8, r9
			uCol+=incy; 
 80002c6:	4493      	addgt	fp, r2
 80002c8:	3601      	adds	r6, #1
 80002ca:	e7d6      	b.n	800027a <GUI_DrawLine+0x44>

080002cc <GUI_DrawRectangle>:
{
 80002cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80002d0:	461c      	mov	r4, r3
 80002d2:	4607      	mov	r7, r0
 80002d4:	460e      	mov	r6, r1
 80002d6:	4690      	mov	r8, r2
 80002d8:	f89d 5020 	ldrb.w	r5, [sp, #32]
	GUI_DrawLine(x1,y1,x2,y1,color);
 80002dc:	460b      	mov	r3, r1
 80002de:	9500      	str	r5, [sp, #0]
 80002e0:	f7ff ffa9 	bl	8000236 <GUI_DrawLine>
	GUI_DrawLine(x1,y1,x1,y2,color);
 80002e4:	4623      	mov	r3, r4
 80002e6:	463a      	mov	r2, r7
 80002e8:	4631      	mov	r1, r6
 80002ea:	4638      	mov	r0, r7
 80002ec:	9500      	str	r5, [sp, #0]
 80002ee:	f7ff ffa2 	bl	8000236 <GUI_DrawLine>
	GUI_DrawLine(x1,y2,x2,y2,color);
 80002f2:	4623      	mov	r3, r4
 80002f4:	4642      	mov	r2, r8
 80002f6:	4621      	mov	r1, r4
 80002f8:	4638      	mov	r0, r7
 80002fa:	9500      	str	r5, [sp, #0]
 80002fc:	f7ff ff9b 	bl	8000236 <GUI_DrawLine>
	GUI_DrawLine(x2,y1,x2,y2,color);
 8000300:	4623      	mov	r3, r4
 8000302:	4642      	mov	r2, r8
 8000304:	4631      	mov	r1, r6
 8000306:	4640      	mov	r0, r8
 8000308:	9508      	str	r5, [sp, #32]
}  
 800030a:	b002      	add	sp, #8
 800030c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	GUI_DrawLine(x2,y1,x2,y2,color);
 8000310:	f7ff bf91 	b.w	8000236 <GUI_DrawLine>

08000314 <GUI_FillRectangle>:
{
 8000314:	b410      	push	{r4}
 8000316:	f89d 4004 	ldrb.w	r4, [sp, #4]
	GUI_Fill(x1,y1,x2,y2,color);
 800031a:	9401      	str	r4, [sp, #4]
}
 800031c:	bc10      	pop	{r4}
	GUI_Fill(x1,y1,x2,y2,color);
 800031e:	f7ff bf63 	b.w	80001e8 <GUI_Fill>

08000322 <GUI_DrawCircle>:
								      1-white
											0-black	
 * @retvalue   :None
******************************************************************************/  
void GUI_DrawCircle(u8 xc, u8 yc, u8 color, u8 r)
{
 8000322:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8000326:	4606      	mov	r6, r0
 8000328:	460f      	mov	r7, r1
 800032a:	4690      	mov	r8, r2
 800032c:	461d      	mov	r5, r3
	int x = 0, y = r,d;
 800032e:	f04f 0900 	mov.w	r9, #0
	d = 3 - 2 * r;
 8000332:	005c      	lsls	r4, r3, #1
 8000334:	f1c4 0403 	rsb	r4, r4, #3
	while (x <= y) 
	{
		_draw_circle_8(xc, yc, x, y, color);
 8000338:	b2eb      	uxtb	r3, r5
 800033a:	fa5f f289 	uxtb.w	r2, r9
 800033e:	f8cd 8000 	str.w	r8, [sp]
 8000342:	4639      	mov	r1, r7
 8000344:	4630      	mov	r0, r6
 8000346:	f7ff ff01 	bl	800014c <_draw_circle_8>
		if (d < 0) 
 800034a:	2c00      	cmp	r4, #0
		{
				d = d + 4 * x + 6;
		}
		else 
		{
				d = d + 4 * (x - y) + 10;
 800034c:	bfa9      	itett	ge
 800034e:	eba9 0305 	subge.w	r3, r9, r5
				d = d + 4 * x + 6;
 8000352:	eb04 0489 	addlt.w	r4, r4, r9, lsl #2
				d = d + 4 * (x - y) + 10;
 8000356:	eb04 0483 	addge.w	r4, r4, r3, lsl #2
				y--;
 800035a:	f105 35ff 	addge.w	r5, r5, #4294967295
		}
		x++;
 800035e:	f109 0901 	add.w	r9, r9, #1
				d = d + 4 * x + 6;
 8000362:	bfb4      	ite	lt
 8000364:	3406      	addlt	r4, #6
				d = d + 4 * (x - y) + 10;
 8000366:	340a      	addge	r4, #10
	while (x <= y) 
 8000368:	454d      	cmp	r5, r9
 800036a:	dae5      	bge.n	8000338 <GUI_DrawCircle+0x16>
	}
	OLED_Display();
}
 800036c:	b003      	add	sp, #12
 800036e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	OLED_Display();
 8000372:	f000 bfa5 	b.w	80012c0 <OLED_Display>

08000376 <GUI_FillCircle>:
								      1-white
											0-black	
 * @retvalue   :None
******************************************************************************/  
void GUI_FillCircle(u8 xc, u8 yc, u8 color, u8 r)
{
 8000376:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800037a:	4680      	mov	r8, r0
 800037c:	4689      	mov	r9, r1
 800037e:	4692      	mov	sl, r2
 8000380:	461e      	mov	r6, r3
	int x = 0, y = r, yi, d;
 8000382:	2500      	movs	r5, #0
	d = 3 - 2 * r;
 8000384:	005c      	lsls	r4, r3, #1
 8000386:	f1c4 0403 	rsb	r4, r4, #3
{
 800038a:	462f      	mov	r7, r5
	while (x <= y) 
	{
			for (yi = x; yi <= y; yi++)
			{
				_draw_circle_8(xc, yc, x, yi, color);
 800038c:	fa5f fb85 	uxtb.w	fp, r5
 8000390:	e008      	b.n	80003a4 <GUI_FillCircle+0x2e>
 8000392:	b2fb      	uxtb	r3, r7
 8000394:	f8cd a000 	str.w	sl, [sp]
 8000398:	465a      	mov	r2, fp
 800039a:	4649      	mov	r1, r9
 800039c:	4640      	mov	r0, r8
 800039e:	f7ff fed5 	bl	800014c <_draw_circle_8>
			for (yi = x; yi <= y; yi++)
 80003a2:	3701      	adds	r7, #1
 80003a4:	42b7      	cmp	r7, r6
 80003a6:	ddf4      	ble.n	8000392 <GUI_FillCircle+0x1c>
			}
			if (d < 0) 
 80003a8:	2c00      	cmp	r4, #0
			{
				d = d + 4 * x + 6;
			} 
			else 
			{
				d = d + 4 * (x - y) + 10;
 80003aa:	bfa9      	itett	ge
 80003ac:	1bab      	subge	r3, r5, r6
				d = d + 4 * x + 6;
 80003ae:	eb04 0485 	addlt.w	r4, r4, r5, lsl #2
				d = d + 4 * (x - y) + 10;
 80003b2:	eb04 0483 	addge.w	r4, r4, r3, lsl #2
				y--;
 80003b6:	f106 36ff 	addge.w	r6, r6, #4294967295
			}
			x++;
 80003ba:	f105 0501 	add.w	r5, r5, #1
				d = d + 4 * x + 6;
 80003be:	bfb4      	ite	lt
 80003c0:	3406      	addlt	r4, #6
				d = d + 4 * (x - y) + 10;
 80003c2:	340a      	addge	r4, #10
	while (x <= y) 
 80003c4:	42ae      	cmp	r6, r5
 80003c6:	dae0      	bge.n	800038a <GUI_FillCircle+0x14>
	}
	OLED_Display();
}
 80003c8:	b003      	add	sp, #12
 80003ca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	OLED_Display();
 80003ce:	f000 bf77 	b.w	80012c0 <OLED_Display>

080003d2 <GUI_DrawTriangel>:
								      1-white
											0-black	
 * @retvalue   :None
***********************************************************************************/ 
void GUI_DrawTriangel(u8 x0,u8 y0,u8 x1,u8 y1,u8 x2,u8 y2,u8 color)
{
 80003d2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80003d6:	4691      	mov	r9, r2
 80003d8:	469a      	mov	sl, r3
 80003da:	4607      	mov	r7, r0
 80003dc:	4688      	mov	r8, r1
 80003de:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
 80003e2:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
 80003e6:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
	GUI_DrawLine(x0,y0,x1,y1,color);
 80003ea:	9400      	str	r4, [sp, #0]
 80003ec:	f7ff ff23 	bl	8000236 <GUI_DrawLine>
	GUI_DrawLine(x1,y1,x2,y2,color);
 80003f0:	4633      	mov	r3, r6
 80003f2:	462a      	mov	r2, r5
 80003f4:	4651      	mov	r1, sl
 80003f6:	4648      	mov	r0, r9
 80003f8:	9400      	str	r4, [sp, #0]
 80003fa:	f7ff ff1c 	bl	8000236 <GUI_DrawLine>
	GUI_DrawLine(x2,y2,x0,y0,color);
 80003fe:	4643      	mov	r3, r8
 8000400:	463a      	mov	r2, r7
 8000402:	4631      	mov	r1, r6
 8000404:	4628      	mov	r0, r5
 8000406:	940a      	str	r4, [sp, #40]	; 0x28
}
 8000408:	b002      	add	sp, #8
 800040a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	GUI_DrawLine(x2,y2,x0,y0,color);
 800040e:	f7ff bf12 	b.w	8000236 <GUI_DrawLine>

08000412 <GUI_FillTriangel>:
								      1-white
											0-black	
 * @retvalue   :None
******************************************************************************/ 
void GUI_FillTriangel(u8 x0,u8 y0,u8 x1,u8 y1,u8 x2,u8 y2,u8 color)
{
 8000412:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000416:	461d      	mov	r5, r3
 8000418:	b08b      	sub	sp, #44	; 0x2c
 800041a:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
	u8 a, b, y, last;
	int dx01, dy01, dx02, dy02, dx12, dy12;
	long sa = 0;
	long sb = 0;
 	if (y0 > y1) 
 800041e:	42a9      	cmp	r1, r5
{
 8000420:	4681      	mov	r9, r0
 8000422:	460f      	mov	r7, r1
 8000424:	4690      	mov	r8, r2
 8000426:	f89d 6050 	ldrb.w	r6, [sp, #80]	; 0x50
 800042a:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 800042e:	9301      	str	r3, [sp, #4]
 	if (y0 > y1) 
 8000430:	d978      	bls.n	8000524 <GUI_FillTriangel+0x112>
	{
    _swap(&y0,&y1); 
		_swap(&x0,&x1);
 	}
 	if (y1 > y2) 
 8000432:	42a1      	cmp	r1, r4
 8000434:	f200 8082 	bhi.w	800053c <GUI_FillTriangel+0x12a>
	{
    _swap(&y2,&y1); 
		_swap(&x2,&x1);
 	}
  if (y0 > y1) 
 8000438:	42a9      	cmp	r1, r5
 800043a:	d305      	bcc.n	8000448 <GUI_FillTriangel+0x36>
 800043c:	463b      	mov	r3, r7
 800043e:	462f      	mov	r7, r5
 8000440:	461d      	mov	r5, r3
 8000442:	464b      	mov	r3, r9
 8000444:	46c1      	mov	r9, r8
 8000446:	4698      	mov	r8, r3
	{
    _swap(&y0,&y1); 
		_swap(&x0,&x1);
  }
	if(y0 == y2) 
 8000448:	42a7      	cmp	r7, r4
 800044a:	d119      	bne.n	8000480 <GUI_FillTriangel+0x6e>
	{ 
		a = b = x0;
		if(x1 < a)
 800044c:	45c1      	cmp	r9, r8
 800044e:	bf9e      	ittt	ls
 8000450:	4643      	movls	r3, r8
 8000452:	46c8      	movls	r8, r9
 8000454:	4699      	movls	r9, r3
    }
    else if(x1 > b)
    {
			b = x1;
    }
    if(x2 < a)
 8000456:	45b0      	cmp	r8, r6
 8000458:	d805      	bhi.n	8000466 <GUI_FillTriangel+0x54>
 800045a:	454e      	cmp	r6, r9
 800045c:	bf38      	it	cc
 800045e:	464e      	movcc	r6, r9
 8000460:	fa5f f986 	uxtb.w	r9, r6
 8000464:	4646      	mov	r6, r8
	for(i=x0;i<=x1;i++)
 8000466:	45b1      	cmp	r9, r6
 8000468:	d202      	bcs.n	8000470 <GUI_FillTriangel+0x5e>
			_swap(&a,&b);
		}
		_draw_h_line(a,b,y,color);
	}
	OLED_Display();
}
 800046a:	b00b      	add	sp, #44	; 0x2c
 800046c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		OLED_Set_Pixel(i, y, color);
 8000470:	4630      	mov	r0, r6
 8000472:	9a01      	ldr	r2, [sp, #4]
 8000474:	4639      	mov	r1, r7
	for(i=x0;i<=x1;i++)
 8000476:	3601      	adds	r6, #1
		OLED_Set_Pixel(i, y, color);
 8000478:	f000 ff0c 	bl	8001294 <OLED_Set_Pixel>
	for(i=x0;i<=x1;i++)
 800047c:	b2f6      	uxtb	r6, r6
 800047e:	e7f2      	b.n	8000466 <GUI_FillTriangel+0x54>
 8000480:	4623      	mov	r3, r4
 8000482:	463c      	mov	r4, r7
 8000484:	461f      	mov	r7, r3
 8000486:	4633      	mov	r3, r6
 8000488:	464e      	mov	r6, r9
  if (y0 > y1) 
 800048a:	4699      	mov	r9, r3
 800048c:	e05e      	b.n	800054c <GUI_FillTriangel+0x13a>
 800048e:	461f      	mov	r7, r3
 8000490:	4643      	mov	r3, r8
 8000492:	46c8      	mov	r8, r9
 8000494:	e7f9      	b.n	800048a <GUI_FillTriangel+0x78>
		a = x0 + sa / dy01;
 8000496:	9a07      	ldr	r2, [sp, #28]
 8000498:	fb93 f9f2 	sdiv	r9, r3, r2
		b = x0 + sb / dy02;
 800049c:	9a02      	ldr	r2, [sp, #8]
		a = x0 + sa / dy01;
 800049e:	44b1      	add	r9, r6
		b = x0 + sb / dy02;
 80004a0:	fb9b faf2 	sdiv	sl, fp, r2
		sa += dx01;
 80004a4:	9a04      	ldr	r2, [sp, #16]
		b = x0 + sb / dy02;
 80004a6:	44b2      	add	sl, r6
		a = x0 + sa / dy01;
 80004a8:	fa5f f989 	uxtb.w	r9, r9
		b = x0 + sb / dy02;
 80004ac:	fa5f fa8a 	uxtb.w	sl, sl
		sa += dx01;
 80004b0:	4413      	add	r3, r2
    sb += dx02;
 80004b2:	9a00      	ldr	r2, [sp, #0]
    if(a > b)
 80004b4:	45d1      	cmp	r9, sl
    sb += dx02;
 80004b6:	4493      	add	fp, r2
    if(a > b)
 80004b8:	d902      	bls.n	80004c0 <GUI_FillTriangel+0xae>
 80004ba:	464a      	mov	r2, r9
 80004bc:	46d1      	mov	r9, sl
 80004be:	4692      	mov	sl, r2
	for(i=x0;i<=x1;i++)
 80004c0:	45ca      	cmp	sl, r9
 80004c2:	d202      	bcs.n	80004ca <GUI_FillTriangel+0xb8>
	for(y=y0; y<=last; y++) 
 80004c4:	3401      	adds	r4, #1
 80004c6:	b2e4      	uxtb	r4, r4
 80004c8:	e05a      	b.n	8000580 <GUI_FillTriangel+0x16e>
		OLED_Set_Pixel(i, y, color);
 80004ca:	4648      	mov	r0, r9
 80004cc:	9a01      	ldr	r2, [sp, #4]
 80004ce:	4621      	mov	r1, r4
	for(i=x0;i<=x1;i++)
 80004d0:	f109 0901 	add.w	r9, r9, #1
 80004d4:	9309      	str	r3, [sp, #36]	; 0x24
 80004d6:	fa5f f989 	uxtb.w	r9, r9
		OLED_Set_Pixel(i, y, color);
 80004da:	f000 fedb 	bl	8001294 <OLED_Set_Pixel>
	for(i=x0;i<=x1;i++)
 80004de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80004e0:	e7ee      	b.n	80004c0 <GUI_FillTriangel+0xae>
		a = x1 + sa / dy12;
 80004e2:	9b08      	ldr	r3, [sp, #32]
 80004e4:	fb9a f5f3 	sdiv	r5, sl, r3
		b = x0 + sb / dy02;
 80004e8:	9b02      	ldr	r3, [sp, #8]
		a = x1 + sa / dy12;
 80004ea:	4445      	add	r5, r8
		b = x0 + sb / dy02;
 80004ec:	fb9b f9f3 	sdiv	r9, fp, r3
		sa += dx12;
 80004f0:	9b03      	ldr	r3, [sp, #12]
		b = x0 + sb / dy02;
 80004f2:	44b1      	add	r9, r6
		a = x1 + sa / dy12;
 80004f4:	b2ed      	uxtb	r5, r5
		b = x0 + sb / dy02;
 80004f6:	fa5f f989 	uxtb.w	r9, r9
		sa += dx12;
 80004fa:	449a      	add	sl, r3
		sb += dx02;
 80004fc:	9b00      	ldr	r3, [sp, #0]
		if(a > b)
 80004fe:	454d      	cmp	r5, r9
		sb += dx02;
 8000500:	449b      	add	fp, r3
		if(a > b)
 8000502:	d902      	bls.n	800050a <GUI_FillTriangel+0xf8>
 8000504:	462b      	mov	r3, r5
 8000506:	464d      	mov	r5, r9
 8000508:	4699      	mov	r9, r3
	for(i=x0;i<=x1;i++)
 800050a:	45a9      	cmp	r9, r5
 800050c:	d202      	bcs.n	8000514 <GUI_FillTriangel+0x102>
	for(; y<=y2; y++) 
 800050e:	3401      	adds	r4, #1
 8000510:	b2e4      	uxtb	r4, r4
 8000512:	e043      	b.n	800059c <GUI_FillTriangel+0x18a>
		OLED_Set_Pixel(i, y, color);
 8000514:	4628      	mov	r0, r5
 8000516:	9a01      	ldr	r2, [sp, #4]
 8000518:	4621      	mov	r1, r4
	for(i=x0;i<=x1;i++)
 800051a:	3501      	adds	r5, #1
		OLED_Set_Pixel(i, y, color);
 800051c:	f000 feba 	bl	8001294 <OLED_Set_Pixel>
	for(i=x0;i<=x1;i++)
 8000520:	b2ed      	uxtb	r5, r5
 8000522:	e7f2      	b.n	800050a <GUI_FillTriangel+0xf8>
 	if (y1 > y2) 
 8000524:	42a5      	cmp	r5, r4
 8000526:	d98f      	bls.n	8000448 <GUI_FillTriangel+0x36>
  if (y0 > y1) 
 8000528:	42a1      	cmp	r1, r4
 800052a:	462b      	mov	r3, r5
 800052c:	460d      	mov	r5, r1
 800052e:	d8ae      	bhi.n	800048e <GUI_FillTriangel+0x7c>
 8000530:	4627      	mov	r7, r4
	*b = tmp;
 8000532:	46b1      	mov	r9, r6
  if (y0 > y1) 
 8000534:	461c      	mov	r4, r3
 8000536:	4680      	mov	r8, r0
 8000538:	4616      	mov	r6, r2
 800053a:	e77f      	b.n	800043c <GUI_FillTriangel+0x2a>
 800053c:	42a5      	cmp	r5, r4
 800053e:	d805      	bhi.n	800054c <GUI_FillTriangel+0x13a>
 8000540:	4623      	mov	r3, r4
 8000542:	462c      	mov	r4, r5
 8000544:	461d      	mov	r5, r3
 8000546:	4633      	mov	r3, r6
	*a = *b;
 8000548:	4646      	mov	r6, r8
	*b = tmp;
 800054a:	4698      	mov	r8, r3
	long sb = 0;
 800054c:	f04f 0b00 	mov.w	fp, #0
	dx01 = x1 - x0;
 8000550:	eba8 0306 	sub.w	r3, r8, r6
 8000554:	9304      	str	r3, [sp, #16]
	dy01 = y1 - y0;
 8000556:	1b2b      	subs	r3, r5, r4
 8000558:	9307      	str	r3, [sp, #28]
	dx02 = x2 - x0;
 800055a:	eba9 0306 	sub.w	r3, r9, r6
 800055e:	9300      	str	r3, [sp, #0]
	dy02 = y2 - y0;
 8000560:	1b3b      	subs	r3, r7, r4
 8000562:	9302      	str	r3, [sp, #8]
	dx12 = x2 - x1;
 8000564:	eba9 0308 	sub.w	r3, r9, r8
 8000568:	9303      	str	r3, [sp, #12]
	dy12 = y2 - y1;
 800056a:	1b7b      	subs	r3, r7, r5
 800056c:	9308      	str	r3, [sp, #32]
	long sa = 0;
 800056e:	465b      	mov	r3, fp
	if(y1 == y2)
 8000570:	42af      	cmp	r7, r5
	dy01 = y1 - y0;
 8000572:	9505      	str	r5, [sp, #20]
		last = y1-1; 
 8000574:	bf18      	it	ne
 8000576:	f105 35ff 	addne.w	r5, r5, #4294967295
	dy01 = y1 - y0;
 800057a:	9406      	str	r4, [sp, #24]
		last = y1-1; 
 800057c:	bf18      	it	ne
 800057e:	b2ed      	uxtbne	r5, r5
	for(y=y0; y<=last; y++) 
 8000580:	42ac      	cmp	r4, r5
 8000582:	d988      	bls.n	8000496 <GUI_FillTriangel+0x84>
	sa = dx12 * (y - y1);
 8000584:	9b05      	ldr	r3, [sp, #20]
 8000586:	eba4 0a03 	sub.w	sl, r4, r3
 800058a:	9b03      	ldr	r3, [sp, #12]
 800058c:	fb03 fa0a 	mul.w	sl, r3, sl
	sb = dx02 * (y - y0);
 8000590:	9b06      	ldr	r3, [sp, #24]
 8000592:	eba4 0b03 	sub.w	fp, r4, r3
 8000596:	9b00      	ldr	r3, [sp, #0]
 8000598:	fb03 fb0b 	mul.w	fp, r3, fp
	for(; y<=y2; y++) 
 800059c:	42bc      	cmp	r4, r7
 800059e:	d9a0      	bls.n	80004e2 <GUI_FillTriangel+0xd0>
}
 80005a0:	b00b      	add	sp, #44	; 0x2c
 80005a2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	OLED_Display();
 80005a6:	f000 be8b 	b.w	80012c0 <OLED_Display>
	...

080005ac <GUI_ShowChar>:
								mode:0-white background and black character
								     1-black background and white character
 * @retvalue   :None
******************************************************************************/ 
void GUI_ShowChar(u8 x,u8 y,u8 chr,u8 Char_Size,u8 mode)
{      	
 80005ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80005b0:	460f      	mov	r7, r1
	  unsigned char c=0,i=0,tmp,j=0;	
		c=chr-' ';//得到偏移后的值			
		if(x>WIDTH-1){x=0;y=y+2;}
 80005b2:	f010 0f80 	tst.w	r0, #128	; 0x80
 80005b6:	bf18      	it	ne
 80005b8:	3702      	addne	r7, #2
{      	
 80005ba:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
 80005be:	4680      	mov	r8, r0
		c=chr-' ';//得到偏移后的值			
 80005c0:	f1a2 0420 	sub.w	r4, r2, #32
		if(x>WIDTH-1){x=0;y=y+2;}
 80005c4:	bf1c      	itt	ne
 80005c6:	b2ff      	uxtbne	r7, r7
 80005c8:	f04f 0800 	movne.w	r8, #0
		if(Char_Size ==16)
 80005cc:	2b10      	cmp	r3, #16
{      	
 80005ce:	9101      	str	r1, [sp, #4]
		c=chr-' ';//得到偏移后的值			
 80005d0:	b2e4      	uxtb	r4, r4
		if(Char_Size ==16)
 80005d2:	d129      	bne.n	8000628 <GUI_ShowChar+0x7c>
				{
					tmp = F8X16[c*16+i];
				}
				else
				{
					tmp = ~(F8X16[c*16+i]);
 80005d4:	2600      	movs	r6, #0
				}
				for(j=0;j<8;j++)
				{
					if(tmp&(0x80>>j))
 80005d6:	f04f 0b80 	mov.w	fp, #128	; 0x80
 80005da:	4a2b      	ldr	r2, [pc, #172]	; (8000688 <GUI_ShowChar+0xdc>)
					tmp = ~(F8X16[c*16+i]);
 80005dc:	eb02 1404 	add.w	r4, r2, r4, lsl #4
			  if(mode)
 80005e0:	9b01      	ldr	r3, [sp, #4]
					tmp = F8X16[c*16+i];
 80005e2:	5da5      	ldrb	r5, [r4, r6]
			  if(mode)
 80005e4:	b1eb      	cbz	r3, 8000622 <GUI_ShowChar+0x76>
					tmp = ~(F8X16[c*16+i]);
 80005e6:	f04f 0a00 	mov.w	sl, #0
 80005ea:	eb07 0906 	add.w	r9, r7, r6
					{
						OLED_Set_Pixel(x+j, y+i,1);
					}
					else
					{
						OLED_Set_Pixel(x+j, y+i,0);
 80005ee:	fa5f f989 	uxtb.w	r9, r9
					if(tmp&(0x80>>j))
 80005f2:	fa4b f20a 	asr.w	r2, fp, sl
 80005f6:	402a      	ands	r2, r5
 80005f8:	eb08 000a 	add.w	r0, r8, sl
						OLED_Set_Pixel(x+j, y+i,1);
 80005fc:	bf18      	it	ne
 80005fe:	2201      	movne	r2, #1
						OLED_Set_Pixel(x+j, y+i,0);
 8000600:	4649      	mov	r1, r9
 8000602:	b2c0      	uxtb	r0, r0
 8000604:	f10a 0a01 	add.w	sl, sl, #1
 8000608:	f000 fe44 	bl	8001294 <OLED_Set_Pixel>
				for(j=0;j<8;j++)
 800060c:	f1ba 0f08 	cmp.w	sl, #8
 8000610:	d1ef      	bne.n	80005f2 <GUI_ShowChar+0x46>
 8000612:	3601      	adds	r6, #1
			for(i=0;i<16;i++)
 8000614:	2e10      	cmp	r6, #16
 8000616:	d1e3      	bne.n	80005e0 <GUI_ShowChar+0x34>
	else
	{
		return;
	}
	OLED_Display();
}
 8000618:	b003      	add	sp, #12
 800061a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	OLED_Display();
 800061e:	f000 be4f 	b.w	80012c0 <OLED_Display>
					tmp = ~(F8X16[c*16+i]);
 8000622:	43ed      	mvns	r5, r5
 8000624:	b2ed      	uxtb	r5, r5
 8000626:	e7de      	b.n	80005e6 <GUI_ShowChar+0x3a>
		else if(Char_Size==8)
 8000628:	2b08      	cmp	r3, #8
 800062a:	d129      	bne.n	8000680 <GUI_ShowChar+0xd4>
 800062c:	2600      	movs	r6, #0
 800062e:	f8df b05c 	ldr.w	fp, [pc, #92]	; 800068c <GUI_ShowChar+0xe0>
 8000632:	00e4      	lsls	r4, r4, #3
				  if(mode)
 8000634:	9b01      	ldr	r3, [sp, #4]
 8000636:	b1eb      	cbz	r3, 8000674 <GUI_ShowChar+0xc8>
						tmp = F6x8[c][i];
 8000638:	eb0b 0306 	add.w	r3, fp, r6
 800063c:	5d1d      	ldrb	r5, [r3, r4]
		else if(Char_Size==8)
 800063e:	f04f 0a00 	mov.w	sl, #0
 8000642:	eb07 0906 	add.w	r9, r7, r6
							OLED_Set_Pixel(x+j, y+i,0);
 8000646:	fa5f f989 	uxtb.w	r9, r9
						if(tmp&(0x80>>j))
 800064a:	2380      	movs	r3, #128	; 0x80
 800064c:	fa43 f20a 	asr.w	r2, r3, sl
 8000650:	402a      	ands	r2, r5
 8000652:	eb08 000a 	add.w	r0, r8, sl
							OLED_Set_Pixel(x+j, y+i,1);
 8000656:	bf18      	it	ne
 8000658:	2201      	movne	r2, #1
							OLED_Set_Pixel(x+j, y+i,0);
 800065a:	4649      	mov	r1, r9
 800065c:	b2c0      	uxtb	r0, r0
 800065e:	f10a 0a01 	add.w	sl, sl, #1
 8000662:	f000 fe17 	bl	8001294 <OLED_Set_Pixel>
					for(j=0;j<8;j++)
 8000666:	f1ba 0f08 	cmp.w	sl, #8
 800066a:	d1ee      	bne.n	800064a <GUI_ShowChar+0x9e>
 800066c:	3601      	adds	r6, #1
				for(i=0;i<8;i++)
 800066e:	2e08      	cmp	r6, #8
 8000670:	d1e0      	bne.n	8000634 <GUI_ShowChar+0x88>
 8000672:	e7d1      	b.n	8000618 <GUI_ShowChar+0x6c>
						tmp = ~(F6x8[c][i]);
 8000674:	eb0b 0306 	add.w	r3, fp, r6
 8000678:	5d1d      	ldrb	r5, [r3, r4]
 800067a:	43ed      	mvns	r5, r5
 800067c:	b2ed      	uxtb	r5, r5
 800067e:	e7de      	b.n	800063e <GUI_ShowChar+0x92>
}
 8000680:	b003      	add	sp, #12
 8000682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000686:	bf00      	nop
 8000688:	08002bc0 	.word	0x08002bc0
 800068c:	080028c8 	.word	0x080028c8

08000690 <GUI_ShowString>:
								mode:0-white background and black character
								     1-black background and white character
 * @retvalue   :None
******************************************************************************/   	  
void GUI_ShowString(u8 x,u8 y,u8 *chr,u8 Char_Size,u8 mode)
{
 8000690:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	unsigned char j=0,csize;
	if(Char_Size == 16)
 8000694:	2b10      	cmp	r3, #16
{
 8000696:	4604      	mov	r4, r0
 8000698:	460d      	mov	r5, r1
 800069a:	4691      	mov	r9, r2
 800069c:	461e      	mov	r6, r3
 800069e:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
	if(Char_Size == 16)
 80006a2:	d109      	bne.n	80006b8 <GUI_ShowString+0x28>
  {
	  csize = Char_Size/2;
 80006a4:	f04f 0808 	mov.w	r8, #8
	{		
		GUI_ShowChar(x,y,chr[j],Char_Size,mode);
		x+=csize;
		if(x>120)
		{
			x=0;
 80006a8:	2700      	movs	r7, #0
	while (chr[j]!='\0')
 80006aa:	b2fb      	uxtb	r3, r7
 80006ac:	f819 2003 	ldrb.w	r2, [r9, r3]
 80006b0:	b93a      	cbnz	r2, 80006c2 <GUI_ShowString+0x32>
			y+=Char_Size;
		}
		j++;
	}
}
 80006b2:	b002      	add	sp, #8
 80006b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  else if(Char_Size == 8)
 80006b8:	2b08      	cmp	r3, #8
 80006ba:	d1fa      	bne.n	80006b2 <GUI_ShowString+0x22>
	  csize = Char_Size/2+2;
 80006bc:	f04f 0806 	mov.w	r8, #6
 80006c0:	e7f2      	b.n	80006a8 <GUI_ShowString+0x18>
		GUI_ShowChar(x,y,chr[j],Char_Size,mode);
 80006c2:	4620      	mov	r0, r4
		x+=csize;
 80006c4:	4444      	add	r4, r8
		GUI_ShowChar(x,y,chr[j],Char_Size,mode);
 80006c6:	4629      	mov	r1, r5
		x+=csize;
 80006c8:	b2e4      	uxtb	r4, r4
		GUI_ShowChar(x,y,chr[j],Char_Size,mode);
 80006ca:	f8cd a000 	str.w	sl, [sp]
 80006ce:	4633      	mov	r3, r6
 80006d0:	f7ff ff6c 	bl	80005ac <GUI_ShowChar>
		if(x>120)
 80006d4:	2c78      	cmp	r4, #120	; 0x78
			y+=Char_Size;
 80006d6:	bf82      	ittt	hi
 80006d8:	19ad      	addhi	r5, r5, r6
 80006da:	b2ed      	uxtbhi	r5, r5
			x=0;
 80006dc:	2400      	movhi	r4, #0
 80006de:	3701      	adds	r7, #1
 80006e0:	e7e3      	b.n	80006aa <GUI_ShowString+0x1a>

080006e2 <GUI_ShowNum>:
								mode:0-white background and black character
								     1-black background and white character
 * @retvalue   :None
******************************************************************************/  			 
void GUI_ShowNum(u8 x,u8 y,u32 num,u8 len,u8 Size,u8 mode)
{         	
 80006e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80006e6:	b087      	sub	sp, #28
 80006e8:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 80006ec:	4698      	mov	r8, r3
 80006ee:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
	u8 t,temp;
	u8 enshow=0,csize;
  if(Size == 16)
 80006f2:	2e10      	cmp	r6, #16
{         	
 80006f4:	4605      	mov	r5, r0
 80006f6:	4689      	mov	r9, r1
 80006f8:	9205      	str	r2, [sp, #20]
 80006fa:	9304      	str	r3, [sp, #16]
  if(Size == 16)
 80006fc:	d004      	beq.n	8000708 <GUI_ShowNum+0x26>
  {
	  csize = Size/2;
	}
  else if(Size == 8)
 80006fe:	2e08      	cmp	r6, #8
 8000700:	d10b      	bne.n	800071a <GUI_ShowNum+0x38>
  {
	  csize = Size/2+2;
 8000702:	f04f 0a06 	mov.w	sl, #6
 8000706:	e001      	b.n	800070c <GUI_ShowNum+0x2a>
	  csize = Size/2;
 8000708:	f04f 0a08 	mov.w	sl, #8
	} 	
	else
	{
		return;
	}
	for(t=0;t<len;t++)
 800070c:	2400      	movs	r4, #0
 800070e:	270a      	movs	r7, #10
	u8 enshow=0,csize;
 8000710:	9403      	str	r4, [sp, #12]
 8000712:	f108 3bff 	add.w	fp, r8, #4294967295
	for(t=0;t<len;t++)
 8000716:	4544      	cmp	r4, r8
 8000718:	d102      	bne.n	8000720 <GUI_ShowNum+0x3e>
			}else enshow=1; 
		 	 
		}
	 	GUI_ShowChar(x+csize*t,y,temp+'0',Size,mode); 
	}
}  
 800071a:	b007      	add	sp, #28
 800071c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	u32 result=1;	 
 8000720:	2201      	movs	r2, #1
 8000722:	ebab 0304 	sub.w	r3, fp, r4
 8000726:	b2db      	uxtb	r3, r3
	while(n--)result*=m;    
 8000728:	3b01      	subs	r3, #1
 800072a:	b2db      	uxtb	r3, r3
 800072c:	2bff      	cmp	r3, #255	; 0xff
 800072e:	d118      	bne.n	8000762 <GUI_ShowNum+0x80>
		temp=(num/mypow(10,len-t-1))%10;
 8000730:	9b05      	ldr	r3, [sp, #20]
		if(enshow==0&&t<(len-1))
 8000732:	9903      	ldr	r1, [sp, #12]
		temp=(num/mypow(10,len-t-1))%10;
 8000734:	fbb3 f2f2 	udiv	r2, r3, r2
 8000738:	fbb2 f3f7 	udiv	r3, r2, r7
 800073c:	fb07 2213 	mls	r2, r7, r3, r2
 8000740:	b2d3      	uxtb	r3, r2
		if(enshow==0&&t<(len-1))
 8000742:	b991      	cbnz	r1, 800076a <GUI_ShowNum+0x88>
 8000744:	45a3      	cmp	fp, r4
 8000746:	dd10      	ble.n	800076a <GUI_ShowNum+0x88>
			if(temp==0)
 8000748:	b96a      	cbnz	r2, 8000766 <GUI_ShowNum+0x84>
				GUI_ShowChar(x+csize*t,y,' ',Size,mode);
 800074a:	9b04      	ldr	r3, [sp, #16]
 800074c:	2220      	movs	r2, #32
 800074e:	9300      	str	r3, [sp, #0]
 8000750:	4633      	mov	r3, r6
	 	GUI_ShowChar(x+csize*t,y,temp+'0',Size,mode); 
 8000752:	4628      	mov	r0, r5
 8000754:	4649      	mov	r1, r9
 8000756:	4455      	add	r5, sl
 8000758:	f7ff ff28 	bl	80005ac <GUI_ShowChar>
 800075c:	3401      	adds	r4, #1
 800075e:	b2ed      	uxtb	r5, r5
 8000760:	e7d9      	b.n	8000716 <GUI_ShowNum+0x34>
	while(n--)result*=m;    
 8000762:	437a      	muls	r2, r7
 8000764:	e7e0      	b.n	8000728 <GUI_ShowNum+0x46>
 8000766:	2201      	movs	r2, #1
 8000768:	9203      	str	r2, [sp, #12]
	 	GUI_ShowChar(x+csize*t,y,temp+'0',Size,mode); 
 800076a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800076e:	9b04      	ldr	r3, [sp, #16]
 8000770:	b2d2      	uxtb	r2, r2
 8000772:	9300      	str	r3, [sp, #0]
 8000774:	4633      	mov	r3, r6
 8000776:	e7ec      	b.n	8000752 <GUI_ShowNum+0x70>

08000778 <GUI_ShowFont16>:
								mode:0-white background and black character
								     1-black background and white character
 * @retvalue   :None
******************************************************************************/ 
void GUI_ShowFont16(u8 x,u8 y,u8 *s,u8 mode)
{
 8000778:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800077c:	2422      	movs	r4, #34	; 0x22
 800077e:	9301      	str	r3, [sp, #4]
	u8 i,j,k,tmp;
	u16 num;
	num = sizeof(cfont16)/sizeof(typFNT_GB16);
  for(i=0;i<num;i++)
	{
		if((cfont16[i].Index[0]==*s)&&(cfont16[i].Index[1]==*(s+1)))
 8000780:	2300      	movs	r3, #0
{
 8000782:	9000      	str	r0, [sp, #0]
 8000784:	468a      	mov	sl, r1
		if((cfont16[i].Index[0]==*s)&&(cfont16[i].Index[1]==*(s+1)))
 8000786:	7810      	ldrb	r0, [r2, #0]
 8000788:	491e      	ldr	r1, [pc, #120]	; (8000804 <GUI_ShowFont16+0x8c>)
 800078a:	fb04 f703 	mul.w	r7, r4, r3
 800078e:	5c7d      	ldrb	r5, [r7, r1]
 8000790:	4285      	cmp	r5, r0
 8000792:	d133      	bne.n	80007fc <GUI_ShowFont16+0x84>
 8000794:	440f      	add	r7, r1
 8000796:	787e      	ldrb	r6, [r7, #1]
 8000798:	7855      	ldrb	r5, [r2, #1]
 800079a:	42ae      	cmp	r6, r5
 800079c:	d12e      	bne.n	80007fc <GUI_ShowFont16+0x84>
 800079e:	2600      	movs	r6, #0
				{
					tmp = ~(cfont16[i].Msk[j]);
				}
				for(k=0;k<8;k++)
				{
					if(tmp&(0x80>>k))
 80007a0:	f04f 0b80 	mov.w	fp, #128	; 0x80
				if(mode)
 80007a4:	9a01      	ldr	r2, [sp, #4]
 80007a6:	19bb      	adds	r3, r7, r6
 80007a8:	b2f5      	uxtb	r5, r6
					tmp = cfont16[i].Msk[j];
 80007aa:	789c      	ldrb	r4, [r3, #2]
				if(mode)
 80007ac:	b31a      	cbz	r2, 80007f6 <GUI_ShowFont16+0x7e>
					{
						OLED_Set_Pixel(x+(j%2)*8+k, y+j/2,1);
					}
					else
					{
						OLED_Set_Pixel(x+(j%2)*8+k, y+j/2,0);
 80007ae:	f04f 0900 	mov.w	r9, #0
 80007b2:	9b00      	ldr	r3, [sp, #0]
 80007b4:	f005 0801 	and.w	r8, r5, #1
 80007b8:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80007bc:	eb0a 0555 	add.w	r5, sl, r5, lsr #1
 80007c0:	fa5f f888 	uxtb.w	r8, r8
 80007c4:	b2ed      	uxtb	r5, r5
					if(tmp&(0x80>>k))
 80007c6:	fa4b f209 	asr.w	r2, fp, r9
 80007ca:	4022      	ands	r2, r4
 80007cc:	eb08 0009 	add.w	r0, r8, r9
						OLED_Set_Pixel(x+(j%2)*8+k, y+j/2,1);
 80007d0:	bf18      	it	ne
 80007d2:	2201      	movne	r2, #1
						OLED_Set_Pixel(x+(j%2)*8+k, y+j/2,0);
 80007d4:	4629      	mov	r1, r5
 80007d6:	b2c0      	uxtb	r0, r0
 80007d8:	f109 0901 	add.w	r9, r9, #1
 80007dc:	f000 fd5a 	bl	8001294 <OLED_Set_Pixel>
				for(k=0;k<8;k++)
 80007e0:	f1b9 0f08 	cmp.w	r9, #8
 80007e4:	d1ef      	bne.n	80007c6 <GUI_ShowFont16+0x4e>
 80007e6:	3601      	adds	r6, #1
			for(j=0;j<32;j++)
 80007e8:	2e20      	cmp	r6, #32
 80007ea:	d1db      	bne.n	80007a4 <GUI_ShowFont16+0x2c>
			}	
			break;
		}	
	}
	OLED_Display();
}
 80007ec:	b003      	add	sp, #12
 80007ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	OLED_Display();
 80007f2:	f000 bd65 	b.w	80012c0 <OLED_Display>
					tmp = ~(cfont16[i].Msk[j]);
 80007f6:	43e4      	mvns	r4, r4
 80007f8:	b2e4      	uxtb	r4, r4
 80007fa:	e7d8      	b.n	80007ae <GUI_ShowFont16+0x36>
 80007fc:	3301      	adds	r3, #1
  for(i=0;i<num;i++)
 80007fe:	2b10      	cmp	r3, #16
 8000800:	d1c3      	bne.n	800078a <GUI_ShowFont16+0x12>
 8000802:	e7f3      	b.n	80007ec <GUI_ShowFont16+0x74>
 8000804:	080031b0 	.word	0x080031b0

08000808 <GUI_ShowFont24>:
								mode:0-white background and black character
								     1-black background and white character
 * @retvalue   :None
******************************************************************************/ 
void GUI_ShowFont24(u8 x,u8 y,u8 *s,u8 mode)
{
 8000808:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800080c:	244a      	movs	r4, #74	; 0x4a
 800080e:	9301      	str	r3, [sp, #4]
	u8 i,j,k,tmp;
	u16 num;
	num = sizeof(cfont24)/sizeof(typFNT_GB24);
  for(i=0;i<num;i++)
	{
		if((cfont24[i].Index[0]==*s)&&(cfont24[i].Index[1]==*(s+1)))
 8000810:	2300      	movs	r3, #0
{
 8000812:	9000      	str	r0, [sp, #0]
 8000814:	468a      	mov	sl, r1
		if((cfont24[i].Index[0]==*s)&&(cfont24[i].Index[1]==*(s+1)))
 8000816:	7810      	ldrb	r0, [r2, #0]
 8000818:	4921      	ldr	r1, [pc, #132]	; (80008a0 <GUI_ShowFont24+0x98>)
 800081a:	fb04 f803 	mul.w	r8, r4, r3
 800081e:	f818 5001 	ldrb.w	r5, [r8, r1]
 8000822:	4285      	cmp	r5, r0
 8000824:	d137      	bne.n	8000896 <GUI_ShowFont24+0x8e>
 8000826:	4488      	add	r8, r1
 8000828:	f898 6001 	ldrb.w	r6, [r8, #1]
 800082c:	7855      	ldrb	r5, [r2, #1]
 800082e:	42ae      	cmp	r6, r5
 8000830:	d131      	bne.n	8000896 <GUI_ShowFont24+0x8e>
 8000832:	2700      	movs	r7, #0
				{
					tmp = ~(cfont24[i].Msk[j]);
				}
				for(k=0;k<8;k++)
				{
					if(tmp&(0x80>>k))
 8000834:	f04f 0b80 	mov.w	fp, #128	; 0x80
				if(mode)
 8000838:	9a01      	ldr	r2, [sp, #4]
 800083a:	eb08 0307 	add.w	r3, r8, r7
 800083e:	b2fc      	uxtb	r4, r7
					tmp = cfont24[i].Msk[j];
 8000840:	789e      	ldrb	r6, [r3, #2]
				if(mode)
 8000842:	b32a      	cbz	r2, 8000890 <GUI_ShowFont24+0x88>
					{
						OLED_Set_Pixel(x+(j%3)*8+k, y+j/3,1);
					}
					else
					{
						OLED_Set_Pixel(x+(j%3)*8+k, y+j/3,0);
 8000844:	2303      	movs	r3, #3
 8000846:	fbb4 f5f3 	udiv	r5, r4, r3
 800084a:	f04f 0900 	mov.w	r9, #0
 800084e:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8000852:	1ae4      	subs	r4, r4, r3
 8000854:	9b00      	ldr	r3, [sp, #0]
 8000856:	4455      	add	r5, sl
 8000858:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800085c:	b2e4      	uxtb	r4, r4
 800085e:	b2ed      	uxtb	r5, r5
					if(tmp&(0x80>>k))
 8000860:	fa4b f209 	asr.w	r2, fp, r9
 8000864:	4032      	ands	r2, r6
 8000866:	eb04 0009 	add.w	r0, r4, r9
						OLED_Set_Pixel(x+(j%3)*8+k, y+j/3,1);
 800086a:	bf18      	it	ne
 800086c:	2201      	movne	r2, #1
						OLED_Set_Pixel(x+(j%3)*8+k, y+j/3,0);
 800086e:	4629      	mov	r1, r5
 8000870:	b2c0      	uxtb	r0, r0
 8000872:	f109 0901 	add.w	r9, r9, #1
 8000876:	f000 fd0d 	bl	8001294 <OLED_Set_Pixel>
				for(k=0;k<8;k++)
 800087a:	f1b9 0f08 	cmp.w	r9, #8
 800087e:	d1ef      	bne.n	8000860 <GUI_ShowFont24+0x58>
 8000880:	3701      	adds	r7, #1
			for(j=0;j<72;j++)
 8000882:	2f48      	cmp	r7, #72	; 0x48
 8000884:	d1d8      	bne.n	8000838 <GUI_ShowFont24+0x30>
			}	
			break;
		}	
	}
	OLED_Display();
}
 8000886:	b003      	add	sp, #12
 8000888:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	OLED_Display();
 800088c:	f000 bd18 	b.w	80012c0 <OLED_Display>
					tmp = ~(cfont24[i].Msk[j]);
 8000890:	43f6      	mvns	r6, r6
 8000892:	b2f6      	uxtb	r6, r6
 8000894:	e7d6      	b.n	8000844 <GUI_ShowFont24+0x3c>
 8000896:	3301      	adds	r3, #1
  for(i=0;i<num;i++)
 8000898:	2b06      	cmp	r3, #6
 800089a:	d1be      	bne.n	800081a <GUI_ShowFont24+0x12>
 800089c:	e7f3      	b.n	8000886 <GUI_ShowFont24+0x7e>
 800089e:	bf00      	nop
 80008a0:	080033d0 	.word	0x080033d0

080008a4 <GUI_ShowFont32>:
								mode:0-white background and black character
								     1-black background and white character
 * @retvalue   :None
******************************************************************************/ 
void GUI_ShowFont32(u8 x,u8 y,u8 *s,u8 mode)
{
 80008a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80008a8:	2482      	movs	r4, #130	; 0x82
 80008aa:	9301      	str	r3, [sp, #4]
	u8 i,j,k,tmp;
	u16 num;
	num = sizeof(cfont32)/sizeof(typFNT_GB32);
  for(i=0;i<num;i++)
	{
		if((cfont32[i].Index[0]==*s)&&(cfont32[i].Index[1]==*(s+1)))
 80008ac:	2300      	movs	r3, #0
{
 80008ae:	9000      	str	r0, [sp, #0]
 80008b0:	468a      	mov	sl, r1
		if((cfont32[i].Index[0]==*s)&&(cfont32[i].Index[1]==*(s+1)))
 80008b2:	7810      	ldrb	r0, [r2, #0]
 80008b4:	491f      	ldr	r1, [pc, #124]	; (8000934 <GUI_ShowFont32+0x90>)
 80008b6:	fb04 f703 	mul.w	r7, r4, r3
 80008ba:	5c7d      	ldrb	r5, [r7, r1]
 80008bc:	4285      	cmp	r5, r0
 80008be:	d134      	bne.n	800092a <GUI_ShowFont32+0x86>
 80008c0:	440f      	add	r7, r1
 80008c2:	787e      	ldrb	r6, [r7, #1]
 80008c4:	7855      	ldrb	r5, [r2, #1]
 80008c6:	42ae      	cmp	r6, r5
 80008c8:	d12f      	bne.n	800092a <GUI_ShowFont32+0x86>
 80008ca:	2600      	movs	r6, #0
				{
					tmp = ~(cfont32[i].Msk[j]);
				}
				for(k=0;k<8;k++)
				{
					if(tmp&(0x80>>k))
 80008cc:	f04f 0b80 	mov.w	fp, #128	; 0x80
			for(j=0;j<128;j++)
 80008d0:	2e80      	cmp	r6, #128	; 0x80
 80008d2:	b2f5      	uxtb	r5, r6
 80008d4:	d104      	bne.n	80008e0 <GUI_ShowFont32+0x3c>
			}	
			break;
		}	
	}
	OLED_Display();
}
 80008d6:	b003      	add	sp, #12
 80008d8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	OLED_Display();
 80008dc:	f000 bcf0 	b.w	80012c0 <OLED_Display>
				if(mode)
 80008e0:	9a01      	ldr	r2, [sp, #4]
 80008e2:	19bb      	adds	r3, r7, r6
					tmp = cfont32[i].Msk[j];
 80008e4:	789c      	ldrb	r4, [r3, #2]
				if(mode)
 80008e6:	b1ea      	cbz	r2, 8000924 <GUI_ShowFont32+0x80>
						OLED_Set_Pixel(x+(j%4)*8+k, y+j/4,0);
 80008e8:	f04f 0900 	mov.w	r9, #0
 80008ec:	9b00      	ldr	r3, [sp, #0]
 80008ee:	f005 0803 	and.w	r8, r5, #3
 80008f2:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80008f6:	eb0a 0595 	add.w	r5, sl, r5, lsr #2
 80008fa:	fa5f f888 	uxtb.w	r8, r8
 80008fe:	b2ed      	uxtb	r5, r5
					if(tmp&(0x80>>k))
 8000900:	fa4b f209 	asr.w	r2, fp, r9
 8000904:	4022      	ands	r2, r4
 8000906:	eb08 0009 	add.w	r0, r8, r9
						OLED_Set_Pixel(x+(j%4)*8+k, y+j/4,1);
 800090a:	bf18      	it	ne
 800090c:	2201      	movne	r2, #1
						OLED_Set_Pixel(x+(j%4)*8+k, y+j/4,0);
 800090e:	4629      	mov	r1, r5
 8000910:	b2c0      	uxtb	r0, r0
 8000912:	f109 0901 	add.w	r9, r9, #1
 8000916:	f000 fcbd 	bl	8001294 <OLED_Set_Pixel>
				for(k=0;k<8;k++)
 800091a:	f1b9 0f08 	cmp.w	r9, #8
 800091e:	d1ef      	bne.n	8000900 <GUI_ShowFont32+0x5c>
 8000920:	3601      	adds	r6, #1
 8000922:	e7d5      	b.n	80008d0 <GUI_ShowFont32+0x2c>
					tmp = ~(cfont32[i].Msk[j]);
 8000924:	43e4      	mvns	r4, r4
 8000926:	b2e4      	uxtb	r4, r4
 8000928:	e7de      	b.n	80008e8 <GUI_ShowFont32+0x44>
 800092a:	3301      	adds	r3, #1
  for(i=0;i<num;i++)
 800092c:	2b06      	cmp	r3, #6
 800092e:	d1c2      	bne.n	80008b6 <GUI_ShowFont32+0x12>
 8000930:	e7d1      	b.n	80008d6 <GUI_ShowFont32+0x32>
 8000932:	bf00      	nop
 8000934:	0800358c 	.word	0x0800358c

08000938 <GUI_ShowCHinese>:
								mode:0-white background and black character
								     1-black background and white character
 * @retvalue   :None
******************************************************************************/	   		   
void GUI_ShowCHinese(u8 x,u8 y,u8 hsize,u8 *str,u8 mode)
{ 
 8000938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800093c:	4604      	mov	r4, r0
 800093e:	460d      	mov	r5, r1
 8000940:	4617      	mov	r7, r2
 8000942:	461e      	mov	r6, r3
 8000944:	f89d 8020 	ldrb.w	r8, [sp, #32]
		else
		{
			return;
		}
		x+=hsize;
		if(x>WIDTH-hsize)
 8000948:	f1c2 0980 	rsb	r9, r2, #128	; 0x80
	while(*str!='\0')
 800094c:	7833      	ldrb	r3, [r6, #0]
 800094e:	b90b      	cbnz	r3, 8000954 <GUI_ShowCHinese+0x1c>
 8000950:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if(hsize == 16)
 8000954:	2f10      	cmp	r7, #16
 8000956:	d10e      	bne.n	8000976 <GUI_ShowCHinese+0x3e>
			GUI_ShowFont16(x,y,str,mode);
 8000958:	4643      	mov	r3, r8
 800095a:	4632      	mov	r2, r6
 800095c:	4629      	mov	r1, r5
 800095e:	4620      	mov	r0, r4
 8000960:	f7ff ff0a 	bl	8000778 <GUI_ShowFont16>
		x+=hsize;
 8000964:	443c      	add	r4, r7
 8000966:	b2e4      	uxtb	r4, r4
		if(x>WIDTH-hsize)
 8000968:	454c      	cmp	r4, r9
		{
			x=0;
			y+=hsize;
 800096a:	bfc2      	ittt	gt
 800096c:	19ed      	addgt	r5, r5, r7
 800096e:	b2ed      	uxtbgt	r5, r5
			x=0;
 8000970:	2400      	movgt	r4, #0
		}
		str+=2;
 8000972:	3602      	adds	r6, #2
 8000974:	e7ea      	b.n	800094c <GUI_ShowCHinese+0x14>
		else if(hsize == 24)
 8000976:	2f18      	cmp	r7, #24
 8000978:	d106      	bne.n	8000988 <GUI_ShowCHinese+0x50>
			GUI_ShowFont24(x,y,str,mode);
 800097a:	4643      	mov	r3, r8
 800097c:	4632      	mov	r2, r6
 800097e:	4629      	mov	r1, r5
 8000980:	4620      	mov	r0, r4
 8000982:	f7ff ff41 	bl	8000808 <GUI_ShowFont24>
 8000986:	e7ed      	b.n	8000964 <GUI_ShowCHinese+0x2c>
		else if(hsize == 32)
 8000988:	2f20      	cmp	r7, #32
 800098a:	d1e1      	bne.n	8000950 <GUI_ShowCHinese+0x18>
			GUI_ShowFont32(x,y,str,mode);
 800098c:	4643      	mov	r3, r8
 800098e:	4632      	mov	r2, r6
 8000990:	4629      	mov	r1, r5
 8000992:	4620      	mov	r0, r4
 8000994:	f7ff ff86 	bl	80008a4 <GUI_ShowFont32>
 8000998:	e7e4      	b.n	8000964 <GUI_ShowCHinese+0x2c>

0800099a <GUI_DrawBMP>:
								mode:0-white background and black character
								     1-black background and white character								
 * @retvalue   :None
******************************************************************************/ 
void GUI_DrawBMP(u8 x,u8 y,u8 width, u8 height, u8 BMP[], u8 mode)
{ 	
 800099a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800099e:	460c      	mov	r4, r1
 u8 i,j,k;
 u8 tmp;
 for(i=0;i<height;i++)
 80009a0:	f04f 0900 	mov.w	r9, #0
				{
					tmp = ~BMP[i*((width+7)/8)+j];
				}
				for(k=0;k<8;k++)
				{
					if(tmp&(0x80>>k))
 80009a4:	f04f 0b80 	mov.w	fp, #128	; 0x80
{ 	
 80009a8:	b085      	sub	sp, #20
 80009aa:	990e      	ldr	r1, [sp, #56]	; 0x38
 80009ac:	4423      	add	r3, r4
 80009ae:	9102      	str	r1, [sp, #8]
 80009b0:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
		for(j=0;j<(width+7)/8;j++)
 80009b4:	3207      	adds	r2, #7
 80009b6:	b2db      	uxtb	r3, r3
{ 	
 80009b8:	9001      	str	r0, [sp, #4]
 80009ba:	9103      	str	r1, [sp, #12]
		for(j=0;j<(width+7)/8;j++)
 80009bc:	ea4f 08e2 	mov.w	r8, r2, asr #3
 80009c0:	9300      	str	r3, [sp, #0]
 for(i=0;i<height;i++)
 80009c2:	9b00      	ldr	r3, [sp, #0]
 80009c4:	429c      	cmp	r4, r3
 80009c6:	d028      	beq.n	8000a1a <GUI_DrawBMP+0x80>
 80009c8:	f04f 0a00 	mov.w	sl, #0
 80009cc:	e01a      	b.n	8000a04 <GUI_DrawBMP+0x6a>
 80009ce:	9b02      	ldr	r3, [sp, #8]
 80009d0:	199a      	adds	r2, r3, r6
		    if(mode)
 80009d2:	9b03      	ldr	r3, [sp, #12]
					tmp = BMP[i*((width+7)/8)+j];
 80009d4:	f812 5009 	ldrb.w	r5, [r2, r9]
		    if(mode)
 80009d8:	b1e3      	cbz	r3, 8000a14 <GUI_DrawBMP+0x7a>
{ 	
 80009da:	2700      	movs	r7, #0
 80009dc:	9b01      	ldr	r3, [sp, #4]
 80009de:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80009e2:	b2f6      	uxtb	r6, r6
					if(tmp&(0x80>>k))
 80009e4:	fa4b f207 	asr.w	r2, fp, r7
 80009e8:	402a      	ands	r2, r5
 80009ea:	eb06 0007 	add.w	r0, r6, r7
					{
						OLED_Set_Pixel(x+j*8+k, y+i,1);
 80009ee:	bf18      	it	ne
 80009f0:	2201      	movne	r2, #1
					}
					else
					{
						OLED_Set_Pixel(x+j*8+k, y+i,0);
 80009f2:	4621      	mov	r1, r4
 80009f4:	b2c0      	uxtb	r0, r0
 80009f6:	3701      	adds	r7, #1
 80009f8:	f000 fc4c 	bl	8001294 <OLED_Set_Pixel>
				for(k=0;k<8;k++)
 80009fc:	2f08      	cmp	r7, #8
 80009fe:	d1f1      	bne.n	80009e4 <GUI_DrawBMP+0x4a>
 8000a00:	f10a 0a01 	add.w	sl, sl, #1
 8000a04:	fa5f f68a 	uxtb.w	r6, sl
		for(j=0;j<(width+7)/8;j++)
 8000a08:	4546      	cmp	r6, r8
 8000a0a:	dbe0      	blt.n	80009ce <GUI_DrawBMP+0x34>
 8000a0c:	3401      	adds	r4, #1
 8000a0e:	b2e4      	uxtb	r4, r4
 8000a10:	44c1      	add	r9, r8
 8000a12:	e7d6      	b.n	80009c2 <GUI_DrawBMP+0x28>
					tmp = ~BMP[i*((width+7)/8)+j];
 8000a14:	43ed      	mvns	r5, r5
 8000a16:	b2ed      	uxtb	r5, r5
 8000a18:	e7df      	b.n	80009da <GUI_DrawBMP+0x40>
					}
				}
		}
 } 
 OLED_Display();
}
 8000a1a:	b005      	add	sp, #20
 8000a1c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 OLED_Display();
 8000a20:	f000 bc4e 	b.w	80012c0 <OLED_Display>

08000a24 <TEST_MainPage>:
 * @function   :Drawing the main Interface of the Comprehensive Test Program
 * @parameters :None
 * @retvalue   :None
******************************************************************************/
void TEST_MainPage(void)
{	
 8000a24:	b513      	push	{r0, r1, r4, lr}
	GUI_ShowString(28, 0, "OLED TEST", 16, 1);
 8000a26:	2401      	movs	r4, #1
 8000a28:	2310      	movs	r3, #16
 8000a2a:	9400      	str	r4, [sp, #0]
 8000a2c:	4a12      	ldr	r2, [pc, #72]	; (8000a78 <TEST_MainPage+0x54>)
 8000a2e:	2100      	movs	r1, #0
 8000a30:	201c      	movs	r0, #28
 8000a32:	f7ff fe2d 	bl	8000690 <GUI_ShowString>
	GUI_ShowString(20, 16, "1.3\" SH1106",16, 1);
 8000a36:	2310      	movs	r3, #16
 8000a38:	9400      	str	r4, [sp, #0]
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4a0f      	ldr	r2, [pc, #60]	; (8000a7c <TEST_MainPage+0x58>)
 8000a3e:	2014      	movs	r0, #20
 8000a40:	f7ff fe26 	bl	8000690 <GUI_ShowString>
	GUI_ShowString(40, 32, "64X128",16,1);
 8000a44:	9400      	str	r4, [sp, #0]
 8000a46:	2310      	movs	r3, #16
 8000a48:	4a0d      	ldr	r2, [pc, #52]	; (8000a80 <TEST_MainPage+0x5c>)
 8000a4a:	2120      	movs	r1, #32
 8000a4c:	2028      	movs	r0, #40	; 0x28
 8000a4e:	f7ff fe1f 	bl	8000690 <GUI_ShowString>
	GUI_ShowString(4, 48, "www.lcdwiki.com", 16, 1);
 8000a52:	2310      	movs	r3, #16
 8000a54:	4a0b      	ldr	r2, [pc, #44]	; (8000a84 <TEST_MainPage+0x60>)
 8000a56:	2130      	movs	r1, #48	; 0x30
 8000a58:	9400      	str	r4, [sp, #0]
 8000a5a:	2004      	movs	r0, #4
 8000a5c:	f7ff fe18 	bl	8000690 <GUI_ShowString>

	//delay_ms(1500);
	HAL_Delay(1500);
 8000a60:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000a64:	f000 fd18 	bl	8001498 <HAL_Delay>
	//delay_ms(1500);
	HAL_Delay(1500);
 8000a68:	f240 50dc 	movw	r0, #1500	; 0x5dc
}
 8000a6c:	b002      	add	sp, #8
 8000a6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_Delay(1500);
 8000a72:	f000 bd11 	b.w	8001498 <HAL_Delay>
 8000a76:	bf00      	nop
 8000a78:	0800393e 	.word	0x0800393e
 8000a7c:	08003948 	.word	0x08003948
 8000a80:	08003954 	.word	0x08003954
 8000a84:	0800395b 	.word	0x0800395b

08000a88 <Test_Color>:
 * @function   :Color fill test(white,black)
 * @parameters :None
 * @retvalue   :None
******************************************************************************/
void Test_Color(void)
{
 8000a88:	b537      	push	{r0, r1, r2, r4, r5, lr}
	 GUI_Fill(0,0,WIDTH-1,HEIGHT-1,0);
 8000a8a:	2400      	movs	r4, #0
 8000a8c:	233f      	movs	r3, #63	; 0x3f
 8000a8e:	4621      	mov	r1, r4
 8000a90:	4620      	mov	r0, r4
 8000a92:	9400      	str	r4, [sp, #0]
 8000a94:	227f      	movs	r2, #127	; 0x7f
 8000a96:	f7ff fba7 	bl	80001e8 <GUI_Fill>
	 GUI_ShowString(10,10,"BLACK",16,1);
 8000a9a:	2501      	movs	r5, #1
 8000a9c:	210a      	movs	r1, #10
 8000a9e:	2310      	movs	r3, #16
 8000aa0:	4608      	mov	r0, r1
 8000aa2:	4a0b      	ldr	r2, [pc, #44]	; (8000ad0 <Test_Color+0x48>)
 8000aa4:	9500      	str	r5, [sp, #0]
 8000aa6:	f7ff fdf3 	bl	8000690 <GUI_ShowString>
	 //delay_ms(1000);
	 HAL_Delay(1000);
 8000aaa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000aae:	f000 fcf3 	bl	8001498 <HAL_Delay>
	 GUI_Fill(0,0,WIDTH-1,HEIGHT-1,1);
 8000ab2:	4620      	mov	r0, r4
 8000ab4:	9500      	str	r5, [sp, #0]
 8000ab6:	233f      	movs	r3, #63	; 0x3f
 8000ab8:	227f      	movs	r2, #127	; 0x7f
 8000aba:	4621      	mov	r1, r4
 8000abc:	f7ff fb94 	bl	80001e8 <GUI_Fill>
	 //delay_ms(1500);
	 HAL_Delay(1000);
 8000ac0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
}
 8000ac4:	b003      	add	sp, #12
 8000ac6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	 HAL_Delay(1000);
 8000aca:	f000 bce5 	b.w	8001498 <HAL_Delay>
 8000ace:	bf00      	nop
 8000ad0:	08003a18 	.word	0x08003a18

08000ad4 <Test_Rectangular>:
								milliseconds later,Fill the rectangle in black,white in turn
 * @parameters :None
 * @retvalue   :None
******************************************************************************/
void Test_Rectangular(void)
{
 8000ad4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	GUI_Fill(0,0,WIDTH/2-1,HEIGHT-1,0);
 8000ad6:	233f      	movs	r3, #63	; 0x3f
 8000ad8:	2400      	movs	r4, #0
	GUI_Fill(WIDTH/2,0,WIDTH-1,HEIGHT-1,1);
 8000ada:	2501      	movs	r5, #1
	GUI_Fill(0,0,WIDTH/2-1,HEIGHT-1,0);
 8000adc:	461a      	mov	r2, r3
 8000ade:	4621      	mov	r1, r4
 8000ae0:	4620      	mov	r0, r4
 8000ae2:	9400      	str	r4, [sp, #0]
 8000ae4:	f7ff fb80 	bl	80001e8 <GUI_Fill>
	GUI_Fill(WIDTH/2,0,WIDTH-1,HEIGHT-1,1);
 8000ae8:	4621      	mov	r1, r4
 8000aea:	9500      	str	r5, [sp, #0]
 8000aec:	233f      	movs	r3, #63	; 0x3f
 8000aee:	227f      	movs	r2, #127	; 0x7f
 8000af0:	2040      	movs	r0, #64	; 0x40
 8000af2:	f7ff fb79 	bl	80001e8 <GUI_Fill>
	GUI_DrawRectangle(5, 5, WIDTH/2-1-5, HEIGHT-1-5,1);
 8000af6:	233a      	movs	r3, #58	; 0x3a
 8000af8:	2105      	movs	r1, #5
 8000afa:	461a      	mov	r2, r3
 8000afc:	4608      	mov	r0, r1
 8000afe:	9500      	str	r5, [sp, #0]
 8000b00:	f7ff fbe4 	bl	80002cc <GUI_DrawRectangle>
	GUI_DrawRectangle(WIDTH/2-1+5, 5, WIDTH-1-5, HEIGHT-1-5,0);
 8000b04:	233a      	movs	r3, #58	; 0x3a
 8000b06:	227a      	movs	r2, #122	; 0x7a
 8000b08:	2105      	movs	r1, #5
 8000b0a:	9400      	str	r4, [sp, #0]
 8000b0c:	2044      	movs	r0, #68	; 0x44
 8000b0e:	f7ff fbdd 	bl	80002cc <GUI_DrawRectangle>
	//delay_ms(1000);
	HAL_Delay(1000);
 8000b12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b16:	f000 fcbf 	bl	8001498 <HAL_Delay>
	GUI_FillRectangle(5, 5, WIDTH/2-1-5, HEIGHT-1-5,1);
 8000b1a:	233a      	movs	r3, #58	; 0x3a
 8000b1c:	2105      	movs	r1, #5
 8000b1e:	461a      	mov	r2, r3
 8000b20:	4608      	mov	r0, r1
 8000b22:	9500      	str	r5, [sp, #0]
 8000b24:	f7ff fbf6 	bl	8000314 <GUI_FillRectangle>
	GUI_FillRectangle(WIDTH/2-1+5, 5, WIDTH-1-5, HEIGHT-1-5,0);
 8000b28:	9400      	str	r4, [sp, #0]
 8000b2a:	233a      	movs	r3, #58	; 0x3a
 8000b2c:	227a      	movs	r2, #122	; 0x7a
 8000b2e:	2105      	movs	r1, #5
 8000b30:	2044      	movs	r0, #68	; 0x44
 8000b32:	f7ff fbef 	bl	8000314 <GUI_FillRectangle>
	//delay_ms(1500);
	HAL_Delay(1500);
 8000b36:	f240 50dc 	movw	r0, #1500	; 0x5dc
}
 8000b3a:	b003      	add	sp, #12
 8000b3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	HAL_Delay(1500);
 8000b40:	f000 bcaa 	b.w	8001498 <HAL_Delay>

08000b44 <Test_Circle>:
								milliseconds later,Fill the circular in black,white in turn
 * @parameters :None
 * @retvalue   :None
******************************************************************************/
void Test_Circle(void)
{
 8000b44:	b537      	push	{r0, r1, r2, r4, r5, lr}
	GUI_Fill(0,0,WIDTH/2-1,HEIGHT-1,0);
 8000b46:	233f      	movs	r3, #63	; 0x3f
 8000b48:	2400      	movs	r4, #0
	GUI_Fill(WIDTH/2,0,WIDTH-1,HEIGHT-1,1);
 8000b4a:	2501      	movs	r5, #1
	GUI_Fill(0,0,WIDTH/2-1,HEIGHT-1,0);
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	4621      	mov	r1, r4
 8000b50:	4620      	mov	r0, r4
 8000b52:	9400      	str	r4, [sp, #0]
 8000b54:	f7ff fb48 	bl	80001e8 <GUI_Fill>
	GUI_Fill(WIDTH/2,0,WIDTH-1,HEIGHT-1,1);
 8000b58:	4621      	mov	r1, r4
 8000b5a:	9500      	str	r5, [sp, #0]
 8000b5c:	233f      	movs	r3, #63	; 0x3f
 8000b5e:	227f      	movs	r2, #127	; 0x7f
 8000b60:	2040      	movs	r0, #64	; 0x40
 8000b62:	f7ff fb41 	bl	80001e8 <GUI_Fill>
	GUI_DrawCircle(WIDTH/2/2-1, HEIGHT/2-1, 1, 27);
 8000b66:	211f      	movs	r1, #31
 8000b68:	462a      	mov	r2, r5
 8000b6a:	4608      	mov	r0, r1
 8000b6c:	231b      	movs	r3, #27
 8000b6e:	f7ff fbd8 	bl	8000322 <GUI_DrawCircle>
	GUI_DrawCircle(WIDTH/2+WIDTH/2/2-1, HEIGHT/2-1, 0, 27);
 8000b72:	4622      	mov	r2, r4
 8000b74:	231b      	movs	r3, #27
 8000b76:	211f      	movs	r1, #31
 8000b78:	205f      	movs	r0, #95	; 0x5f
 8000b7a:	f7ff fbd2 	bl	8000322 <GUI_DrawCircle>
	//delay_ms(1000);
	HAL_Delay(1000);
 8000b7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b82:	f000 fc89 	bl	8001498 <HAL_Delay>
	GUI_FillCircle(WIDTH/2/2-1, HEIGHT/2-1, 1, 27);
 8000b86:	211f      	movs	r1, #31
 8000b88:	462a      	mov	r2, r5
 8000b8a:	4608      	mov	r0, r1
 8000b8c:	231b      	movs	r3, #27
 8000b8e:	f7ff fbf2 	bl	8000376 <GUI_FillCircle>
	GUI_FillCircle(WIDTH/2+WIDTH/2/2-1, HEIGHT/2-1, 0, 27);
 8000b92:	231b      	movs	r3, #27
 8000b94:	4622      	mov	r2, r4
 8000b96:	211f      	movs	r1, #31
 8000b98:	205f      	movs	r0, #95	; 0x5f
 8000b9a:	f7ff fbec 	bl	8000376 <GUI_FillCircle>
	//delay_ms(1500);
	HAL_Delay(1500);
 8000b9e:	f240 50dc 	movw	r0, #1500	; 0x5dc
}
 8000ba2:	b003      	add	sp, #12
 8000ba4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	HAL_Delay(1500);
 8000ba8:	f000 bc76 	b.w	8001498 <HAL_Delay>

08000bac <Test_Triangle>:
								milliseconds later,Fill the triangle in black,white in turn
 * @parameters :None
 * @retvalue   :None
******************************************************************************/
void Test_Triangle(void)
{
 8000bac:	b5f0      	push	{r4, r5, r6, r7, lr}
	GUI_Fill(0,0,WIDTH/2-1,HEIGHT-1,0);
 8000bae:	233f      	movs	r3, #63	; 0x3f
 8000bb0:	2500      	movs	r5, #0
	GUI_Fill(WIDTH/2,0,WIDTH-1,HEIGHT-1,1);
 8000bb2:	2601      	movs	r6, #1
{
 8000bb4:	b085      	sub	sp, #20
	GUI_Fill(0,0,WIDTH/2-1,HEIGHT-1,0);
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	4629      	mov	r1, r5
 8000bba:	4628      	mov	r0, r5
 8000bbc:	9500      	str	r5, [sp, #0]
 8000bbe:	f7ff fb13 	bl	80001e8 <GUI_Fill>
	GUI_Fill(WIDTH/2,0,WIDTH-1,HEIGHT-1,1);
 8000bc2:	4629      	mov	r1, r5
 8000bc4:	9600      	str	r6, [sp, #0]
 8000bc6:	233f      	movs	r3, #63	; 0x3f
 8000bc8:	227f      	movs	r2, #127	; 0x7f
 8000bca:	2040      	movs	r0, #64	; 0x40
	GUI_DrawTriangel(5,HEIGHT-1-5,WIDTH/2/2-1,5,WIDTH/2-1-5,HEIGHT-1-5,1);
 8000bcc:	243a      	movs	r4, #58	; 0x3a
	GUI_Fill(WIDTH/2,0,WIDTH-1,HEIGHT-1,1);
 8000bce:	f7ff fb0b 	bl	80001e8 <GUI_Fill>
	GUI_DrawTriangel(5,HEIGHT-1-5,WIDTH/2/2-1,5,WIDTH/2-1-5,HEIGHT-1-5,1);
 8000bd2:	2305      	movs	r3, #5
	GUI_DrawTriangel(WIDTH/2-1+5,HEIGHT-1-5,WIDTH/2+WIDTH/2/2-1,5,WIDTH-1-5,HEIGHT-1-5,0);
 8000bd4:	277a      	movs	r7, #122	; 0x7a
	GUI_DrawTriangel(5,HEIGHT-1-5,WIDTH/2/2-1,5,WIDTH/2-1-5,HEIGHT-1-5,1);
 8000bd6:	4621      	mov	r1, r4
 8000bd8:	4618      	mov	r0, r3
 8000bda:	9602      	str	r6, [sp, #8]
 8000bdc:	9401      	str	r4, [sp, #4]
 8000bde:	9400      	str	r4, [sp, #0]
 8000be0:	221f      	movs	r2, #31
 8000be2:	f7ff fbf6 	bl	80003d2 <GUI_DrawTriangel>
	GUI_DrawTriangel(WIDTH/2-1+5,HEIGHT-1-5,WIDTH/2+WIDTH/2/2-1,5,WIDTH-1-5,HEIGHT-1-5,0);
 8000be6:	4621      	mov	r1, r4
 8000be8:	2305      	movs	r3, #5
 8000bea:	225f      	movs	r2, #95	; 0x5f
 8000bec:	9502      	str	r5, [sp, #8]
 8000bee:	9401      	str	r4, [sp, #4]
 8000bf0:	9700      	str	r7, [sp, #0]
 8000bf2:	2044      	movs	r0, #68	; 0x44
 8000bf4:	f7ff fbed 	bl	80003d2 <GUI_DrawTriangel>
	//delay_ms(1000);
	HAL_Delay(1000);
 8000bf8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bfc:	f000 fc4c 	bl	8001498 <HAL_Delay>
	GUI_FillTriangel(5,HEIGHT-1-5,WIDTH/2/2-1,5,WIDTH/2-1-5,HEIGHT-1-5,1);
 8000c00:	2305      	movs	r3, #5
 8000c02:	4621      	mov	r1, r4
 8000c04:	4618      	mov	r0, r3
 8000c06:	9602      	str	r6, [sp, #8]
 8000c08:	9401      	str	r4, [sp, #4]
 8000c0a:	9400      	str	r4, [sp, #0]
 8000c0c:	221f      	movs	r2, #31
 8000c0e:	f7ff fc00 	bl	8000412 <GUI_FillTriangel>
	GUI_FillTriangel(WIDTH/2-1+5,HEIGHT-1-5,WIDTH/2+WIDTH/2/2-1,5,WIDTH-1-5,HEIGHT-1-5,0);
 8000c12:	9502      	str	r5, [sp, #8]
 8000c14:	9401      	str	r4, [sp, #4]
 8000c16:	9700      	str	r7, [sp, #0]
 8000c18:	2305      	movs	r3, #5
 8000c1a:	225f      	movs	r2, #95	; 0x5f
 8000c1c:	4621      	mov	r1, r4
 8000c1e:	2044      	movs	r0, #68	; 0x44
 8000c20:	f7ff fbf7 	bl	8000412 <GUI_FillTriangel>
	//delay_ms(1500);
	HAL_Delay(1500);
 8000c24:	f240 50dc 	movw	r0, #1500	; 0x5dc
}
 8000c28:	b005      	add	sp, #20
 8000c2a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	HAL_Delay(1500);
 8000c2e:	f000 bc33 	b.w	8001498 <HAL_Delay>
	...

08000c34 <TEST_English>:
 * @function   :English display test
 * @parameters :None
 * @retvalue   :None
******************************************************************************/
void TEST_English(void)
{
 8000c34:	b513      	push	{r0, r1, r4, lr}
	GUI_ShowString(0,5,"6x8:abcdefghijklmnopqrstuvwxyz",8,1);
 8000c36:	2401      	movs	r4, #1
 8000c38:	2308      	movs	r3, #8
 8000c3a:	9400      	str	r4, [sp, #0]
 8000c3c:	4a12      	ldr	r2, [pc, #72]	; (8000c88 <TEST_English+0x54>)
 8000c3e:	2105      	movs	r1, #5
 8000c40:	2000      	movs	r0, #0
 8000c42:	f7ff fd25 	bl	8000690 <GUI_ShowString>
	GUI_ShowString(0,25,"8x16:abcdefghijklmnopqrstuvwxyz",16,1);
 8000c46:	2310      	movs	r3, #16
 8000c48:	4a10      	ldr	r2, [pc, #64]	; (8000c8c <TEST_English+0x58>)
 8000c4a:	2119      	movs	r1, #25
 8000c4c:	9400      	str	r4, [sp, #0]
 8000c4e:	2000      	movs	r0, #0
 8000c50:	f7ff fd1e 	bl	8000690 <GUI_ShowString>
	//delay_ms(1000);
	HAL_Delay(1000);
 8000c54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c58:	f000 fc1e 	bl	8001498 <HAL_Delay>
	GUI_ShowString(0,5,"6x8:ABCDEFGHIJKLMNOPQRSTUVWXYZ",8,1);
 8000c5c:	9400      	str	r4, [sp, #0]
 8000c5e:	2308      	movs	r3, #8
 8000c60:	4a0b      	ldr	r2, [pc, #44]	; (8000c90 <TEST_English+0x5c>)
 8000c62:	2105      	movs	r1, #5
 8000c64:	2000      	movs	r0, #0
 8000c66:	f7ff fd13 	bl	8000690 <GUI_ShowString>
	GUI_ShowString(0,25,"8x16:ABCDEFGHIJKLMNOPQRSTUVWXYZ",16,1);
 8000c6a:	9400      	str	r4, [sp, #0]
 8000c6c:	2310      	movs	r3, #16
 8000c6e:	4a09      	ldr	r2, [pc, #36]	; (8000c94 <TEST_English+0x60>)
 8000c70:	2119      	movs	r1, #25
 8000c72:	2000      	movs	r0, #0
 8000c74:	f7ff fd0c 	bl	8000690 <GUI_ShowString>
	//delay_ms(1500);
	HAL_Delay(1500);
 8000c78:	f240 50dc 	movw	r0, #1500	; 0x5dc
}
 8000c7c:	b002      	add	sp, #8
 8000c7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_Delay(1500);
 8000c82:	f000 bc09 	b.w	8001498 <HAL_Delay>
 8000c86:	bf00      	nop
 8000c88:	080038c0 	.word	0x080038c0
 8000c8c:	080038df 	.word	0x080038df
 8000c90:	080038ff 	.word	0x080038ff
 8000c94:	0800391e 	.word	0x0800391e

08000c98 <TEST_Number_Character>:
 * @function   :number and character display test
 * @parameters :None
 * @retvalue   :None
******************************************************************************/
void TEST_Number_Character(void) 
{
 8000c98:	b573      	push	{r0, r1, r4, r5, r6, lr}
	GUI_Fill(0,0,WIDTH-1,HEIGHT/2-1,0);
 8000c9a:	2400      	movs	r4, #0
	GUI_ShowString(0,0,"6x8:!\"#$%&'()*+,-./:;<=>?@[]\\^_`~{}|",8,1);
 8000c9c:	2501      	movs	r5, #1
	GUI_Fill(0,0,WIDTH-1,HEIGHT/2-1,0);
 8000c9e:	4621      	mov	r1, r4
 8000ca0:	4620      	mov	r0, r4
 8000ca2:	9400      	str	r4, [sp, #0]
 8000ca4:	231f      	movs	r3, #31
 8000ca6:	227f      	movs	r2, #127	; 0x7f
 8000ca8:	f7ff fa9e 	bl	80001e8 <GUI_Fill>
	GUI_ShowString(0,0,"6x8:!\"#$%&'()*+,-./:;<=>?@[]\\^_`~{}|",8,1);
 8000cac:	4621      	mov	r1, r4
 8000cae:	4620      	mov	r0, r4
 8000cb0:	9500      	str	r5, [sp, #0]
 8000cb2:	2308      	movs	r3, #8
 8000cb4:	4a16      	ldr	r2, [pc, #88]	; (8000d10 <TEST_Number_Character+0x78>)
 8000cb6:	f7ff fceb 	bl	8000690 <GUI_ShowString>
	GUI_ShowNum(30,16,1234567890,10,8,1);
 8000cba:	2308      	movs	r3, #8
 8000cbc:	4e15      	ldr	r6, [pc, #84]	; (8000d14 <TEST_Number_Character+0x7c>)
 8000cbe:	2110      	movs	r1, #16
 8000cc0:	4632      	mov	r2, r6
 8000cc2:	9300      	str	r3, [sp, #0]
 8000cc4:	9501      	str	r5, [sp, #4]
 8000cc6:	230a      	movs	r3, #10
 8000cc8:	201e      	movs	r0, #30
 8000cca:	f7ff fd0a 	bl	80006e2 <GUI_ShowNum>
	//delay_ms(1000);
	HAL_Delay(1000);
 8000cce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cd2:	f000 fbe1 	bl	8001498 <HAL_Delay>
	OLED_Clear(0); 
 8000cd6:	4620      	mov	r0, r4
 8000cd8:	f000 fb14 	bl	8001304 <OLED_Clear>
    GUI_ShowString(0,0,"8x16:!\"#$%&'()*+,-./:;<=>?@[]\\^_`~{}|",16,1);
 8000cdc:	4621      	mov	r1, r4
 8000cde:	4620      	mov	r0, r4
 8000ce0:	9500      	str	r5, [sp, #0]
 8000ce2:	2310      	movs	r3, #16
 8000ce4:	4a0c      	ldr	r2, [pc, #48]	; (8000d18 <TEST_Number_Character+0x80>)
 8000ce6:	f7ff fcd3 	bl	8000690 <GUI_ShowString>
	GUI_ShowNum(40,32,1234567890,10,16,1);
 8000cea:	2310      	movs	r3, #16
 8000cec:	4632      	mov	r2, r6
 8000cee:	9300      	str	r3, [sp, #0]
 8000cf0:	2120      	movs	r1, #32
 8000cf2:	230a      	movs	r3, #10
 8000cf4:	9501      	str	r5, [sp, #4]
 8000cf6:	2028      	movs	r0, #40	; 0x28
 8000cf8:	f7ff fcf3 	bl	80006e2 <GUI_ShowNum>
	//delay_ms(1500);
	HAL_Delay(1500);
 8000cfc:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000d00:	f000 fbca 	bl	8001498 <HAL_Delay>
	OLED_Clear(0);
 8000d04:	4620      	mov	r0, r4
}
 8000d06:	b002      	add	sp, #8
 8000d08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	OLED_Clear(0);
 8000d0c:	f000 bafa 	b.w	8001304 <OLED_Clear>
 8000d10:	080039cd 	.word	0x080039cd
 8000d14:	499602d2 	.word	0x499602d2
 8000d18:	080039f2 	.word	0x080039f2

08000d1c <TEST_Chinese>:
 * @function   :chinese display test
 * @parameters :None
 * @retvalue   :None
******************************************************************************/
void TEST_Chinese(void)
{	
 8000d1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	GUI_ShowString(45,0,"16x16",8,1);
 8000d1e:	2401      	movs	r4, #1
 8000d20:	2308      	movs	r3, #8
 8000d22:	9400      	str	r4, [sp, #0]
 8000d24:	4a20      	ldr	r2, [pc, #128]	; (8000da8 <TEST_Chinese+0x8c>)
 8000d26:	2100      	movs	r1, #0
 8000d28:	202d      	movs	r0, #45	; 0x2d
 8000d2a:	f7ff fcb1 	bl	8000690 <GUI_ShowString>
	GUI_ShowCHinese(16,20,16,"全动电子技术",1);
 8000d2e:	2210      	movs	r2, #16
 8000d30:	4b1e      	ldr	r3, [pc, #120]	; (8000dac <TEST_Chinese+0x90>)
 8000d32:	4610      	mov	r0, r2
 8000d34:	2114      	movs	r1, #20
 8000d36:	9400      	str	r4, [sp, #0]
 8000d38:	f7ff fdfe 	bl	8000938 <GUI_ShowCHinese>
	//delay_ms(1000);
	HAL_Delay(1000);
 8000d3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d40:	f000 fbaa 	bl	8001498 <HAL_Delay>
	OLED_Clear(0);
	GUI_ShowString(45,0,"24x24",8,1);
	GUI_ShowCHinese(16,20,24,"全动电子",1);
 8000d44:	4d1a      	ldr	r5, [pc, #104]	; (8000db0 <TEST_Chinese+0x94>)
	OLED_Clear(0);
 8000d46:	2000      	movs	r0, #0
 8000d48:	f000 fadc 	bl	8001304 <OLED_Clear>
	GUI_ShowString(45,0,"24x24",8,1);
 8000d4c:	9400      	str	r4, [sp, #0]
 8000d4e:	2308      	movs	r3, #8
 8000d50:	4a18      	ldr	r2, [pc, #96]	; (8000db4 <TEST_Chinese+0x98>)
 8000d52:	2100      	movs	r1, #0
 8000d54:	202d      	movs	r0, #45	; 0x2d
 8000d56:	f7ff fc9b 	bl	8000690 <GUI_ShowString>
	GUI_ShowCHinese(16,20,24,"全动电子",1);
 8000d5a:	462b      	mov	r3, r5
 8000d5c:	2218      	movs	r2, #24
 8000d5e:	2114      	movs	r1, #20
 8000d60:	9400      	str	r4, [sp, #0]
 8000d62:	2010      	movs	r0, #16
 8000d64:	f7ff fde8 	bl	8000938 <GUI_ShowCHinese>
	//delay_ms(1000);
	HAL_Delay(1000);
 8000d68:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d6c:	f000 fb94 	bl	8001498 <HAL_Delay>
	OLED_Clear(0);
 8000d70:	2000      	movs	r0, #0
 8000d72:	f000 fac7 	bl	8001304 <OLED_Clear>
	GUI_ShowString(45,0,"32x32",8,1);
 8000d76:	9400      	str	r4, [sp, #0]
 8000d78:	2308      	movs	r3, #8
 8000d7a:	4a0f      	ldr	r2, [pc, #60]	; (8000db8 <TEST_Chinese+0x9c>)
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	202d      	movs	r0, #45	; 0x2d
 8000d80:	f7ff fc86 	bl	8000690 <GUI_ShowString>
	GUI_ShowCHinese(0,20,32,"全动电子",1);	
 8000d84:	462b      	mov	r3, r5
 8000d86:	2220      	movs	r2, #32
 8000d88:	2114      	movs	r1, #20
 8000d8a:	9400      	str	r4, [sp, #0]
 8000d8c:	2000      	movs	r0, #0
 8000d8e:	f7ff fdd3 	bl	8000938 <GUI_ShowCHinese>
    //delay_ms(1000);
	HAL_Delay(1000);
 8000d92:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d96:	f000 fb7f 	bl	8001498 <HAL_Delay>
	OLED_Clear(0);
 8000d9a:	2000      	movs	r0, #0
}
 8000d9c:	b003      	add	sp, #12
 8000d9e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	OLED_Clear(0);
 8000da2:	f000 baaf 	b.w	8001304 <OLED_Clear>
 8000da6:	bf00      	nop
 8000da8:	08003898 	.word	0x08003898
 8000dac:	0800389e 	.word	0x0800389e
 8000db0:	080038b1 	.word	0x080038b1
 8000db4:	080038ab 	.word	0x080038ab
 8000db8:	080038ba 	.word	0x080038ba

08000dbc <TEST_BMP>:
 * @function   :BMP monochromatic picture display test
 * @parameters :None
 * @retvalue   :None
******************************************************************************/
void TEST_BMP(void)
{
 8000dbc:	b513      	push	{r0, r1, r4, lr}
	GUI_DrawBMP(0,0,128,64, BMP2, 1);
 8000dbe:	2401      	movs	r4, #1
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	4b14      	ldr	r3, [pc, #80]	; (8000e14 <TEST_BMP+0x58>)
 8000dc4:	4608      	mov	r0, r1
 8000dc6:	9300      	str	r3, [sp, #0]
 8000dc8:	2280      	movs	r2, #128	; 0x80
 8000dca:	2340      	movs	r3, #64	; 0x40
 8000dcc:	9401      	str	r4, [sp, #4]
 8000dce:	f7ff fde4 	bl	800099a <GUI_DrawBMP>
	//delay_ms(1000);
	HAL_Delay(1000);
 8000dd2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dd6:	f000 fb5f 	bl	8001498 <HAL_Delay>
	GUI_DrawBMP(0,0,128,64, BMP3, 1);
 8000dda:	2100      	movs	r1, #0
 8000ddc:	4b0e      	ldr	r3, [pc, #56]	; (8000e18 <TEST_BMP+0x5c>)
 8000dde:	4608      	mov	r0, r1
 8000de0:	9300      	str	r3, [sp, #0]
 8000de2:	2280      	movs	r2, #128	; 0x80
 8000de4:	2340      	movs	r3, #64	; 0x40
 8000de6:	9401      	str	r4, [sp, #4]
 8000de8:	f7ff fdd7 	bl	800099a <GUI_DrawBMP>
	//delay_ms(1000);
	HAL_Delay(1000);
 8000dec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000df0:	f000 fb52 	bl	8001498 <HAL_Delay>
	GUI_DrawBMP(0,0,128,64, BMP4, 1);
 8000df4:	2100      	movs	r1, #0
 8000df6:	4b09      	ldr	r3, [pc, #36]	; (8000e1c <TEST_BMP+0x60>)
 8000df8:	4608      	mov	r0, r1
 8000dfa:	9300      	str	r3, [sp, #0]
 8000dfc:	9401      	str	r4, [sp, #4]
 8000dfe:	2340      	movs	r3, #64	; 0x40
 8000e00:	2280      	movs	r2, #128	; 0x80
 8000e02:	f7ff fdca 	bl	800099a <GUI_DrawBMP>
	//delay_ms(1000);
	HAL_Delay(1000);
 8000e06:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
}
 8000e0a:	b002      	add	sp, #8
 8000e0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_Delay(1000);
 8000e10:	f000 bb42 	b.w	8001498 <HAL_Delay>
 8000e14:	20000000 	.word	0x20000000
 8000e18:	20000400 	.word	0x20000400
 8000e1c:	20000800 	.word	0x20000800

08000e20 <TEST_Menu1>:
 * @function   :Chinese selection menu display test
 * @parameters :None
 * @retvalue   :None
******************************************************************************/
void TEST_Menu1(void)
{ 
 8000e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	GUI_Fill(0,0,WIDTH-1,15,1);
 8000e24:	2100      	movs	r1, #0
 8000e26:	2401      	movs	r4, #1
	GUI_ShowCHinese(32,0,16,"系统设置",0);
 8000e28:	2500      	movs	r5, #0
{ 
 8000e2a:	b085      	sub	sp, #20
	GUI_Fill(0,0,WIDTH-1,15,1);
 8000e2c:	4608      	mov	r0, r1
 8000e2e:	9400      	str	r4, [sp, #0]
 8000e30:	230f      	movs	r3, #15
 8000e32:	227f      	movs	r2, #127	; 0x7f
 8000e34:	f7ff f9d8 	bl	80001e8 <GUI_Fill>
	GUI_ShowCHinese(32,0,16,"系统设置",0);
 8000e38:	4629      	mov	r1, r5
 8000e3a:	9500      	str	r5, [sp, #0]
 8000e3c:	4ba0      	ldr	r3, [pc, #640]	; (80010c0 <TEST_Menu1+0x2a0>)
 8000e3e:	2210      	movs	r2, #16
 8000e40:	2020      	movs	r0, #32
 8000e42:	f7ff fd79 	bl	8000938 <GUI_ShowCHinese>
	GUI_DrawCircle(10, 24, 1,6);
 8000e46:	4622      	mov	r2, r4
 8000e48:	2306      	movs	r3, #6
 8000e4a:	2118      	movs	r1, #24
 8000e4c:	200a      	movs	r0, #10
 8000e4e:	f7ff fa68 	bl	8000322 <GUI_DrawCircle>
	GUI_DrawCircle(10, 24, 1,3);
 8000e52:	4622      	mov	r2, r4
 8000e54:	2303      	movs	r3, #3
 8000e56:	2118      	movs	r1, #24
 8000e58:	200a      	movs	r0, #10
 8000e5a:	f7ff fa62 	bl	8000322 <GUI_DrawCircle>
	GUI_DrawCircle(10, 40, 1,6);
 8000e5e:	4622      	mov	r2, r4
 8000e60:	2306      	movs	r3, #6
 8000e62:	2128      	movs	r1, #40	; 0x28
 8000e64:	200a      	movs	r0, #10
 8000e66:	f7ff fa5c 	bl	8000322 <GUI_DrawCircle>
	GUI_DrawCircle(10, 40, 1,3);
 8000e6a:	4622      	mov	r2, r4
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	2128      	movs	r1, #40	; 0x28
 8000e70:	200a      	movs	r0, #10
 8000e72:	f7ff fa56 	bl	8000322 <GUI_DrawCircle>
	GUI_DrawCircle(10, 56, 1,6);
 8000e76:	4622      	mov	r2, r4
 8000e78:	2306      	movs	r3, #6
 8000e7a:	2138      	movs	r1, #56	; 0x38
 8000e7c:	200a      	movs	r0, #10
 8000e7e:	f7ff fa50 	bl	8000322 <GUI_DrawCircle>
	GUI_DrawCircle(10, 56, 1,3);
 8000e82:	4622      	mov	r2, r4
 8000e84:	2303      	movs	r3, #3
 8000e86:	2138      	movs	r1, #56	; 0x38
 8000e88:	200a      	movs	r0, #10
 8000e8a:	f7ff fa4a 	bl	8000322 <GUI_DrawCircle>
	GUI_ShowString(20,16,"A.",16,1);
 8000e8e:	2310      	movs	r3, #16
 8000e90:	f8df b238 	ldr.w	fp, [pc, #568]	; 80010cc <TEST_Menu1+0x2ac>
 8000e94:	4619      	mov	r1, r3
 8000e96:	465a      	mov	r2, fp
 8000e98:	9400      	str	r4, [sp, #0]
 8000e9a:	2014      	movs	r0, #20
 8000e9c:	f7ff fbf8 	bl	8000690 <GUI_ShowString>
	GUI_ShowCHinese(36,16,16,"音量设置",1);
 8000ea0:	2210      	movs	r2, #16
 8000ea2:	f8df a22c 	ldr.w	sl, [pc, #556]	; 80010d0 <TEST_Menu1+0x2b0>
	GUI_ShowString(20,32,"B.",16,1);
 8000ea6:	f8df 922c 	ldr.w	r9, [pc, #556]	; 80010d4 <TEST_Menu1+0x2b4>
	GUI_ShowCHinese(36,32,16,"颜色设置",1);
 8000eaa:	f8df 822c 	ldr.w	r8, [pc, #556]	; 80010d8 <TEST_Menu1+0x2b8>
	GUI_ShowCHinese(36,16,16,"音量设置",1);
 8000eae:	4653      	mov	r3, sl
 8000eb0:	4611      	mov	r1, r2
 8000eb2:	9400      	str	r4, [sp, #0]
 8000eb4:	2024      	movs	r0, #36	; 0x24
 8000eb6:	f7ff fd3f 	bl	8000938 <GUI_ShowCHinese>
	GUI_ShowString(20,32,"B.",16,1);
 8000eba:	464a      	mov	r2, r9
 8000ebc:	9400      	str	r4, [sp, #0]
 8000ebe:	2310      	movs	r3, #16
 8000ec0:	2120      	movs	r1, #32
 8000ec2:	2014      	movs	r0, #20
 8000ec4:	f7ff fbe4 	bl	8000690 <GUI_ShowString>
	GUI_ShowCHinese(36,32,16,"颜色设置",1);
 8000ec8:	4643      	mov	r3, r8
 8000eca:	9400      	str	r4, [sp, #0]
 8000ecc:	2210      	movs	r2, #16
 8000ece:	2120      	movs	r1, #32
 8000ed0:	2024      	movs	r0, #36	; 0x24
 8000ed2:	f7ff fd31 	bl	8000938 <GUI_ShowCHinese>
	GUI_ShowString(20,48,"C.",16,1);
 8000ed6:	9400      	str	r4, [sp, #0]
 8000ed8:	2310      	movs	r3, #16
 8000eda:	4a7a      	ldr	r2, [pc, #488]	; (80010c4 <TEST_Menu1+0x2a4>)
 8000edc:	2130      	movs	r1, #48	; 0x30
 8000ede:	2014      	movs	r0, #20
 8000ee0:	f7ff fbd6 	bl	8000690 <GUI_ShowString>
	GUI_ShowCHinese(36,48,16,"网络设置",1);
 8000ee4:	9400      	str	r4, [sp, #0]
 8000ee6:	4b78      	ldr	r3, [pc, #480]	; (80010c8 <TEST_Menu1+0x2a8>)
 8000ee8:	2210      	movs	r2, #16
 8000eea:	2130      	movs	r1, #48	; 0x30
 8000eec:	2024      	movs	r0, #36	; 0x24
 8000eee:	f7ff fd23 	bl	8000938 <GUI_ShowCHinese>
	GUI_DrawRectangle(0, 0,WIDTH-1,HEIGHT-1,1);
 8000ef2:	4629      	mov	r1, r5
 8000ef4:	4628      	mov	r0, r5
 8000ef6:	9400      	str	r4, [sp, #0]
 8000ef8:	233f      	movs	r3, #63	; 0x3f
 8000efa:	227f      	movs	r2, #127	; 0x7f
 8000efc:	f7ff f9e6 	bl	80002cc <GUI_DrawRectangle>
	GUI_DrawLine(WIDTH-1-10, 15, WIDTH-1-10, HEIGHT-1,1);
 8000f00:	2275      	movs	r2, #117	; 0x75
	GUI_FillTriangel(WIDTH-1-9,20,WIDTH-1-5,16,WIDTH-1-1,20,1);
 8000f02:	2614      	movs	r6, #20
 8000f04:	277e      	movs	r7, #126	; 0x7e
	GUI_DrawLine(WIDTH-1-10, 15, WIDTH-1-10, HEIGHT-1,1);
 8000f06:	4610      	mov	r0, r2
 8000f08:	9400      	str	r4, [sp, #0]
 8000f0a:	233f      	movs	r3, #63	; 0x3f
 8000f0c:	210f      	movs	r1, #15
 8000f0e:	f7ff f992 	bl	8000236 <GUI_DrawLine>
	GUI_FillTriangel(WIDTH-1-9,20,WIDTH-1-5,16,WIDTH-1-1,20,1);
 8000f12:	4631      	mov	r1, r6
 8000f14:	9402      	str	r4, [sp, #8]
 8000f16:	9601      	str	r6, [sp, #4]
 8000f18:	9700      	str	r7, [sp, #0]
 8000f1a:	2310      	movs	r3, #16
 8000f1c:	227a      	movs	r2, #122	; 0x7a
 8000f1e:	2076      	movs	r0, #118	; 0x76
 8000f20:	f7ff fa77 	bl	8000412 <GUI_FillTriangel>
	GUI_FillTriangel(WIDTH-1-9,HEIGHT-1-5,WIDTH-1-5,HEIGHT-1-1,WIDTH-1-1,HEIGHT-1-5,1);
 8000f24:	213a      	movs	r1, #58	; 0x3a
 8000f26:	9402      	str	r4, [sp, #8]
 8000f28:	9101      	str	r1, [sp, #4]
 8000f2a:	9700      	str	r7, [sp, #0]
 8000f2c:	233e      	movs	r3, #62	; 0x3e
 8000f2e:	227a      	movs	r2, #122	; 0x7a
 8000f30:	2076      	movs	r0, #118	; 0x76
 8000f32:	f7ff fa6e 	bl	8000412 <GUI_FillTriangel>
	GUI_FillCircle(10, 24, 1,3);
 8000f36:	4622      	mov	r2, r4
 8000f38:	2303      	movs	r3, #3
 8000f3a:	2118      	movs	r1, #24
 8000f3c:	200a      	movs	r0, #10
 8000f3e:	f7ff fa1a 	bl	8000376 <GUI_FillCircle>
	GUI_Fill(20,16,99,31,1);
 8000f42:	4630      	mov	r0, r6
 8000f44:	9400      	str	r4, [sp, #0]
 8000f46:	231f      	movs	r3, #31
 8000f48:	2263      	movs	r2, #99	; 0x63
 8000f4a:	2110      	movs	r1, #16
 8000f4c:	f7ff f94c 	bl	80001e8 <GUI_Fill>
	GUI_ShowString(20,16,"A.",16,0);
 8000f50:	2310      	movs	r3, #16
 8000f52:	465a      	mov	r2, fp
 8000f54:	4619      	mov	r1, r3
 8000f56:	4630      	mov	r0, r6
 8000f58:	9500      	str	r5, [sp, #0]
 8000f5a:	f7ff fb99 	bl	8000690 <GUI_ShowString>
	GUI_ShowCHinese(36,16,16,"音量设置",0);
 8000f5e:	2210      	movs	r2, #16
 8000f60:	4653      	mov	r3, sl
 8000f62:	4611      	mov	r1, r2
 8000f64:	9500      	str	r5, [sp, #0]
 8000f66:	2024      	movs	r0, #36	; 0x24
 8000f68:	f7ff fce6 	bl	8000938 <GUI_ShowCHinese>
	GUI_Fill(WIDTH-1-9,23,WIDTH-1-1,28,1);
 8000f6c:	463a      	mov	r2, r7
 8000f6e:	231c      	movs	r3, #28
 8000f70:	2117      	movs	r1, #23
 8000f72:	9400      	str	r4, [sp, #0]
 8000f74:	2076      	movs	r0, #118	; 0x76
 8000f76:	f7ff f937 	bl	80001e8 <GUI_Fill>
	//delay_ms(1500);
	HAL_Delay(1500);
 8000f7a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000f7e:	f000 fa8b 	bl	8001498 <HAL_Delay>
	GUI_FillCircle(10, 24, 0,3);
 8000f82:	462a      	mov	r2, r5
 8000f84:	2303      	movs	r3, #3
 8000f86:	2118      	movs	r1, #24
 8000f88:	200a      	movs	r0, #10
 8000f8a:	f7ff f9f4 	bl	8000376 <GUI_FillCircle>
	GUI_DrawCircle(10, 24, 1,3);
 8000f8e:	4622      	mov	r2, r4
 8000f90:	2303      	movs	r3, #3
 8000f92:	2118      	movs	r1, #24
 8000f94:	200a      	movs	r0, #10
 8000f96:	f7ff f9c4 	bl	8000322 <GUI_DrawCircle>
	GUI_Fill(20,16,99,31,0);
 8000f9a:	4630      	mov	r0, r6
 8000f9c:	9500      	str	r5, [sp, #0]
 8000f9e:	231f      	movs	r3, #31
 8000fa0:	2263      	movs	r2, #99	; 0x63
 8000fa2:	2110      	movs	r1, #16
 8000fa4:	f7ff f920 	bl	80001e8 <GUI_Fill>
	GUI_ShowString(20,16,"A.",16,1);
 8000fa8:	2310      	movs	r3, #16
 8000faa:	465a      	mov	r2, fp
 8000fac:	4619      	mov	r1, r3
 8000fae:	4630      	mov	r0, r6
 8000fb0:	9400      	str	r4, [sp, #0]
 8000fb2:	f7ff fb6d 	bl	8000690 <GUI_ShowString>
	GUI_ShowCHinese(36,16,16,"音量设置",1);
 8000fb6:	2210      	movs	r2, #16
 8000fb8:	4653      	mov	r3, sl
 8000fba:	4611      	mov	r1, r2
 8000fbc:	9400      	str	r4, [sp, #0]
 8000fbe:	2024      	movs	r0, #36	; 0x24
 8000fc0:	f7ff fcba 	bl	8000938 <GUI_ShowCHinese>
	GUI_Fill(WIDTH-1-9,23,WIDTH-1-1,28,0);
 8000fc4:	463a      	mov	r2, r7
 8000fc6:	9500      	str	r5, [sp, #0]
 8000fc8:	231c      	movs	r3, #28
 8000fca:	2117      	movs	r1, #23
 8000fcc:	2076      	movs	r0, #118	; 0x76
 8000fce:	f7ff f90b 	bl	80001e8 <GUI_Fill>
	GUI_FillCircle(10, 40, 1,3);
 8000fd2:	4622      	mov	r2, r4
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	2128      	movs	r1, #40	; 0x28
 8000fd8:	200a      	movs	r0, #10
 8000fda:	f7ff f9cc 	bl	8000376 <GUI_FillCircle>
	GUI_Fill(20,32,99,47,1);
 8000fde:	4630      	mov	r0, r6
 8000fe0:	9400      	str	r4, [sp, #0]
 8000fe2:	232f      	movs	r3, #47	; 0x2f
 8000fe4:	2263      	movs	r2, #99	; 0x63
 8000fe6:	2120      	movs	r1, #32
 8000fe8:	f7ff f8fe 	bl	80001e8 <GUI_Fill>
	GUI_ShowString(20,32,"B.",16,0);
 8000fec:	464a      	mov	r2, r9
 8000fee:	4630      	mov	r0, r6
 8000ff0:	9500      	str	r5, [sp, #0]
 8000ff2:	2310      	movs	r3, #16
 8000ff4:	2120      	movs	r1, #32
 8000ff6:	f7ff fb4b 	bl	8000690 <GUI_ShowString>
	GUI_ShowCHinese(36,32,16,"颜色设置",0);
 8000ffa:	4643      	mov	r3, r8
 8000ffc:	9500      	str	r5, [sp, #0]
 8000ffe:	2210      	movs	r2, #16
 8001000:	2120      	movs	r1, #32
 8001002:	2024      	movs	r0, #36	; 0x24
 8001004:	f7ff fc98 	bl	8000938 <GUI_ShowCHinese>
	GUI_Fill(WIDTH-1-9,37,WIDTH-1-1,42,1);
 8001008:	463a      	mov	r2, r7
 800100a:	232a      	movs	r3, #42	; 0x2a
 800100c:	2125      	movs	r1, #37	; 0x25
 800100e:	9400      	str	r4, [sp, #0]
 8001010:	2076      	movs	r0, #118	; 0x76
 8001012:	f7ff f8e9 	bl	80001e8 <GUI_Fill>
	//delay_ms(1500);
	HAL_Delay(1000);
 8001016:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800101a:	f000 fa3d 	bl	8001498 <HAL_Delay>
	GUI_FillCircle(10, 40, 0,3);
 800101e:	462a      	mov	r2, r5
 8001020:	2303      	movs	r3, #3
 8001022:	2128      	movs	r1, #40	; 0x28
 8001024:	200a      	movs	r0, #10
 8001026:	f7ff f9a6 	bl	8000376 <GUI_FillCircle>
	GUI_DrawCircle(10, 40, 1,3);
 800102a:	4622      	mov	r2, r4
 800102c:	2303      	movs	r3, #3
 800102e:	2128      	movs	r1, #40	; 0x28
 8001030:	200a      	movs	r0, #10
 8001032:	f7ff f976 	bl	8000322 <GUI_DrawCircle>
	GUI_Fill(20,32,99,47,0);
 8001036:	4630      	mov	r0, r6
 8001038:	9500      	str	r5, [sp, #0]
 800103a:	232f      	movs	r3, #47	; 0x2f
 800103c:	2263      	movs	r2, #99	; 0x63
 800103e:	2120      	movs	r1, #32
 8001040:	f7ff f8d2 	bl	80001e8 <GUI_Fill>
	GUI_ShowString(20,32,"B.",16,1);
 8001044:	464a      	mov	r2, r9
 8001046:	4630      	mov	r0, r6
 8001048:	9400      	str	r4, [sp, #0]
 800104a:	2310      	movs	r3, #16
 800104c:	2120      	movs	r1, #32
 800104e:	f7ff fb1f 	bl	8000690 <GUI_ShowString>
	GUI_ShowCHinese(36,32,16,"颜色设置",1);
 8001052:	4643      	mov	r3, r8
 8001054:	9400      	str	r4, [sp, #0]
 8001056:	2210      	movs	r2, #16
 8001058:	2120      	movs	r1, #32
 800105a:	2024      	movs	r0, #36	; 0x24
 800105c:	f7ff fc6c 	bl	8000938 <GUI_ShowCHinese>
	GUI_Fill(WIDTH-1-9,37,WIDTH-1-1,42,0);
 8001060:	463a      	mov	r2, r7
 8001062:	9500      	str	r5, [sp, #0]
 8001064:	232a      	movs	r3, #42	; 0x2a
 8001066:	2125      	movs	r1, #37	; 0x25
 8001068:	2076      	movs	r0, #118	; 0x76
 800106a:	f7ff f8bd 	bl	80001e8 <GUI_Fill>
	GUI_FillCircle(10, 56, 1,3);
 800106e:	4622      	mov	r2, r4
 8001070:	2303      	movs	r3, #3
 8001072:	2138      	movs	r1, #56	; 0x38
 8001074:	200a      	movs	r0, #10
 8001076:	f7ff f97e 	bl	8000376 <GUI_FillCircle>
	GUI_Fill(20,48,99,63,1);
 800107a:	4630      	mov	r0, r6
 800107c:	9400      	str	r4, [sp, #0]
 800107e:	233f      	movs	r3, #63	; 0x3f
 8001080:	2263      	movs	r2, #99	; 0x63
 8001082:	2130      	movs	r1, #48	; 0x30
 8001084:	f7ff f8b0 	bl	80001e8 <GUI_Fill>
	GUI_ShowString(20,48,"C.",16,0);
 8001088:	4630      	mov	r0, r6
 800108a:	9500      	str	r5, [sp, #0]
 800108c:	2310      	movs	r3, #16
 800108e:	4a0d      	ldr	r2, [pc, #52]	; (80010c4 <TEST_Menu1+0x2a4>)
 8001090:	2130      	movs	r1, #48	; 0x30
 8001092:	f7ff fafd 	bl	8000690 <GUI_ShowString>
	GUI_ShowCHinese(36,48,16,"网络设置",0);
 8001096:	9500      	str	r5, [sp, #0]
 8001098:	4b0b      	ldr	r3, [pc, #44]	; (80010c8 <TEST_Menu1+0x2a8>)
 800109a:	2210      	movs	r2, #16
 800109c:	2130      	movs	r1, #48	; 0x30
 800109e:	2024      	movs	r0, #36	; 0x24
 80010a0:	f7ff fc4a 	bl	8000938 <GUI_ShowCHinese>
	GUI_Fill(WIDTH-1-9,HEIGHT-1-13,WIDTH-1-1,HEIGHT-1-8,1);
 80010a4:	9400      	str	r4, [sp, #0]
 80010a6:	2337      	movs	r3, #55	; 0x37
 80010a8:	463a      	mov	r2, r7
 80010aa:	2132      	movs	r1, #50	; 0x32
 80010ac:	2076      	movs	r0, #118	; 0x76
 80010ae:	f7ff f89b 	bl	80001e8 <GUI_Fill>
	//delay_ms(1500);
	HAL_Delay(1500);
 80010b2:	f240 50dc 	movw	r0, #1500	; 0x5dc
}
 80010b6:	b005      	add	sp, #20
 80010b8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_Delay(1500);
 80010bc:	f000 b9ec 	b.w	8001498 <HAL_Delay>
 80010c0:	0800396b 	.word	0x0800396b
 80010c4:	0800398c 	.word	0x0800398c
 80010c8:	0800398f 	.word	0x0800398f
 80010cc:	08003974 	.word	0x08003974
 80010d0:	08003977 	.word	0x08003977
 80010d4:	08003980 	.word	0x08003980
 80010d8:	08003983 	.word	0x08003983

080010dc <TEST_Menu2>:
 * @function   :English weather interface display test
 * @parameters :None
 * @retvalue   :None
******************************************************************************/
void TEST_Menu2(void)
{
 80010dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	u8 i;
	srand(123456);
 80010de:	4859      	ldr	r0, [pc, #356]	; (8001244 <TEST_Menu2+0x168>)
	GUI_DrawLine(0, 10, WIDTH-1, 10,1);
 80010e0:	2401      	movs	r4, #1
	srand(123456);
 80010e2:	f001 fb03 	bl	80026ec <srand>
	GUI_DrawLine(0, 10, WIDTH-1, 10,1);
 80010e6:	230a      	movs	r3, #10
 80010e8:	227f      	movs	r2, #127	; 0x7f
 80010ea:	4619      	mov	r1, r3
 80010ec:	2000      	movs	r0, #0
 80010ee:	9400      	str	r4, [sp, #0]
 80010f0:	f7ff f8a1 	bl	8000236 <GUI_DrawLine>
	GUI_DrawLine(WIDTH/2-1,11,WIDTH/2-1,HEIGHT-1,1);
 80010f4:	233f      	movs	r3, #63	; 0x3f
 80010f6:	210b      	movs	r1, #11
 80010f8:	461a      	mov	r2, r3
 80010fa:	4618      	mov	r0, r3
 80010fc:	9400      	str	r4, [sp, #0]
 80010fe:	f7ff f89a 	bl	8000236 <GUI_DrawLine>
	GUI_DrawLine(WIDTH/2-1,10+(HEIGHT-10)/2-1,WIDTH-1,10+(HEIGHT-10)/2-1,1);
 8001102:	2324      	movs	r3, #36	; 0x24
 8001104:	227f      	movs	r2, #127	; 0x7f
 8001106:	4619      	mov	r1, r3
 8001108:	203f      	movs	r0, #63	; 0x3f
 800110a:	9400      	str	r4, [sp, #0]
 800110c:	f7ff f893 	bl	8000236 <GUI_DrawLine>
	GUI_ShowString(0,1,"2018-08-25",8,1);
 8001110:	2308      	movs	r3, #8
 8001112:	4a4d      	ldr	r2, [pc, #308]	; (8001248 <TEST_Menu2+0x16c>)
 8001114:	4621      	mov	r1, r4
 8001116:	2000      	movs	r0, #0
 8001118:	9400      	str	r4, [sp, #0]
 800111a:	f7ff fab9 	bl	8000690 <GUI_ShowString>
	GUI_ShowString(78,1,"Saturday",8,1);
 800111e:	2308      	movs	r3, #8
 8001120:	4a4a      	ldr	r2, [pc, #296]	; (800124c <TEST_Menu2+0x170>)
 8001122:	4621      	mov	r1, r4
 8001124:	204e      	movs	r0, #78	; 0x4e
 8001126:	9400      	str	r4, [sp, #0]
 8001128:	f7ff fab2 	bl	8000690 <GUI_ShowString>
	GUI_ShowString(14,HEIGHT-1-10,"Cloudy",8,1);
 800112c:	2308      	movs	r3, #8
 800112e:	4a48      	ldr	r2, [pc, #288]	; (8001250 <TEST_Menu2+0x174>)
 8001130:	2135      	movs	r1, #53	; 0x35
 8001132:	200e      	movs	r0, #14
 8001134:	9400      	str	r4, [sp, #0]
 8001136:	f7ff faab 	bl	8000690 <GUI_ShowString>
	GUI_ShowString(WIDTH/2-1+2,13,"TEMP",8,1);
 800113a:	2308      	movs	r3, #8
 800113c:	4a45      	ldr	r2, [pc, #276]	; (8001254 <TEST_Menu2+0x178>)
 800113e:	210d      	movs	r1, #13
 8001140:	2041      	movs	r0, #65	; 0x41
 8001142:	9400      	str	r4, [sp, #0]
 8001144:	f7ff faa4 	bl	8000690 <GUI_ShowString>
	GUI_DrawCircle(WIDTH-1-19, 25, 1,2);
 8001148:	2302      	movs	r3, #2
 800114a:	4622      	mov	r2, r4
 800114c:	2119      	movs	r1, #25
 800114e:	206c      	movs	r0, #108	; 0x6c
 8001150:	f7ff f8e7 	bl	8000322 <GUI_DrawCircle>
	GUI_ShowString(WIDTH-1-14,20,"C",16,1);
 8001154:	2310      	movs	r3, #16
 8001156:	4a40      	ldr	r2, [pc, #256]	; (8001258 <TEST_Menu2+0x17c>)
 8001158:	2114      	movs	r1, #20
 800115a:	2071      	movs	r0, #113	; 0x71
 800115c:	9400      	str	r4, [sp, #0]
 800115e:	f7ff fa97 	bl	8000690 <GUI_ShowString>
	GUI_ShowString(WIDTH/2-1+9,20,"32.5",16,1);
 8001162:	2310      	movs	r3, #16
 8001164:	4a3d      	ldr	r2, [pc, #244]	; (800125c <TEST_Menu2+0x180>)
 8001166:	2114      	movs	r1, #20
 8001168:	2048      	movs	r0, #72	; 0x48
 800116a:	9400      	str	r4, [sp, #0]
 800116c:	f7ff fa90 	bl	8000690 <GUI_ShowString>
	GUI_ShowString(WIDTH/2-1+2,39,"PM2.5",8,1);
 8001170:	2308      	movs	r3, #8
 8001172:	4a3b      	ldr	r2, [pc, #236]	; (8001260 <TEST_Menu2+0x184>)
 8001174:	2127      	movs	r1, #39	; 0x27
 8001176:	2041      	movs	r0, #65	; 0x41
 8001178:	9400      	str	r4, [sp, #0]
 800117a:	f7ff fa89 	bl	8000690 <GUI_ShowString>
	GUI_ShowString(WIDTH/2-1+5,46,"90ug/m3",16,1);
 800117e:	2310      	movs	r3, #16
 8001180:	4a38      	ldr	r2, [pc, #224]	; (8001264 <TEST_Menu2+0x188>)
 8001182:	212e      	movs	r1, #46	; 0x2e
 8001184:	2044      	movs	r0, #68	; 0x44
 8001186:	9400      	str	r4, [sp, #0]
 8001188:	f7ff fa82 	bl	8000690 <GUI_ShowString>
	GUI_DrawBMP(6,16,51,32, BMP5, 1);
 800118c:	4b36      	ldr	r3, [pc, #216]	; (8001268 <TEST_Menu2+0x18c>)
 800118e:	9401      	str	r4, [sp, #4]
 8001190:	9300      	str	r3, [sp, #0]
 8001192:	2233      	movs	r2, #51	; 0x33
 8001194:	2320      	movs	r3, #32
 8001196:	2110      	movs	r1, #16
 8001198:	2006      	movs	r0, #6
 800119a:	f7ff fbfe 	bl	800099a <GUI_DrawBMP>
 800119e:	260f      	movs	r6, #15
	for(i=0;i<15;i++)
	{
		GUI_ShowNum(WIDTH/2-1+9,20,rand()%4,1,16,1);
 80011a0:	f001 facc 	bl	800273c <rand>
 80011a4:	2710      	movs	r7, #16
 80011a6:	4241      	negs	r1, r0
 80011a8:	f001 0103 	and.w	r1, r1, #3
 80011ac:	f000 0203 	and.w	r2, r0, #3
 80011b0:	f04f 0301 	mov.w	r3, #1
 80011b4:	bf58      	it	pl
 80011b6:	424a      	negpl	r2, r1
 80011b8:	2048      	movs	r0, #72	; 0x48
 80011ba:	2114      	movs	r1, #20
 80011bc:	9401      	str	r4, [sp, #4]
 80011be:	9700      	str	r7, [sp, #0]
		GUI_ShowNum(WIDTH/2-1+9+8,20,rand()%10,1,16,1);
 80011c0:	250a      	movs	r5, #10
		GUI_ShowNum(WIDTH/2-1+9,20,rand()%4,1,16,1);
 80011c2:	f7ff fa8e 	bl	80006e2 <GUI_ShowNum>
		GUI_ShowNum(WIDTH/2-1+9+8,20,rand()%10,1,16,1);
 80011c6:	f001 fab9 	bl	800273c <rand>
 80011ca:	fb90 f2f5 	sdiv	r2, r0, r5
 80011ce:	2301      	movs	r3, #1
 80011d0:	fb02 0215 	mls	r2, r2, r5, r0
 80011d4:	2114      	movs	r1, #20
 80011d6:	2050      	movs	r0, #80	; 0x50
 80011d8:	9401      	str	r4, [sp, #4]
 80011da:	9700      	str	r7, [sp, #0]
 80011dc:	f7ff fa81 	bl	80006e2 <GUI_ShowNum>
		GUI_ShowNum(WIDTH/2-1+9+8+16,20,rand()%10,1,16,1);
 80011e0:	f001 faac 	bl	800273c <rand>
 80011e4:	fb90 f2f5 	sdiv	r2, r0, r5
 80011e8:	2301      	movs	r3, #1
 80011ea:	fb02 0215 	mls	r2, r2, r5, r0
 80011ee:	2114      	movs	r1, #20
 80011f0:	2060      	movs	r0, #96	; 0x60
 80011f2:	9401      	str	r4, [sp, #4]
 80011f4:	9700      	str	r7, [sp, #0]
 80011f6:	f7ff fa74 	bl	80006e2 <GUI_ShowNum>
		GUI_ShowNum(WIDTH/2-1+5,46,rand()%10,1,16,1);
 80011fa:	f001 fa9f 	bl	800273c <rand>
 80011fe:	fb90 f2f5 	sdiv	r2, r0, r5
 8001202:	2301      	movs	r3, #1
 8001204:	fb02 0215 	mls	r2, r2, r5, r0
 8001208:	212e      	movs	r1, #46	; 0x2e
 800120a:	2044      	movs	r0, #68	; 0x44
 800120c:	9401      	str	r4, [sp, #4]
 800120e:	9700      	str	r7, [sp, #0]
 8001210:	f7ff fa67 	bl	80006e2 <GUI_ShowNum>
		GUI_ShowNum(WIDTH/2-1+5+8,46,rand()%10,1,16,1);
 8001214:	f001 fa92 	bl	800273c <rand>
 8001218:	fb90 f2f5 	sdiv	r2, r0, r5
 800121c:	2301      	movs	r3, #1
 800121e:	fb02 0215 	mls	r2, r2, r5, r0
 8001222:	212e      	movs	r1, #46	; 0x2e
 8001224:	204c      	movs	r0, #76	; 0x4c
 8001226:	9401      	str	r4, [sp, #4]
 8001228:	9700      	str	r7, [sp, #0]
 800122a:	f7ff fa5a 	bl	80006e2 <GUI_ShowNum>
 800122e:	3e01      	subs	r6, #1
        //delay_ms(500);
		HAL_Delay(500);
 8001230:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001234:	f000 f930 	bl	8001498 <HAL_Delay>
	for(i=0;i<15;i++)
 8001238:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 800123c:	d1b0      	bne.n	80011a0 <TEST_Menu2+0xc4>
	}
}
 800123e:	b003      	add	sp, #12
 8001240:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001242:	bf00      	nop
 8001244:	0001e240 	.word	0x0001e240
 8001248:	08003998 	.word	0x08003998
 800124c:	080039a3 	.word	0x080039a3
 8001250:	080039ac 	.word	0x080039ac
 8001254:	080039b3 	.word	0x080039b3
 8001258:	080039b8 	.word	0x080039b8
 800125c:	080039ba 	.word	0x080039ba
 8001260:	080039bf 	.word	0x080039bf
 8001264:	080039c5 	.word	0x080039c5
 8001268:	20000c00 	.word	0x20000c00

0800126c <OLED_WR_Byte>:
                cmd:0-write command
								    1-write data
 * @retvalue   :None
********************************************************************/
void OLED_WR_Byte(unsigned dat,unsigned cmd)
{
 800126c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t buf[2];

	buf[0] = cmd;
	buf[1] = dat;

	HAL_I2C_Master_Transmit(&hi2c2, OLED_I2C_ADDR, buf, sizeof(buf), 0xFFFFFFFF);
 800126e:	f04f 33ff 	mov.w	r3, #4294967295
	buf[0] = cmd;
 8001272:	f88d 100c 	strb.w	r1, [sp, #12]
	buf[1] = dat;
 8001276:	f88d 000d 	strb.w	r0, [sp, #13]
	HAL_I2C_Master_Transmit(&hi2c2, OLED_I2C_ADDR, buf, sizeof(buf), 0xFFFFFFFF);
 800127a:	9300      	str	r3, [sp, #0]
 800127c:	aa03      	add	r2, sp, #12
 800127e:	2302      	movs	r3, #2
 8001280:	2178      	movs	r1, #120	; 0x78
 8001282:	4803      	ldr	r0, [pc, #12]	; (8001290 <OLED_WR_Byte+0x24>)
 8001284:	f000 fbaa 	bl	80019dc <HAL_I2C_Master_Transmit>
	else
	{
		Write_IIC_Command(dat);
	}
#endif
}
 8001288:	b005      	add	sp, #20
 800128a:	f85d fb04 	ldr.w	pc, [sp], #4
 800128e:	bf00      	nop
 8001290:	2000117c 	.word	0x2000117c

08001294 <OLED_Set_Pixel>:
								      1-white
											0-black
 * @retvalue   :None
********************************************************************/ 
void OLED_Set_Pixel(unsigned char x, unsigned char y,unsigned char color)
{
 8001294:	08cb      	lsrs	r3, r1, #3
 8001296:	b510      	push	{r4, lr}
	if(color)
	{
		OLED_buffer[(y/PAGE_SIZE)*WIDTH+x]|= (1<<(y%PAGE_SIZE))&0xff;
 8001298:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 800129c:	4c07      	ldr	r4, [pc, #28]	; (80012bc <OLED_Set_Pixel+0x28>)
 800129e:	f001 0107 	and.w	r1, r1, #7
 80012a2:	2301      	movs	r3, #1
	if(color)
 80012a4:	b12a      	cbz	r2, 80012b2 <OLED_Set_Pixel+0x1e>
		OLED_buffer[(y/PAGE_SIZE)*WIDTH+x]|= (1<<(y%PAGE_SIZE))&0xff;
 80012a6:	fa03 f101 	lsl.w	r1, r3, r1
 80012aa:	5c23      	ldrb	r3, [r4, r0]
 80012ac:	4319      	orrs	r1, r3
	}
	else
	{
		OLED_buffer[(y/PAGE_SIZE)*WIDTH+x]&= ~((1<<(y%PAGE_SIZE))&0xff);
 80012ae:	5421      	strb	r1, [r4, r0]
 80012b0:	bd10      	pop	{r4, pc}
 80012b2:	408b      	lsls	r3, r1
 80012b4:	5c21      	ldrb	r1, [r4, r0]
 80012b6:	ea21 0103 	bic.w	r1, r1, r3
 80012ba:	e7f8      	b.n	80012ae <OLED_Set_Pixel+0x1a>
 80012bc:	20000d6c 	.word	0x20000d6c

080012c0 <OLED_Display>:
 * @function   :Display in OLED screen
 * @parameters :None
 * @retvalue   :None
********************************************************************/  
void OLED_Display(void)
{
 80012c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012c2:	24b0      	movs	r4, #176	; 0xb0
 80012c4:	4f0e      	ldr	r7, [pc, #56]	; (8001300 <OLED_Display+0x40>)
	u8 i,n;		    
	for(i=0;i<PAGE_SIZE;i++)  
	{  
		OLED_WR_Byte (YLevel+i,OLED_CMD);    //设置页地址（0~7）
		OLED_WR_Byte (XLevelL,OLED_CMD);      //设置显示位置―列低地址
		OLED_WR_Byte (XLevelH,OLED_CMD);      //设置显示位置―列高地址   
 80012c6:	2600      	movs	r6, #0
		OLED_WR_Byte (YLevel+i,OLED_CMD);    //设置页地址（0~7）
 80012c8:	2100      	movs	r1, #0
 80012ca:	4620      	mov	r0, r4
 80012cc:	f7ff ffce 	bl	800126c <OLED_WR_Byte>
		OLED_WR_Byte (XLevelL,OLED_CMD);      //设置显示位置―列低地址
 80012d0:	2100      	movs	r1, #0
 80012d2:	2002      	movs	r0, #2
 80012d4:	f7ff ffca 	bl	800126c <OLED_WR_Byte>
		OLED_WR_Byte (XLevelH,OLED_CMD);      //设置显示位置―列高地址   
 80012d8:	2100      	movs	r1, #0
 80012da:	2010      	movs	r0, #16
 80012dc:	f7ff ffc6 	bl	800126c <OLED_WR_Byte>
 80012e0:	f104 7300 	add.w	r3, r4, #33554432	; 0x2000000
 80012e4:	3bb0      	subs	r3, #176	; 0xb0
 80012e6:	eb07 15c3 	add.w	r5, r7, r3, lsl #7
		for(n=0;n<WIDTH;n++)
		{
			OLED_WR_Byte(OLED_buffer[i*WIDTH+n],OLED_DATA); 
 80012ea:	5da8      	ldrb	r0, [r5, r6]
 80012ec:	2140      	movs	r1, #64	; 0x40
 80012ee:	3601      	adds	r6, #1
 80012f0:	f7ff ffbc 	bl	800126c <OLED_WR_Byte>
		for(n=0;n<WIDTH;n++)
 80012f4:	2e80      	cmp	r6, #128	; 0x80
 80012f6:	d1f8      	bne.n	80012ea <OLED_Display+0x2a>
 80012f8:	3401      	adds	r4, #1
	for(i=0;i<PAGE_SIZE;i++)  
 80012fa:	2cb8      	cmp	r4, #184	; 0xb8
 80012fc:	d1e3      	bne.n	80012c6 <OLED_Display+0x6>
		}
	}   //更新显示
}
 80012fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001300:	20000d6c 	.word	0x20000d6c

08001304 <OLED_Clear>:
 * @parameters :dat:0-Display full black
                    1-Display full white
 * @retvalue   :None
********************************************************************/ 
void OLED_Clear(unsigned dat)  
{  
 8001304:	b508      	push	{r3, lr}
	if(dat)
 8001306:	4601      	mov	r1, r0
	{
		memset(OLED_buffer,0xff,sizeof(OLED_buffer));
 8001308:	f44f 6280 	mov.w	r2, #1024	; 0x400
	if(dat)
 800130c:	b138      	cbz	r0, 800131e <OLED_Clear+0x1a>
		memset(OLED_buffer,0xff,sizeof(OLED_buffer));
 800130e:	21ff      	movs	r1, #255	; 0xff
 8001310:	4805      	ldr	r0, [pc, #20]	; (8001328 <OLED_Clear+0x24>)
 8001312:	f001 f9e3 	bl	80026dc <memset>
	else
	{
		memset(OLED_buffer,0,sizeof(OLED_buffer));
	}
	OLED_Display();
}
 8001316:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	OLED_Display();
 800131a:	f7ff bfd1 	b.w	80012c0 <OLED_Display>
		memset(OLED_buffer,0,sizeof(OLED_buffer));
 800131e:	4802      	ldr	r0, [pc, #8]	; (8001328 <OLED_Clear+0x24>)
 8001320:	f001 f9dc 	bl	80026dc <memset>
 8001324:	e7f7      	b.n	8001316 <OLED_Clear+0x12>
 8001326:	bf00      	nop
 8001328:	20000d6c 	.word	0x20000d6c

0800132c <OLED_Init>:
 * @function   :initialise OLED SH1106 control IC
 * @parameters :None
 * @retvalue   :None
********************************************************************/ 				    
void OLED_Init(void)
{
 800132c:	b508      	push	{r3, lr}
 	//OLED_Init_GPIO(); //初始化GPIO
 	//delay_ms(200);
	HAL_Delay(200);
 800132e:	20c8      	movs	r0, #200	; 0xc8
 8001330:	f000 f8b2 	bl	8001498 <HAL_Delay>

/**************初始化SH1106*****************/	
	OLED_WR_Byte(0xAE,OLED_CMD);    /*display off*/       
 8001334:	2100      	movs	r1, #0
 8001336:	20ae      	movs	r0, #174	; 0xae
 8001338:	f7ff ff98 	bl	800126c <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD);    /*set lower column address*/       
 800133c:	2100      	movs	r1, #0
 800133e:	2002      	movs	r0, #2
 8001340:	f7ff ff94 	bl	800126c <OLED_WR_Byte>
	OLED_WR_Byte(0x10,OLED_CMD);    /*set higher column address*/     
 8001344:	2100      	movs	r1, #0
 8001346:	2010      	movs	r0, #16
 8001348:	f7ff ff90 	bl	800126c <OLED_WR_Byte>
	OLED_WR_Byte(0x40,OLED_CMD);    /*set display start line*/     
 800134c:	2100      	movs	r1, #0
 800134e:	2040      	movs	r0, #64	; 0x40
 8001350:	f7ff ff8c 	bl	800126c <OLED_WR_Byte>
	OLED_WR_Byte(0xB0,OLED_CMD);    /*set page address*/     
 8001354:	2100      	movs	r1, #0
 8001356:	20b0      	movs	r0, #176	; 0xb0
 8001358:	f7ff ff88 	bl	800126c <OLED_WR_Byte>
	OLED_WR_Byte(0x81,OLED_CMD);    /*contract control*/
 800135c:	2100      	movs	r1, #0
 800135e:	2081      	movs	r0, #129	; 0x81
 8001360:	f7ff ff84 	bl	800126c <OLED_WR_Byte>
	OLED_WR_Byte(0xFF,OLED_CMD);    /*128*/     
 8001364:	2100      	movs	r1, #0
 8001366:	20ff      	movs	r0, #255	; 0xff
 8001368:	f7ff ff80 	bl	800126c <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD);    /*set segment remap*/    
 800136c:	2100      	movs	r1, #0
 800136e:	20a1      	movs	r0, #161	; 0xa1
 8001370:	f7ff ff7c 	bl	800126c <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD);    /*normal / reverse*/     
 8001374:	2100      	movs	r1, #0
 8001376:	20a6      	movs	r0, #166	; 0xa6
 8001378:	f7ff ff78 	bl	800126c <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD);    /*multiplex ratio*/
 800137c:	2100      	movs	r1, #0
 800137e:	20a8      	movs	r0, #168	; 0xa8
 8001380:	f7ff ff74 	bl	800126c <OLED_WR_Byte>
	OLED_WR_Byte(0x3F,OLED_CMD);    /*duty = 1/64*/     
 8001384:	2100      	movs	r1, #0
 8001386:	203f      	movs	r0, #63	; 0x3f
 8001388:	f7ff ff70 	bl	800126c <OLED_WR_Byte>
	OLED_WR_Byte(0xAD,OLED_CMD);    /*set charge pump enable*/
 800138c:	2100      	movs	r1, #0
 800138e:	20ad      	movs	r0, #173	; 0xad
 8001390:	f7ff ff6c 	bl	800126c <OLED_WR_Byte>
	OLED_WR_Byte(0x8B,OLED_CMD);     /*    0x8B    内供VCC   */     
 8001394:	2100      	movs	r1, #0
 8001396:	208b      	movs	r0, #139	; 0x8b
 8001398:	f7ff ff68 	bl	800126c <OLED_WR_Byte>
	OLED_WR_Byte(0x32,OLED_CMD);    /*0X30---0X33  set VPP   8V */     
 800139c:	2100      	movs	r1, #0
 800139e:	2032      	movs	r0, #50	; 0x32
 80013a0:	f7ff ff64 	bl	800126c <OLED_WR_Byte>
	OLED_WR_Byte(0xC8,OLED_CMD);    /*Com scan direction*/     
 80013a4:	2100      	movs	r1, #0
 80013a6:	20c8      	movs	r0, #200	; 0xc8
 80013a8:	f7ff ff60 	bl	800126c <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);    /*set display offset*/
 80013ac:	2100      	movs	r1, #0
 80013ae:	20d3      	movs	r0, #211	; 0xd3
 80013b0:	f7ff ff5c 	bl	800126c <OLED_WR_Byte>
	OLED_WR_Byte(0x00,OLED_CMD);   /*   0x20  */     
 80013b4:	2100      	movs	r1, #0
 80013b6:	4608      	mov	r0, r1
 80013b8:	f7ff ff58 	bl	800126c <OLED_WR_Byte>
	OLED_WR_Byte(0xD5,OLED_CMD);    /*set osc division*/
 80013bc:	2100      	movs	r1, #0
 80013be:	20d5      	movs	r0, #213	; 0xd5
 80013c0:	f7ff ff54 	bl	800126c <OLED_WR_Byte>
	OLED_WR_Byte(0x80,OLED_CMD);         
 80013c4:	2100      	movs	r1, #0
 80013c6:	2080      	movs	r0, #128	; 0x80
 80013c8:	f7ff ff50 	bl	800126c <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD);    /*set pre-charge period*/
 80013cc:	2100      	movs	r1, #0
 80013ce:	20d9      	movs	r0, #217	; 0xd9
 80013d0:	f7ff ff4c 	bl	800126c <OLED_WR_Byte>
	OLED_WR_Byte(0x1F,OLED_CMD);    /*0x22*/     
 80013d4:	2100      	movs	r1, #0
 80013d6:	201f      	movs	r0, #31
 80013d8:	f7ff ff48 	bl	800126c <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD);    /*set COM pins*/
 80013dc:	2100      	movs	r1, #0
 80013de:	20da      	movs	r0, #218	; 0xda
 80013e0:	f7ff ff44 	bl	800126c <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD);     
 80013e4:	2100      	movs	r1, #0
 80013e6:	2012      	movs	r0, #18
 80013e8:	f7ff ff40 	bl	800126c <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD);    /*set vcomh*/
 80013ec:	2100      	movs	r1, #0
 80013ee:	20db      	movs	r0, #219	; 0xdb
 80013f0:	f7ff ff3c 	bl	800126c <OLED_WR_Byte>
	OLED_WR_Byte(0x40,OLED_CMD);                
 80013f4:	2100      	movs	r1, #0
 80013f6:	2040      	movs	r0, #64	; 0x40
 80013f8:	f7ff ff38 	bl	800126c <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD);    /*display ON*/    
}
 80013fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	OLED_WR_Byte(0xAF,OLED_CMD);    /*display ON*/    
 8001400:	2100      	movs	r1, #0
 8001402:	20af      	movs	r0, #175	; 0xaf
 8001404:	f7ff bf32 	b.w	800126c <OLED_WR_Byte>

08001408 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001408:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800140a:	4b0e      	ldr	r3, [pc, #56]	; (8001444 <HAL_InitTick+0x3c>)
{
 800140c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800140e:	7818      	ldrb	r0, [r3, #0]
 8001410:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001414:	fbb3 f3f0 	udiv	r3, r3, r0
 8001418:	4a0b      	ldr	r2, [pc, #44]	; (8001448 <HAL_InitTick+0x40>)
 800141a:	6810      	ldr	r0, [r2, #0]
 800141c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001420:	f000 f892 	bl	8001548 <HAL_SYSTICK_Config>
 8001424:	4604      	mov	r4, r0
 8001426:	b958      	cbnz	r0, 8001440 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001428:	2d0f      	cmp	r5, #15
 800142a:	d809      	bhi.n	8001440 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800142c:	4602      	mov	r2, r0
 800142e:	4629      	mov	r1, r5
 8001430:	f04f 30ff 	mov.w	r0, #4294967295
 8001434:	f000 f854 	bl	80014e0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001438:	4b04      	ldr	r3, [pc, #16]	; (800144c <HAL_InitTick+0x44>)
 800143a:	4620      	mov	r0, r4
 800143c:	601d      	str	r5, [r3, #0]
 800143e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001440:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001442:	bd38      	pop	{r3, r4, r5, pc}
 8001444:	20000ce0 	.word	0x20000ce0
 8001448:	20000ce8 	.word	0x20000ce8
 800144c:	20000ce4 	.word	0x20000ce4

08001450 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001450:	4a07      	ldr	r2, [pc, #28]	; (8001470 <HAL_Init+0x20>)
{
 8001452:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001454:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001456:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001458:	f043 0310 	orr.w	r3, r3, #16
 800145c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800145e:	f000 f82d 	bl	80014bc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001462:	2000      	movs	r0, #0
 8001464:	f7ff ffd0 	bl	8001408 <HAL_InitTick>
  HAL_MspInit();
 8001468:	f001 f824 	bl	80024b4 <HAL_MspInit>
}
 800146c:	2000      	movs	r0, #0
 800146e:	bd08      	pop	{r3, pc}
 8001470:	40022000 	.word	0x40022000

08001474 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001474:	4a03      	ldr	r2, [pc, #12]	; (8001484 <HAL_IncTick+0x10>)
 8001476:	4b04      	ldr	r3, [pc, #16]	; (8001488 <HAL_IncTick+0x14>)
 8001478:	6811      	ldr	r1, [r2, #0]
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	440b      	add	r3, r1
 800147e:	6013      	str	r3, [r2, #0]
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	20001178 	.word	0x20001178
 8001488:	20000ce0 	.word	0x20000ce0

0800148c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800148c:	4b01      	ldr	r3, [pc, #4]	; (8001494 <HAL_GetTick+0x8>)
 800148e:	6818      	ldr	r0, [r3, #0]
}
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	20001178 	.word	0x20001178

08001498 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001498:	b538      	push	{r3, r4, r5, lr}
 800149a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800149c:	f7ff fff6 	bl	800148c <HAL_GetTick>
 80014a0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014a2:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80014a4:	bf1e      	ittt	ne
 80014a6:	4b04      	ldrne	r3, [pc, #16]	; (80014b8 <HAL_Delay+0x20>)
 80014a8:	781b      	ldrbne	r3, [r3, #0]
 80014aa:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014ac:	f7ff ffee 	bl	800148c <HAL_GetTick>
 80014b0:	1b40      	subs	r0, r0, r5
 80014b2:	4284      	cmp	r4, r0
 80014b4:	d8fa      	bhi.n	80014ac <HAL_Delay+0x14>
  {
  }
}
 80014b6:	bd38      	pop	{r3, r4, r5, pc}
 80014b8:	20000ce0 	.word	0x20000ce0

080014bc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014bc:	4a07      	ldr	r2, [pc, #28]	; (80014dc <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80014be:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014c0:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80014c2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014c6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80014ca:	041b      	lsls	r3, r3, #16
 80014cc:	0c1b      	lsrs	r3, r3, #16
 80014ce:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80014d6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80014d8:	60d3      	str	r3, [r2, #12]
 80014da:	4770      	bx	lr
 80014dc:	e000ed00 	.word	0xe000ed00

080014e0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014e0:	4b17      	ldr	r3, [pc, #92]	; (8001540 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014e2:	b530      	push	{r4, r5, lr}
 80014e4:	68dc      	ldr	r4, [r3, #12]
 80014e6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014ea:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ee:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014f0:	2b04      	cmp	r3, #4
 80014f2:	bf28      	it	cs
 80014f4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014f6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f8:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014fc:	bf98      	it	ls
 80014fe:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001500:	fa05 f303 	lsl.w	r3, r5, r3
 8001504:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001508:	bf88      	it	hi
 800150a:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800150c:	4019      	ands	r1, r3
 800150e:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001510:	fa05 f404 	lsl.w	r4, r5, r4
 8001514:	3c01      	subs	r4, #1
 8001516:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8001518:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800151a:	ea42 0201 	orr.w	r2, r2, r1
 800151e:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001522:	bfaf      	iteee	ge
 8001524:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001528:	4b06      	ldrlt	r3, [pc, #24]	; (8001544 <HAL_NVIC_SetPriority+0x64>)
 800152a:	f000 000f 	andlt.w	r0, r0, #15
 800152e:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001530:	bfa5      	ittet	ge
 8001532:	b2d2      	uxtbge	r2, r2
 8001534:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001538:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800153a:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800153e:	bd30      	pop	{r4, r5, pc}
 8001540:	e000ed00 	.word	0xe000ed00
 8001544:	e000ed14 	.word	0xe000ed14

08001548 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001548:	3801      	subs	r0, #1
 800154a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800154e:	d20a      	bcs.n	8001566 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001550:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001552:	4b06      	ldr	r3, [pc, #24]	; (800156c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001554:	4a06      	ldr	r2, [pc, #24]	; (8001570 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001556:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001558:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800155c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800155e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001560:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001566:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	e000e010 	.word	0xe000e010
 8001570:	e000ed00 	.word	0xe000ed00

08001574 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001574:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8001578:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800157a:	4616      	mov	r6, r2
 800157c:	4b65      	ldr	r3, [pc, #404]	; (8001714 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800157e:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8001724 <HAL_GPIO_Init+0x1b0>
 8001582:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8001728 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 8001586:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800158a:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 800158c:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001590:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8001594:	45a0      	cmp	r8, r4
 8001596:	d17f      	bne.n	8001698 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8001598:	684d      	ldr	r5, [r1, #4]
 800159a:	2d12      	cmp	r5, #18
 800159c:	f000 80af 	beq.w	80016fe <HAL_GPIO_Init+0x18a>
 80015a0:	f200 8088 	bhi.w	80016b4 <HAL_GPIO_Init+0x140>
 80015a4:	2d02      	cmp	r5, #2
 80015a6:	f000 80a7 	beq.w	80016f8 <HAL_GPIO_Init+0x184>
 80015aa:	d87c      	bhi.n	80016a6 <HAL_GPIO_Init+0x132>
 80015ac:	2d00      	cmp	r5, #0
 80015ae:	f000 808e 	beq.w	80016ce <HAL_GPIO_Init+0x15a>
 80015b2:	2d01      	cmp	r5, #1
 80015b4:	f000 809e 	beq.w	80016f4 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015b8:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015bc:	2cff      	cmp	r4, #255	; 0xff
 80015be:	bf93      	iteet	ls
 80015c0:	4682      	movls	sl, r0
 80015c2:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 80015c6:	3d08      	subhi	r5, #8
 80015c8:	f8d0 b000 	ldrls.w	fp, [r0]
 80015cc:	bf92      	itee	ls
 80015ce:	00b5      	lslls	r5, r6, #2
 80015d0:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 80015d4:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015d6:	fa09 f805 	lsl.w	r8, r9, r5
 80015da:	ea2b 0808 	bic.w	r8, fp, r8
 80015de:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015e2:	bf88      	it	hi
 80015e4:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015e8:	ea48 0505 	orr.w	r5, r8, r5
 80015ec:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015f0:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80015f4:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80015f8:	d04e      	beq.n	8001698 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015fa:	4d47      	ldr	r5, [pc, #284]	; (8001718 <HAL_GPIO_Init+0x1a4>)
 80015fc:	4f46      	ldr	r7, [pc, #280]	; (8001718 <HAL_GPIO_Init+0x1a4>)
 80015fe:	69ad      	ldr	r5, [r5, #24]
 8001600:	f026 0803 	bic.w	r8, r6, #3
 8001604:	f045 0501 	orr.w	r5, r5, #1
 8001608:	61bd      	str	r5, [r7, #24]
 800160a:	69bd      	ldr	r5, [r7, #24]
 800160c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8001610:	f005 0501 	and.w	r5, r5, #1
 8001614:	9501      	str	r5, [sp, #4]
 8001616:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800161a:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800161e:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001620:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8001624:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001628:	fa09 f90b 	lsl.w	r9, r9, fp
 800162c:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001630:	4d3a      	ldr	r5, [pc, #232]	; (800171c <HAL_GPIO_Init+0x1a8>)
 8001632:	42a8      	cmp	r0, r5
 8001634:	d068      	beq.n	8001708 <HAL_GPIO_Init+0x194>
 8001636:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800163a:	42a8      	cmp	r0, r5
 800163c:	d066      	beq.n	800170c <HAL_GPIO_Init+0x198>
 800163e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001642:	42a8      	cmp	r0, r5
 8001644:	d064      	beq.n	8001710 <HAL_GPIO_Init+0x19c>
 8001646:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800164a:	42a8      	cmp	r0, r5
 800164c:	bf0c      	ite	eq
 800164e:	2503      	moveq	r5, #3
 8001650:	2504      	movne	r5, #4
 8001652:	fa05 f50b 	lsl.w	r5, r5, fp
 8001656:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 800165a:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800165e:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001660:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8001664:	bf14      	ite	ne
 8001666:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001668:	43a5      	biceq	r5, r4
 800166a:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800166c:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800166e:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001672:	bf14      	ite	ne
 8001674:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001676:	43a5      	biceq	r5, r4
 8001678:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800167a:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800167c:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001680:	bf14      	ite	ne
 8001682:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001684:	43a5      	biceq	r5, r4
 8001686:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001688:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800168a:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800168e:	bf14      	ite	ne
 8001690:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001692:	ea25 0404 	biceq.w	r4, r5, r4
 8001696:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001698:	3601      	adds	r6, #1
 800169a:	2e10      	cmp	r6, #16
 800169c:	f47f af73 	bne.w	8001586 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 80016a0:	b003      	add	sp, #12
 80016a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 80016a6:	2d03      	cmp	r5, #3
 80016a8:	d022      	beq.n	80016f0 <HAL_GPIO_Init+0x17c>
 80016aa:	2d11      	cmp	r5, #17
 80016ac:	d184      	bne.n	80015b8 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016ae:	68ca      	ldr	r2, [r1, #12]
 80016b0:	3204      	adds	r2, #4
          break;
 80016b2:	e781      	b.n	80015b8 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80016b4:	4f1a      	ldr	r7, [pc, #104]	; (8001720 <HAL_GPIO_Init+0x1ac>)
 80016b6:	42bd      	cmp	r5, r7
 80016b8:	d009      	beq.n	80016ce <HAL_GPIO_Init+0x15a>
 80016ba:	d812      	bhi.n	80016e2 <HAL_GPIO_Init+0x16e>
 80016bc:	f8df 906c 	ldr.w	r9, [pc, #108]	; 800172c <HAL_GPIO_Init+0x1b8>
 80016c0:	454d      	cmp	r5, r9
 80016c2:	d004      	beq.n	80016ce <HAL_GPIO_Init+0x15a>
 80016c4:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80016c8:	454d      	cmp	r5, r9
 80016ca:	f47f af75 	bne.w	80015b8 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016ce:	688a      	ldr	r2, [r1, #8]
 80016d0:	b1c2      	cbz	r2, 8001704 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016d2:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 80016d4:	bf0c      	ite	eq
 80016d6:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 80016da:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016de:	2208      	movs	r2, #8
 80016e0:	e76a      	b.n	80015b8 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80016e2:	4575      	cmp	r5, lr
 80016e4:	d0f3      	beq.n	80016ce <HAL_GPIO_Init+0x15a>
 80016e6:	4565      	cmp	r5, ip
 80016e8:	d0f1      	beq.n	80016ce <HAL_GPIO_Init+0x15a>
 80016ea:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8001730 <HAL_GPIO_Init+0x1bc>
 80016ee:	e7eb      	b.n	80016c8 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016f0:	2200      	movs	r2, #0
 80016f2:	e761      	b.n	80015b8 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80016f4:	68ca      	ldr	r2, [r1, #12]
          break;
 80016f6:	e75f      	b.n	80015b8 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016f8:	68ca      	ldr	r2, [r1, #12]
 80016fa:	3208      	adds	r2, #8
          break;
 80016fc:	e75c      	b.n	80015b8 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016fe:	68ca      	ldr	r2, [r1, #12]
 8001700:	320c      	adds	r2, #12
          break;
 8001702:	e759      	b.n	80015b8 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001704:	2204      	movs	r2, #4
 8001706:	e757      	b.n	80015b8 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001708:	2500      	movs	r5, #0
 800170a:	e7a2      	b.n	8001652 <HAL_GPIO_Init+0xde>
 800170c:	2501      	movs	r5, #1
 800170e:	e7a0      	b.n	8001652 <HAL_GPIO_Init+0xde>
 8001710:	2502      	movs	r5, #2
 8001712:	e79e      	b.n	8001652 <HAL_GPIO_Init+0xde>
 8001714:	40010400 	.word	0x40010400
 8001718:	40021000 	.word	0x40021000
 800171c:	40010800 	.word	0x40010800
 8001720:	10210000 	.word	0x10210000
 8001724:	10310000 	.word	0x10310000
 8001728:	10320000 	.word	0x10320000
 800172c:	10110000 	.word	0x10110000
 8001730:	10220000 	.word	0x10220000

08001734 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001734:	b10a      	cbz	r2, 800173a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001736:	6101      	str	r1, [r0, #16]
 8001738:	4770      	bx	lr
 800173a:	0409      	lsls	r1, r1, #16
 800173c:	e7fb      	b.n	8001736 <HAL_GPIO_WritePin+0x2>

0800173e <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800173e:	6802      	ldr	r2, [r0, #0]
 8001740:	6953      	ldr	r3, [r2, #20]
 8001742:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8001746:	d00d      	beq.n	8001764 <I2C_IsAcknowledgeFailed+0x26>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001748:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 800174c:	6153      	str	r3, [r2, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800174e:	2304      	movs	r3, #4
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 8001750:	2220      	movs	r2, #32
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001752:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8001754:	2300      	movs	r3, #0
 8001756:	6303      	str	r3, [r0, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001758:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    hi2c->State= HAL_I2C_STATE_READY;
 800175c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_ERROR;
 8001760:	2001      	movs	r0, #1
 8001762:	4770      	bx	lr
  }
  return HAL_OK;
 8001764:	4618      	mov	r0, r3
}
 8001766:	4770      	bx	lr

08001768 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8001768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800176c:	4604      	mov	r4, r0
 800176e:	4617      	mov	r7, r2
 8001770:	4699      	mov	r9, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001772:	f3c1 4807 	ubfx	r8, r1, #16, #8
 8001776:	b28e      	uxth	r6, r1
 8001778:	6825      	ldr	r5, [r4, #0]
 800177a:	f1b8 0f01 	cmp.w	r8, #1
 800177e:	bf0c      	ite	eq
 8001780:	696b      	ldreq	r3, [r5, #20]
 8001782:	69ab      	ldrne	r3, [r5, #24]
 8001784:	ea36 0303 	bics.w	r3, r6, r3
 8001788:	bf14      	ite	ne
 800178a:	2001      	movne	r0, #1
 800178c:	2000      	moveq	r0, #0
 800178e:	b908      	cbnz	r0, 8001794 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 8001790:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001794:	696b      	ldr	r3, [r5, #20]
 8001796:	055a      	lsls	r2, r3, #21
 8001798:	d512      	bpl.n	80017c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x58>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800179a:	682b      	ldr	r3, [r5, #0]
      hi2c->State= HAL_I2C_STATE_READY;
 800179c:	2220      	movs	r2, #32
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800179e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017a2:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017a4:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80017a8:	616b      	str	r3, [r5, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80017aa:	2304      	movs	r3, #4
 80017ac:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 80017ae:	2300      	movs	r3, #0
      return HAL_ERROR;
 80017b0:	2001      	movs	r0, #1
      hi2c->PreviousState = I2C_STATE_NONE;
 80017b2:	6323      	str	r3, [r4, #48]	; 0x30
      __HAL_UNLOCK(hi2c);
 80017b4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->State= HAL_I2C_STATE_READY;
 80017b8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 80017bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 80017c0:	1c7b      	adds	r3, r7, #1
 80017c2:	d0d9      	beq.n	8001778 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80017c4:	b94f      	cbnz	r7, 80017da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
        hi2c->PreviousState = I2C_STATE_NONE;
 80017c6:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 80017c8:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80017ca:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80017cc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80017d0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 80017d4:	2003      	movs	r0, #3
 80017d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80017da:	f7ff fe57 	bl	800148c <HAL_GetTick>
 80017de:	eba0 0009 	sub.w	r0, r0, r9
 80017e2:	4287      	cmp	r7, r0
 80017e4:	d2c8      	bcs.n	8001778 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 80017e6:	e7ee      	b.n	80017c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

080017e8 <I2C_WaitOnFlagUntilTimeout>:
{
 80017e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80017ec:	4604      	mov	r4, r0
 80017ee:	4690      	mov	r8, r2
 80017f0:	461f      	mov	r7, r3
 80017f2:	9e08      	ldr	r6, [sp, #32]
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80017f4:	f3c1 4907 	ubfx	r9, r1, #16, #8
 80017f8:	b28d      	uxth	r5, r1
 80017fa:	6823      	ldr	r3, [r4, #0]
 80017fc:	f1b9 0f01 	cmp.w	r9, #1
 8001800:	bf0c      	ite	eq
 8001802:	695b      	ldreq	r3, [r3, #20]
 8001804:	699b      	ldrne	r3, [r3, #24]
 8001806:	ea35 0303 	bics.w	r3, r5, r3
 800180a:	bf0c      	ite	eq
 800180c:	2301      	moveq	r3, #1
 800180e:	2300      	movne	r3, #0
 8001810:	4543      	cmp	r3, r8
 8001812:	d002      	beq.n	800181a <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 8001814:	2000      	movs	r0, #0
}
 8001816:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 800181a:	1c7b      	adds	r3, r7, #1
 800181c:	d0ed      	beq.n	80017fa <I2C_WaitOnFlagUntilTimeout+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800181e:	b95f      	cbnz	r7, 8001838 <I2C_WaitOnFlagUntilTimeout+0x50>
        hi2c->PreviousState = I2C_STATE_NONE;
 8001820:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8001822:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001824:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001826:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 800182a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 800182e:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001830:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8001834:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001838:	f7ff fe28 	bl	800148c <HAL_GetTick>
 800183c:	1b80      	subs	r0, r0, r6
 800183e:	4287      	cmp	r7, r0
 8001840:	d2db      	bcs.n	80017fa <I2C_WaitOnFlagUntilTimeout+0x12>
 8001842:	e7ed      	b.n	8001820 <I2C_WaitOnFlagUntilTimeout+0x38>

08001844 <I2C_WaitOnTXEFlagUntilTimeout>:
{    
 8001844:	b570      	push	{r4, r5, r6, lr}
 8001846:	4604      	mov	r4, r0
 8001848:	460d      	mov	r5, r1
 800184a:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800184c:	6823      	ldr	r3, [r4, #0]
 800184e:	695b      	ldr	r3, [r3, #20]
 8001850:	061b      	lsls	r3, r3, #24
 8001852:	d501      	bpl.n	8001858 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;      
 8001854:	2000      	movs	r0, #0
 8001856:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001858:	4620      	mov	r0, r4
 800185a:	f7ff ff70 	bl	800173e <I2C_IsAcknowledgeFailed>
 800185e:	b9a8      	cbnz	r0, 800188c <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8001860:	1c6a      	adds	r2, r5, #1
 8001862:	d0f3      	beq.n	800184c <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001864:	b965      	cbnz	r5, 8001880 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001866:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8001868:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800186a:	f043 0320 	orr.w	r3, r3, #32
 800186e:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8001870:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 8001872:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 8001874:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001876:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 800187a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 800187e:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001880:	f7ff fe04 	bl	800148c <HAL_GetTick>
 8001884:	1b80      	subs	r0, r0, r6
 8001886:	4285      	cmp	r5, r0
 8001888:	d2e0      	bcs.n	800184c <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 800188a:	e7ec      	b.n	8001866 <I2C_WaitOnTXEFlagUntilTimeout+0x22>
      return HAL_ERROR;
 800188c:	2001      	movs	r0, #1
}
 800188e:	bd70      	pop	{r4, r5, r6, pc}

08001890 <I2C_WaitOnBTFFlagUntilTimeout>:
{  
 8001890:	b570      	push	{r4, r5, r6, lr}
 8001892:	4604      	mov	r4, r0
 8001894:	460d      	mov	r5, r1
 8001896:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001898:	6823      	ldr	r3, [r4, #0]
 800189a:	695b      	ldr	r3, [r3, #20]
 800189c:	075b      	lsls	r3, r3, #29
 800189e:	d501      	bpl.n	80018a4 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 80018a0:	2000      	movs	r0, #0
 80018a2:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80018a4:	4620      	mov	r0, r4
 80018a6:	f7ff ff4a 	bl	800173e <I2C_IsAcknowledgeFailed>
 80018aa:	b9a8      	cbnz	r0, 80018d8 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 80018ac:	1c6a      	adds	r2, r5, #1
 80018ae:	d0f3      	beq.n	8001898 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80018b0:	b965      	cbnz	r5, 80018cc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 80018b4:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018b6:	f043 0320 	orr.w	r3, r3, #32
 80018ba:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 80018bc:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 80018be:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 80018c0:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80018c2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80018c6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 80018ca:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80018cc:	f7ff fdde 	bl	800148c <HAL_GetTick>
 80018d0:	1b80      	subs	r0, r0, r6
 80018d2:	4285      	cmp	r5, r0
 80018d4:	d2e0      	bcs.n	8001898 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 80018d6:	e7ec      	b.n	80018b2 <I2C_WaitOnBTFFlagUntilTimeout+0x22>
      return HAL_ERROR;
 80018d8:	2001      	movs	r0, #1
}
 80018da:	bd70      	pop	{r4, r5, r6, pc}

080018dc <HAL_I2C_Init>:
{
 80018dc:	b538      	push	{r3, r4, r5, lr}
  if(hi2c == NULL)
 80018de:	4604      	mov	r4, r0
 80018e0:	b908      	cbnz	r0, 80018e6 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 80018e2:	2001      	movs	r0, #1
 80018e4:	bd38      	pop	{r3, r4, r5, pc}
  if(hi2c->State == HAL_I2C_STATE_RESET)
 80018e6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80018ea:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80018ee:	b91b      	cbnz	r3, 80018f8 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 80018f0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80018f4:	f000 fd2a 	bl	800234c <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80018f8:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 80018fa:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80018fc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001900:	6813      	ldr	r3, [r2, #0]
 8001902:	f023 0301 	bic.w	r3, r3, #1
 8001906:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001908:	f000 fbb8 	bl	800207c <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800190c:	6863      	ldr	r3, [r4, #4]
 800190e:	4a2f      	ldr	r2, [pc, #188]	; (80019cc <HAL_I2C_Init+0xf0>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d830      	bhi.n	8001976 <HAL_I2C_Init+0x9a>
 8001914:	4a2e      	ldr	r2, [pc, #184]	; (80019d0 <HAL_I2C_Init+0xf4>)
 8001916:	4290      	cmp	r0, r2
 8001918:	d9e3      	bls.n	80018e2 <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 800191a:	4a2e      	ldr	r2, [pc, #184]	; (80019d4 <HAL_I2C_Init+0xf8>)
  hi2c->Instance->CR2 = freqrange;
 800191c:	6821      	ldr	r1, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 800191e:	fbb0 f2f2 	udiv	r2, r0, r2
  hi2c->Instance->CR2 = freqrange;
 8001922:	604a      	str	r2, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001924:	3201      	adds	r2, #1
 8001926:	620a      	str	r2, [r1, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001928:	4a28      	ldr	r2, [pc, #160]	; (80019cc <HAL_I2C_Init+0xf0>)
 800192a:	3801      	subs	r0, #1
 800192c:	4293      	cmp	r3, r2
 800192e:	d832      	bhi.n	8001996 <HAL_I2C_Init+0xba>
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	fbb0 f0f3 	udiv	r0, r0, r3
 8001936:	1c43      	adds	r3, r0, #1
 8001938:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800193c:	2b04      	cmp	r3, #4
 800193e:	bf38      	it	cc
 8001940:	2304      	movcc	r3, #4
 8001942:	61cb      	str	r3, [r1, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001944:	6a22      	ldr	r2, [r4, #32]
 8001946:	69e3      	ldr	r3, [r4, #28]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001948:	2000      	movs	r0, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800194a:	4313      	orrs	r3, r2
 800194c:	600b      	str	r3, [r1, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 800194e:	68e2      	ldr	r2, [r4, #12]
 8001950:	6923      	ldr	r3, [r4, #16]
 8001952:	4313      	orrs	r3, r2
 8001954:	608b      	str	r3, [r1, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8001956:	69a2      	ldr	r2, [r4, #24]
 8001958:	6963      	ldr	r3, [r4, #20]
 800195a:	4313      	orrs	r3, r2
 800195c:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 800195e:	680b      	ldr	r3, [r1, #0]
 8001960:	f043 0301 	orr.w	r3, r3, #1
 8001964:	600b      	str	r3, [r1, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8001966:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001968:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800196a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800196e:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001970:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8001974:	bd38      	pop	{r3, r4, r5, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001976:	4a18      	ldr	r2, [pc, #96]	; (80019d8 <HAL_I2C_Init+0xfc>)
 8001978:	4290      	cmp	r0, r2
 800197a:	d9b2      	bls.n	80018e2 <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 800197c:	4d15      	ldr	r5, [pc, #84]	; (80019d4 <HAL_I2C_Init+0xf8>)
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800197e:	f44f 7296 	mov.w	r2, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8001982:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->CR2 = freqrange;
 8001986:	6821      	ldr	r1, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001988:	436a      	muls	r2, r5
  hi2c->Instance->CR2 = freqrange;
 800198a:	604d      	str	r5, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800198c:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8001990:	fbb2 f2f5 	udiv	r2, r2, r5
 8001994:	e7c6      	b.n	8001924 <HAL_I2C_Init+0x48>
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001996:	68a2      	ldr	r2, [r4, #8]
 8001998:	b952      	cbnz	r2, 80019b0 <HAL_I2C_Init+0xd4>
 800199a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800199e:	fbb0 f0f3 	udiv	r0, r0, r3
 80019a2:	1c43      	adds	r3, r0, #1
 80019a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019a8:	b16b      	cbz	r3, 80019c6 <HAL_I2C_Init+0xea>
 80019aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019ae:	e7c8      	b.n	8001942 <HAL_I2C_Init+0x66>
 80019b0:	2219      	movs	r2, #25
 80019b2:	4353      	muls	r3, r2
 80019b4:	fbb0 f0f3 	udiv	r0, r0, r3
 80019b8:	1c43      	adds	r3, r0, #1
 80019ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019be:	b113      	cbz	r3, 80019c6 <HAL_I2C_Init+0xea>
 80019c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019c4:	e7bd      	b.n	8001942 <HAL_I2C_Init+0x66>
 80019c6:	2301      	movs	r3, #1
 80019c8:	e7bb      	b.n	8001942 <HAL_I2C_Init+0x66>
 80019ca:	bf00      	nop
 80019cc:	000186a0 	.word	0x000186a0
 80019d0:	001e847f 	.word	0x001e847f
 80019d4:	000f4240 	.word	0x000f4240
 80019d8:	003d08ff 	.word	0x003d08ff

080019dc <HAL_I2C_Master_Transmit>:
{
 80019dc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80019e0:	4604      	mov	r4, r0
 80019e2:	461f      	mov	r7, r3
 80019e4:	460d      	mov	r5, r1
 80019e6:	4690      	mov	r8, r2
  tickstart = HAL_GetTick();
 80019e8:	f7ff fd50 	bl	800148c <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 80019ec:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 80019f0:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 80019f2:	2b20      	cmp	r3, #32
 80019f4:	d004      	beq.n	8001a00 <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 80019f6:	2502      	movs	r5, #2
}
 80019f8:	4628      	mov	r0, r5
 80019fa:	b004      	add	sp, #16
 80019fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a00:	9000      	str	r0, [sp, #0]
 8001a02:	2319      	movs	r3, #25
 8001a04:	2201      	movs	r2, #1
 8001a06:	495d      	ldr	r1, [pc, #372]	; (8001b7c <HAL_I2C_Master_Transmit+0x1a0>)
 8001a08:	4620      	mov	r0, r4
 8001a0a:	f7ff feed 	bl	80017e8 <I2C_WaitOnFlagUntilTimeout>
 8001a0e:	2800      	cmp	r0, #0
 8001a10:	d1f1      	bne.n	80019f6 <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 8001a12:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d0ed      	beq.n	80019f6 <HAL_I2C_Master_Transmit+0x1a>
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a20:	6823      	ldr	r3, [r4, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001a26:	bf5e      	ittt	pl
 8001a28:	681a      	ldrpl	r2, [r3, #0]
 8001a2a:	f042 0201 	orrpl.w	r2, r2, #1
 8001a2e:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a36:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a38:	2221      	movs	r2, #33	; 0x21
 8001a3a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001a3e:	2210      	movs	r2, #16
 8001a40:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a44:	2200      	movs	r2, #0
 8001a46:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a48:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 8001a4c:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a4e:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001a50:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8001a52:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8001a56:	8522      	strh	r2, [r4, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001a58:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001a5a:	2a04      	cmp	r2, #4
 8001a5c:	d004      	beq.n	8001a68 <HAL_I2C_Master_Transmit+0x8c>
 8001a5e:	2a01      	cmp	r2, #1
 8001a60:	d002      	beq.n	8001a68 <HAL_I2C_Master_Transmit+0x8c>
 8001a62:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001a66:	d104      	bne.n	8001a72 <HAL_I2C_Master_Transmit+0x96>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	e002      	b.n	8001a78 <HAL_I2C_Master_Transmit+0x9c>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001a72:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001a74:	2a12      	cmp	r2, #18
 8001a76:	d0f7      	beq.n	8001a68 <HAL_I2C_Master_Transmit+0x8c>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001a78:	9600      	str	r6, [sp, #0]
 8001a7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001a82:	4620      	mov	r0, r4
 8001a84:	f7ff feb0 	bl	80017e8 <I2C_WaitOnFlagUntilTimeout>
 8001a88:	bb28      	cbnz	r0, 8001ad6 <HAL_I2C_Master_Transmit+0xfa>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a8a:	6923      	ldr	r3, [r4, #16]
 8001a8c:	6822      	ldr	r2, [r4, #0]
 8001a8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a92:	d112      	bne.n	8001aba <HAL_I2C_Master_Transmit+0xde>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001a94:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8001a98:	6115      	str	r5, [r2, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001a9a:	4633      	mov	r3, r6
 8001a9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001a9e:	4938      	ldr	r1, [pc, #224]	; (8001b80 <HAL_I2C_Master_Transmit+0x1a4>)
 8001aa0:	4620      	mov	r0, r4
 8001aa2:	f7ff fe61 	bl	8001768 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001aa6:	4605      	mov	r5, r0
 8001aa8:	b9a0      	cbnz	r0, 8001ad4 <HAL_I2C_Master_Transmit+0xf8>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001aaa:	6823      	ldr	r3, [r4, #0]
 8001aac:	9003      	str	r0, [sp, #12]
 8001aae:	695a      	ldr	r2, [r3, #20]
 8001ab0:	9203      	str	r2, [sp, #12]
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	9303      	str	r3, [sp, #12]
 8001ab6:	9b03      	ldr	r3, [sp, #12]
    while(hi2c->XferSize > 0U)
 8001ab8:	e050      	b.n	8001b5c <HAL_I2C_Master_Transmit+0x180>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001aba:	11eb      	asrs	r3, r5, #7
 8001abc:	f003 0306 	and.w	r3, r3, #6
 8001ac0:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8001ac4:	6113      	str	r3, [r2, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001ac6:	492f      	ldr	r1, [pc, #188]	; (8001b84 <HAL_I2C_Master_Transmit+0x1a8>)
 8001ac8:	4633      	mov	r3, r6
 8001aca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001acc:	4620      	mov	r0, r4
 8001ace:	f7ff fe4b 	bl	8001768 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ad2:	b148      	cbz	r0, 8001ae8 <HAL_I2C_Master_Transmit+0x10c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ad4:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ad6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ad8:	2b04      	cmp	r3, #4
 8001ada:	f04f 0300 	mov.w	r3, #0
 8001ade:	d107      	bne.n	8001af0 <HAL_I2C_Master_Transmit+0x114>
        __HAL_UNLOCK(hi2c);
 8001ae0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8001ae4:	2501      	movs	r5, #1
 8001ae6:	e787      	b.n	80019f8 <HAL_I2C_Master_Transmit+0x1c>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001ae8:	6823      	ldr	r3, [r4, #0]
 8001aea:	b2ed      	uxtb	r5, r5
 8001aec:	611d      	str	r5, [r3, #16]
 8001aee:	e7d4      	b.n	8001a9a <HAL_I2C_Master_Transmit+0xbe>
        __HAL_UNLOCK(hi2c);
 8001af0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_TIMEOUT;
 8001af4:	2503      	movs	r5, #3
 8001af6:	e77f      	b.n	80019f8 <HAL_I2C_Master_Transmit+0x1c>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001af8:	4632      	mov	r2, r6
 8001afa:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001afc:	4620      	mov	r0, r4
 8001afe:	f7ff fea1 	bl	8001844 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b02:	b140      	cbz	r0, 8001b16 <HAL_I2C_Master_Transmit+0x13a>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b04:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b06:	2b04      	cmp	r3, #4
 8001b08:	d1f4      	bne.n	8001af4 <HAL_I2C_Master_Transmit+0x118>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001b0a:	6822      	ldr	r2, [r4, #0]
 8001b0c:	6813      	ldr	r3, [r2, #0]
 8001b0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b12:	6013      	str	r3, [r2, #0]
 8001b14:	e7e6      	b.n	8001ae4 <HAL_I2C_Master_Transmit+0x108>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001b16:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001b18:	6820      	ldr	r0, [r4, #0]
 8001b1a:	1c4b      	adds	r3, r1, #1
 8001b1c:	6263      	str	r3, [r4, #36]	; 0x24
 8001b1e:	780b      	ldrb	r3, [r1, #0]
      hi2c->XferSize--;
 8001b20:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001b22:	6103      	str	r3, [r0, #16]
      hi2c->XferCount--;
 8001b24:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001b26:	3b01      	subs	r3, #1
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001b2c:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 8001b2e:	1e53      	subs	r3, r2, #1
 8001b30:	b29b      	uxth	r3, r3
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001b32:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 8001b34:	8523      	strh	r3, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001b36:	d50a      	bpl.n	8001b4e <HAL_I2C_Master_Transmit+0x172>
 8001b38:	b14b      	cbz	r3, 8001b4e <HAL_I2C_Master_Transmit+0x172>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001b3a:	1c8b      	adds	r3, r1, #2
 8001b3c:	6263      	str	r3, [r4, #36]	; 0x24
 8001b3e:	784b      	ldrb	r3, [r1, #1]
        hi2c->XferSize--;
 8001b40:	3a02      	subs	r2, #2
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001b42:	6103      	str	r3, [r0, #16]
        hi2c->XferCount--;
 8001b44:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8001b46:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001b48:	3b01      	subs	r3, #1
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	8563      	strh	r3, [r4, #42]	; 0x2a
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b4e:	4632      	mov	r2, r6
 8001b50:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001b52:	4620      	mov	r0, r4
 8001b54:	f7ff fe9c 	bl	8001890 <I2C_WaitOnBTFFlagUntilTimeout>
 8001b58:	2800      	cmp	r0, #0
 8001b5a:	d1d3      	bne.n	8001b04 <HAL_I2C_Master_Transmit+0x128>
    while(hi2c->XferSize > 0U)
 8001b5c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d1ca      	bne.n	8001af8 <HAL_I2C_Master_Transmit+0x11c>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001b62:	6821      	ldr	r1, [r4, #0]
 8001b64:	680a      	ldr	r2, [r1, #0]
 8001b66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b6a:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001b6c:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 8001b6e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8001b72:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b76:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8001b7a:	e73d      	b.n	80019f8 <HAL_I2C_Master_Transmit+0x1c>
 8001b7c:	00100002 	.word	0x00100002
 8001b80:	00010002 	.word	0x00010002
 8001b84:	00010008 	.word	0x00010008

08001b88 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b88:	6803      	ldr	r3, [r0, #0]
{
 8001b8a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b8e:	07db      	lsls	r3, r3, #31
{
 8001b90:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b92:	d410      	bmi.n	8001bb6 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b94:	682b      	ldr	r3, [r5, #0]
 8001b96:	079f      	lsls	r7, r3, #30
 8001b98:	d45e      	bmi.n	8001c58 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b9a:	682b      	ldr	r3, [r5, #0]
 8001b9c:	0719      	lsls	r1, r3, #28
 8001b9e:	f100 8095 	bmi.w	8001ccc <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ba2:	682b      	ldr	r3, [r5, #0]
 8001ba4:	075a      	lsls	r2, r3, #29
 8001ba6:	f100 80bf 	bmi.w	8001d28 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001baa:	69ea      	ldr	r2, [r5, #28]
 8001bac:	2a00      	cmp	r2, #0
 8001bae:	f040 812d 	bne.w	8001e0c <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001bb2:	2000      	movs	r0, #0
 8001bb4:	e014      	b.n	8001be0 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001bb6:	4c90      	ldr	r4, [pc, #576]	; (8001df8 <HAL_RCC_OscConfig+0x270>)
 8001bb8:	6863      	ldr	r3, [r4, #4]
 8001bba:	f003 030c 	and.w	r3, r3, #12
 8001bbe:	2b04      	cmp	r3, #4
 8001bc0:	d007      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bc2:	6863      	ldr	r3, [r4, #4]
 8001bc4:	f003 030c 	and.w	r3, r3, #12
 8001bc8:	2b08      	cmp	r3, #8
 8001bca:	d10c      	bne.n	8001be6 <HAL_RCC_OscConfig+0x5e>
 8001bcc:	6863      	ldr	r3, [r4, #4]
 8001bce:	03de      	lsls	r6, r3, #15
 8001bd0:	d509      	bpl.n	8001be6 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bd2:	6823      	ldr	r3, [r4, #0]
 8001bd4:	039c      	lsls	r4, r3, #14
 8001bd6:	d5dd      	bpl.n	8001b94 <HAL_RCC_OscConfig+0xc>
 8001bd8:	686b      	ldr	r3, [r5, #4]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d1da      	bne.n	8001b94 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8001bde:	2001      	movs	r0, #1
}
 8001be0:	b002      	add	sp, #8
 8001be2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001be6:	686b      	ldr	r3, [r5, #4]
 8001be8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bec:	d110      	bne.n	8001c10 <HAL_RCC_OscConfig+0x88>
 8001bee:	6823      	ldr	r3, [r4, #0]
 8001bf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bf4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001bf6:	f7ff fc49 	bl	800148c <HAL_GetTick>
 8001bfa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bfc:	6823      	ldr	r3, [r4, #0]
 8001bfe:	0398      	lsls	r0, r3, #14
 8001c00:	d4c8      	bmi.n	8001b94 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c02:	f7ff fc43 	bl	800148c <HAL_GetTick>
 8001c06:	1b80      	subs	r0, r0, r6
 8001c08:	2864      	cmp	r0, #100	; 0x64
 8001c0a:	d9f7      	bls.n	8001bfc <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8001c0c:	2003      	movs	r0, #3
 8001c0e:	e7e7      	b.n	8001be0 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c10:	b99b      	cbnz	r3, 8001c3a <HAL_RCC_OscConfig+0xb2>
 8001c12:	6823      	ldr	r3, [r4, #0]
 8001c14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c18:	6023      	str	r3, [r4, #0]
 8001c1a:	6823      	ldr	r3, [r4, #0]
 8001c1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c20:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001c22:	f7ff fc33 	bl	800148c <HAL_GetTick>
 8001c26:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c28:	6823      	ldr	r3, [r4, #0]
 8001c2a:	0399      	lsls	r1, r3, #14
 8001c2c:	d5b2      	bpl.n	8001b94 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c2e:	f7ff fc2d 	bl	800148c <HAL_GetTick>
 8001c32:	1b80      	subs	r0, r0, r6
 8001c34:	2864      	cmp	r0, #100	; 0x64
 8001c36:	d9f7      	bls.n	8001c28 <HAL_RCC_OscConfig+0xa0>
 8001c38:	e7e8      	b.n	8001c0c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c3a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c3e:	6823      	ldr	r3, [r4, #0]
 8001c40:	d103      	bne.n	8001c4a <HAL_RCC_OscConfig+0xc2>
 8001c42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c46:	6023      	str	r3, [r4, #0]
 8001c48:	e7d1      	b.n	8001bee <HAL_RCC_OscConfig+0x66>
 8001c4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c4e:	6023      	str	r3, [r4, #0]
 8001c50:	6823      	ldr	r3, [r4, #0]
 8001c52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c56:	e7cd      	b.n	8001bf4 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001c58:	4c67      	ldr	r4, [pc, #412]	; (8001df8 <HAL_RCC_OscConfig+0x270>)
 8001c5a:	6863      	ldr	r3, [r4, #4]
 8001c5c:	f013 0f0c 	tst.w	r3, #12
 8001c60:	d007      	beq.n	8001c72 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c62:	6863      	ldr	r3, [r4, #4]
 8001c64:	f003 030c 	and.w	r3, r3, #12
 8001c68:	2b08      	cmp	r3, #8
 8001c6a:	d110      	bne.n	8001c8e <HAL_RCC_OscConfig+0x106>
 8001c6c:	6863      	ldr	r3, [r4, #4]
 8001c6e:	03da      	lsls	r2, r3, #15
 8001c70:	d40d      	bmi.n	8001c8e <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c72:	6823      	ldr	r3, [r4, #0]
 8001c74:	079b      	lsls	r3, r3, #30
 8001c76:	d502      	bpl.n	8001c7e <HAL_RCC_OscConfig+0xf6>
 8001c78:	692b      	ldr	r3, [r5, #16]
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d1af      	bne.n	8001bde <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c7e:	6823      	ldr	r3, [r4, #0]
 8001c80:	696a      	ldr	r2, [r5, #20]
 8001c82:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001c86:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001c8a:	6023      	str	r3, [r4, #0]
 8001c8c:	e785      	b.n	8001b9a <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c8e:	692a      	ldr	r2, [r5, #16]
 8001c90:	4b5a      	ldr	r3, [pc, #360]	; (8001dfc <HAL_RCC_OscConfig+0x274>)
 8001c92:	b16a      	cbz	r2, 8001cb0 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8001c94:	2201      	movs	r2, #1
 8001c96:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001c98:	f7ff fbf8 	bl	800148c <HAL_GetTick>
 8001c9c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c9e:	6823      	ldr	r3, [r4, #0]
 8001ca0:	079f      	lsls	r7, r3, #30
 8001ca2:	d4ec      	bmi.n	8001c7e <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ca4:	f7ff fbf2 	bl	800148c <HAL_GetTick>
 8001ca8:	1b80      	subs	r0, r0, r6
 8001caa:	2802      	cmp	r0, #2
 8001cac:	d9f7      	bls.n	8001c9e <HAL_RCC_OscConfig+0x116>
 8001cae:	e7ad      	b.n	8001c0c <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8001cb0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001cb2:	f7ff fbeb 	bl	800148c <HAL_GetTick>
 8001cb6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cb8:	6823      	ldr	r3, [r4, #0]
 8001cba:	0798      	lsls	r0, r3, #30
 8001cbc:	f57f af6d 	bpl.w	8001b9a <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cc0:	f7ff fbe4 	bl	800148c <HAL_GetTick>
 8001cc4:	1b80      	subs	r0, r0, r6
 8001cc6:	2802      	cmp	r0, #2
 8001cc8:	d9f6      	bls.n	8001cb8 <HAL_RCC_OscConfig+0x130>
 8001cca:	e79f      	b.n	8001c0c <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ccc:	69aa      	ldr	r2, [r5, #24]
 8001cce:	4c4a      	ldr	r4, [pc, #296]	; (8001df8 <HAL_RCC_OscConfig+0x270>)
 8001cd0:	4b4b      	ldr	r3, [pc, #300]	; (8001e00 <HAL_RCC_OscConfig+0x278>)
 8001cd2:	b1da      	cbz	r2, 8001d0c <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001cd8:	f7ff fbd8 	bl	800148c <HAL_GetTick>
 8001cdc:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001ce0:	079b      	lsls	r3, r3, #30
 8001ce2:	d50d      	bpl.n	8001d00 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ce4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001ce8:	4b46      	ldr	r3, [pc, #280]	; (8001e04 <HAL_RCC_OscConfig+0x27c>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	fbb3 f3f2 	udiv	r3, r3, r2
 8001cf0:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8001cf2:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001cf4:	9b01      	ldr	r3, [sp, #4]
 8001cf6:	1e5a      	subs	r2, r3, #1
 8001cf8:	9201      	str	r2, [sp, #4]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d1f9      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x16a>
 8001cfe:	e750      	b.n	8001ba2 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d00:	f7ff fbc4 	bl	800148c <HAL_GetTick>
 8001d04:	1b80      	subs	r0, r0, r6
 8001d06:	2802      	cmp	r0, #2
 8001d08:	d9e9      	bls.n	8001cde <HAL_RCC_OscConfig+0x156>
 8001d0a:	e77f      	b.n	8001c0c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8001d0c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001d0e:	f7ff fbbd 	bl	800148c <HAL_GetTick>
 8001d12:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001d16:	079f      	lsls	r7, r3, #30
 8001d18:	f57f af43 	bpl.w	8001ba2 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d1c:	f7ff fbb6 	bl	800148c <HAL_GetTick>
 8001d20:	1b80      	subs	r0, r0, r6
 8001d22:	2802      	cmp	r0, #2
 8001d24:	d9f6      	bls.n	8001d14 <HAL_RCC_OscConfig+0x18c>
 8001d26:	e771      	b.n	8001c0c <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d28:	4c33      	ldr	r4, [pc, #204]	; (8001df8 <HAL_RCC_OscConfig+0x270>)
 8001d2a:	69e3      	ldr	r3, [r4, #28]
 8001d2c:	00d8      	lsls	r0, r3, #3
 8001d2e:	d424      	bmi.n	8001d7a <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8001d30:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d32:	69e3      	ldr	r3, [r4, #28]
 8001d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d38:	61e3      	str	r3, [r4, #28]
 8001d3a:	69e3      	ldr	r3, [r4, #28]
 8001d3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d40:	9300      	str	r3, [sp, #0]
 8001d42:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d44:	4e30      	ldr	r6, [pc, #192]	; (8001e08 <HAL_RCC_OscConfig+0x280>)
 8001d46:	6833      	ldr	r3, [r6, #0]
 8001d48:	05d9      	lsls	r1, r3, #23
 8001d4a:	d518      	bpl.n	8001d7e <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d4c:	68eb      	ldr	r3, [r5, #12]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d126      	bne.n	8001da0 <HAL_RCC_OscConfig+0x218>
 8001d52:	6a23      	ldr	r3, [r4, #32]
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001d5a:	f7ff fb97 	bl	800148c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d5e:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001d62:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d64:	6a23      	ldr	r3, [r4, #32]
 8001d66:	079b      	lsls	r3, r3, #30
 8001d68:	d53f      	bpl.n	8001dea <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8001d6a:	2f00      	cmp	r7, #0
 8001d6c:	f43f af1d 	beq.w	8001baa <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d70:	69e3      	ldr	r3, [r4, #28]
 8001d72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d76:	61e3      	str	r3, [r4, #28]
 8001d78:	e717      	b.n	8001baa <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8001d7a:	2700      	movs	r7, #0
 8001d7c:	e7e2      	b.n	8001d44 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d7e:	6833      	ldr	r3, [r6, #0]
 8001d80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d84:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001d86:	f7ff fb81 	bl	800148c <HAL_GetTick>
 8001d8a:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d8c:	6833      	ldr	r3, [r6, #0]
 8001d8e:	05da      	lsls	r2, r3, #23
 8001d90:	d4dc      	bmi.n	8001d4c <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d92:	f7ff fb7b 	bl	800148c <HAL_GetTick>
 8001d96:	eba0 0008 	sub.w	r0, r0, r8
 8001d9a:	2864      	cmp	r0, #100	; 0x64
 8001d9c:	d9f6      	bls.n	8001d8c <HAL_RCC_OscConfig+0x204>
 8001d9e:	e735      	b.n	8001c0c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001da0:	b9ab      	cbnz	r3, 8001dce <HAL_RCC_OscConfig+0x246>
 8001da2:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001da4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001da8:	f023 0301 	bic.w	r3, r3, #1
 8001dac:	6223      	str	r3, [r4, #32]
 8001dae:	6a23      	ldr	r3, [r4, #32]
 8001db0:	f023 0304 	bic.w	r3, r3, #4
 8001db4:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001db6:	f7ff fb69 	bl	800148c <HAL_GetTick>
 8001dba:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dbc:	6a23      	ldr	r3, [r4, #32]
 8001dbe:	0798      	lsls	r0, r3, #30
 8001dc0:	d5d3      	bpl.n	8001d6a <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dc2:	f7ff fb63 	bl	800148c <HAL_GetTick>
 8001dc6:	1b80      	subs	r0, r0, r6
 8001dc8:	4540      	cmp	r0, r8
 8001dca:	d9f7      	bls.n	8001dbc <HAL_RCC_OscConfig+0x234>
 8001dcc:	e71e      	b.n	8001c0c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dce:	2b05      	cmp	r3, #5
 8001dd0:	6a23      	ldr	r3, [r4, #32]
 8001dd2:	d103      	bne.n	8001ddc <HAL_RCC_OscConfig+0x254>
 8001dd4:	f043 0304 	orr.w	r3, r3, #4
 8001dd8:	6223      	str	r3, [r4, #32]
 8001dda:	e7ba      	b.n	8001d52 <HAL_RCC_OscConfig+0x1ca>
 8001ddc:	f023 0301 	bic.w	r3, r3, #1
 8001de0:	6223      	str	r3, [r4, #32]
 8001de2:	6a23      	ldr	r3, [r4, #32]
 8001de4:	f023 0304 	bic.w	r3, r3, #4
 8001de8:	e7b6      	b.n	8001d58 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dea:	f7ff fb4f 	bl	800148c <HAL_GetTick>
 8001dee:	eba0 0008 	sub.w	r0, r0, r8
 8001df2:	42b0      	cmp	r0, r6
 8001df4:	d9b6      	bls.n	8001d64 <HAL_RCC_OscConfig+0x1dc>
 8001df6:	e709      	b.n	8001c0c <HAL_RCC_OscConfig+0x84>
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	42420000 	.word	0x42420000
 8001e00:	42420480 	.word	0x42420480
 8001e04:	20000ce8 	.word	0x20000ce8
 8001e08:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e0c:	4c22      	ldr	r4, [pc, #136]	; (8001e98 <HAL_RCC_OscConfig+0x310>)
 8001e0e:	6863      	ldr	r3, [r4, #4]
 8001e10:	f003 030c 	and.w	r3, r3, #12
 8001e14:	2b08      	cmp	r3, #8
 8001e16:	f43f aee2 	beq.w	8001bde <HAL_RCC_OscConfig+0x56>
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	4e1f      	ldr	r6, [pc, #124]	; (8001e9c <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e1e:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001e20:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e22:	d12b      	bne.n	8001e7c <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8001e24:	f7ff fb32 	bl	800148c <HAL_GetTick>
 8001e28:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e2a:	6823      	ldr	r3, [r4, #0]
 8001e2c:	0199      	lsls	r1, r3, #6
 8001e2e:	d41f      	bmi.n	8001e70 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e30:	6a2b      	ldr	r3, [r5, #32]
 8001e32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e36:	d105      	bne.n	8001e44 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e38:	6862      	ldr	r2, [r4, #4]
 8001e3a:	68a9      	ldr	r1, [r5, #8]
 8001e3c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001e40:	430a      	orrs	r2, r1
 8001e42:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e44:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001e46:	6862      	ldr	r2, [r4, #4]
 8001e48:	430b      	orrs	r3, r1
 8001e4a:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001e52:	2301      	movs	r3, #1
 8001e54:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001e56:	f7ff fb19 	bl	800148c <HAL_GetTick>
 8001e5a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e5c:	6823      	ldr	r3, [r4, #0]
 8001e5e:	019a      	lsls	r2, r3, #6
 8001e60:	f53f aea7 	bmi.w	8001bb2 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e64:	f7ff fb12 	bl	800148c <HAL_GetTick>
 8001e68:	1b40      	subs	r0, r0, r5
 8001e6a:	2802      	cmp	r0, #2
 8001e6c:	d9f6      	bls.n	8001e5c <HAL_RCC_OscConfig+0x2d4>
 8001e6e:	e6cd      	b.n	8001c0c <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e70:	f7ff fb0c 	bl	800148c <HAL_GetTick>
 8001e74:	1bc0      	subs	r0, r0, r7
 8001e76:	2802      	cmp	r0, #2
 8001e78:	d9d7      	bls.n	8001e2a <HAL_RCC_OscConfig+0x2a2>
 8001e7a:	e6c7      	b.n	8001c0c <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8001e7c:	f7ff fb06 	bl	800148c <HAL_GetTick>
 8001e80:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e82:	6823      	ldr	r3, [r4, #0]
 8001e84:	019b      	lsls	r3, r3, #6
 8001e86:	f57f ae94 	bpl.w	8001bb2 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e8a:	f7ff faff 	bl	800148c <HAL_GetTick>
 8001e8e:	1b40      	subs	r0, r0, r5
 8001e90:	2802      	cmp	r0, #2
 8001e92:	d9f6      	bls.n	8001e82 <HAL_RCC_OscConfig+0x2fa>
 8001e94:	e6ba      	b.n	8001c0c <HAL_RCC_OscConfig+0x84>
 8001e96:	bf00      	nop
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	42420060 	.word	0x42420060

08001ea0 <HAL_RCC_GetSysClockFreq>:
{
 8001ea0:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001ea2:	4b19      	ldr	r3, [pc, #100]	; (8001f08 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8001ea4:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001ea6:	ac02      	add	r4, sp, #8
 8001ea8:	f103 0510 	add.w	r5, r3, #16
 8001eac:	4622      	mov	r2, r4
 8001eae:	6818      	ldr	r0, [r3, #0]
 8001eb0:	6859      	ldr	r1, [r3, #4]
 8001eb2:	3308      	adds	r3, #8
 8001eb4:	c203      	stmia	r2!, {r0, r1}
 8001eb6:	42ab      	cmp	r3, r5
 8001eb8:	4614      	mov	r4, r2
 8001eba:	d1f7      	bne.n	8001eac <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	f88d 3004 	strb.w	r3, [sp, #4]
 8001ec2:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8001ec4:	4911      	ldr	r1, [pc, #68]	; (8001f0c <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001ec6:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8001eca:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001ecc:	f003 020c 	and.w	r2, r3, #12
 8001ed0:	2a08      	cmp	r2, #8
 8001ed2:	d117      	bne.n	8001f04 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ed4:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001ed8:	a806      	add	r0, sp, #24
 8001eda:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001edc:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ede:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ee2:	d50c      	bpl.n	8001efe <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ee4:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ee6:	480a      	ldr	r0, [pc, #40]	; (8001f10 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ee8:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001eec:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001eee:	aa06      	add	r2, sp, #24
 8001ef0:	4413      	add	r3, r2
 8001ef2:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ef6:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001efa:	b007      	add	sp, #28
 8001efc:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001efe:	4805      	ldr	r0, [pc, #20]	; (8001f14 <HAL_RCC_GetSysClockFreq+0x74>)
 8001f00:	4350      	muls	r0, r2
 8001f02:	e7fa      	b.n	8001efa <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8001f04:	4802      	ldr	r0, [pc, #8]	; (8001f10 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8001f06:	e7f8      	b.n	8001efa <HAL_RCC_GetSysClockFreq+0x5a>
 8001f08:	080028b8 	.word	0x080028b8
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	007a1200 	.word	0x007a1200
 8001f14:	003d0900 	.word	0x003d0900

08001f18 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001f18:	4a54      	ldr	r2, [pc, #336]	; (800206c <HAL_RCC_ClockConfig+0x154>)
{
 8001f1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001f1e:	6813      	ldr	r3, [r2, #0]
{
 8001f20:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001f22:	f003 0307 	and.w	r3, r3, #7
 8001f26:	428b      	cmp	r3, r1
{
 8001f28:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001f2a:	d32a      	bcc.n	8001f82 <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f2c:	6829      	ldr	r1, [r5, #0]
 8001f2e:	078c      	lsls	r4, r1, #30
 8001f30:	d434      	bmi.n	8001f9c <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f32:	07ca      	lsls	r2, r1, #31
 8001f34:	d447      	bmi.n	8001fc6 <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001f36:	4a4d      	ldr	r2, [pc, #308]	; (800206c <HAL_RCC_ClockConfig+0x154>)
 8001f38:	6813      	ldr	r3, [r2, #0]
 8001f3a:	f003 0307 	and.w	r3, r3, #7
 8001f3e:	429e      	cmp	r6, r3
 8001f40:	f0c0 8082 	bcc.w	8002048 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f44:	682a      	ldr	r2, [r5, #0]
 8001f46:	4c4a      	ldr	r4, [pc, #296]	; (8002070 <HAL_RCC_ClockConfig+0x158>)
 8001f48:	f012 0f04 	tst.w	r2, #4
 8001f4c:	f040 8087 	bne.w	800205e <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f50:	0713      	lsls	r3, r2, #28
 8001f52:	d506      	bpl.n	8001f62 <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f54:	6863      	ldr	r3, [r4, #4]
 8001f56:	692a      	ldr	r2, [r5, #16]
 8001f58:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001f5c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001f60:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f62:	f7ff ff9d 	bl	8001ea0 <HAL_RCC_GetSysClockFreq>
 8001f66:	6863      	ldr	r3, [r4, #4]
 8001f68:	4a42      	ldr	r2, [pc, #264]	; (8002074 <HAL_RCC_ClockConfig+0x15c>)
 8001f6a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001f6e:	5cd3      	ldrb	r3, [r2, r3]
 8001f70:	40d8      	lsrs	r0, r3
 8001f72:	4b41      	ldr	r3, [pc, #260]	; (8002078 <HAL_RCC_ClockConfig+0x160>)
 8001f74:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001f76:	2000      	movs	r0, #0
 8001f78:	f7ff fa46 	bl	8001408 <HAL_InitTick>
  return HAL_OK;
 8001f7c:	2000      	movs	r0, #0
}
 8001f7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f82:	6813      	ldr	r3, [r2, #0]
 8001f84:	f023 0307 	bic.w	r3, r3, #7
 8001f88:	430b      	orrs	r3, r1
 8001f8a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f8c:	6813      	ldr	r3, [r2, #0]
 8001f8e:	f003 0307 	and.w	r3, r3, #7
 8001f92:	4299      	cmp	r1, r3
 8001f94:	d0ca      	beq.n	8001f2c <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8001f96:	2001      	movs	r0, #1
 8001f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f9c:	4b34      	ldr	r3, [pc, #208]	; (8002070 <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f9e:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fa2:	bf1e      	ittt	ne
 8001fa4:	685a      	ldrne	r2, [r3, #4]
 8001fa6:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8001faa:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fac:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fae:	bf42      	ittt	mi
 8001fb0:	685a      	ldrmi	r2, [r3, #4]
 8001fb2:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8001fb6:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fb8:	685a      	ldr	r2, [r3, #4]
 8001fba:	68a8      	ldr	r0, [r5, #8]
 8001fbc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001fc0:	4302      	orrs	r2, r0
 8001fc2:	605a      	str	r2, [r3, #4]
 8001fc4:	e7b5      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fc6:	686a      	ldr	r2, [r5, #4]
 8001fc8:	4c29      	ldr	r4, [pc, #164]	; (8002070 <HAL_RCC_ClockConfig+0x158>)
 8001fca:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fcc:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fce:	d11c      	bne.n	800200a <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fd0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fd4:	d0df      	beq.n	8001f96 <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fd6:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fd8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fdc:	f023 0303 	bic.w	r3, r3, #3
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8001fe4:	f7ff fa52 	bl	800148c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fe8:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8001fea:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d114      	bne.n	800201a <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ff0:	6863      	ldr	r3, [r4, #4]
 8001ff2:	f003 030c 	and.w	r3, r3, #12
 8001ff6:	2b04      	cmp	r3, #4
 8001ff8:	d09d      	beq.n	8001f36 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ffa:	f7ff fa47 	bl	800148c <HAL_GetTick>
 8001ffe:	1bc0      	subs	r0, r0, r7
 8002000:	4540      	cmp	r0, r8
 8002002:	d9f5      	bls.n	8001ff0 <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 8002004:	2003      	movs	r0, #3
 8002006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800200a:	2a02      	cmp	r2, #2
 800200c:	d102      	bne.n	8002014 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800200e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002012:	e7df      	b.n	8001fd4 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002014:	f013 0f02 	tst.w	r3, #2
 8002018:	e7dc      	b.n	8001fd4 <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800201a:	2b02      	cmp	r3, #2
 800201c:	d10f      	bne.n	800203e <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800201e:	6863      	ldr	r3, [r4, #4]
 8002020:	f003 030c 	and.w	r3, r3, #12
 8002024:	2b08      	cmp	r3, #8
 8002026:	d086      	beq.n	8001f36 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002028:	f7ff fa30 	bl	800148c <HAL_GetTick>
 800202c:	1bc0      	subs	r0, r0, r7
 800202e:	4540      	cmp	r0, r8
 8002030:	d9f5      	bls.n	800201e <HAL_RCC_ClockConfig+0x106>
 8002032:	e7e7      	b.n	8002004 <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002034:	f7ff fa2a 	bl	800148c <HAL_GetTick>
 8002038:	1bc0      	subs	r0, r0, r7
 800203a:	4540      	cmp	r0, r8
 800203c:	d8e2      	bhi.n	8002004 <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800203e:	6863      	ldr	r3, [r4, #4]
 8002040:	f013 0f0c 	tst.w	r3, #12
 8002044:	d1f6      	bne.n	8002034 <HAL_RCC_ClockConfig+0x11c>
 8002046:	e776      	b.n	8001f36 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002048:	6813      	ldr	r3, [r2, #0]
 800204a:	f023 0307 	bic.w	r3, r3, #7
 800204e:	4333      	orrs	r3, r6
 8002050:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002052:	6813      	ldr	r3, [r2, #0]
 8002054:	f003 0307 	and.w	r3, r3, #7
 8002058:	429e      	cmp	r6, r3
 800205a:	d19c      	bne.n	8001f96 <HAL_RCC_ClockConfig+0x7e>
 800205c:	e772      	b.n	8001f44 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800205e:	6863      	ldr	r3, [r4, #4]
 8002060:	68e9      	ldr	r1, [r5, #12]
 8002062:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002066:	430b      	orrs	r3, r1
 8002068:	6063      	str	r3, [r4, #4]
 800206a:	e771      	b.n	8001f50 <HAL_RCC_ClockConfig+0x38>
 800206c:	40022000 	.word	0x40022000
 8002070:	40021000 	.word	0x40021000
 8002074:	08003a1e 	.word	0x08003a1e
 8002078:	20000ce8 	.word	0x20000ce8

0800207c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800207c:	4b04      	ldr	r3, [pc, #16]	; (8002090 <HAL_RCC_GetPCLK1Freq+0x14>)
 800207e:	4a05      	ldr	r2, [pc, #20]	; (8002094 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002086:	5cd3      	ldrb	r3, [r2, r3]
 8002088:	4a03      	ldr	r2, [pc, #12]	; (8002098 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800208a:	6810      	ldr	r0, [r2, #0]
}    
 800208c:	40d8      	lsrs	r0, r3
 800208e:	4770      	bx	lr
 8002090:	40021000 	.word	0x40021000
 8002094:	08003a2e 	.word	0x08003a2e
 8002098:	20000ce8 	.word	0x20000ce8

0800209c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800209c:	4b04      	ldr	r3, [pc, #16]	; (80020b0 <HAL_RCC_GetPCLK2Freq+0x14>)
 800209e:	4a05      	ldr	r2, [pc, #20]	; (80020b4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80020a6:	5cd3      	ldrb	r3, [r2, r3]
 80020a8:	4a03      	ldr	r2, [pc, #12]	; (80020b8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80020aa:	6810      	ldr	r0, [r2, #0]
} 
 80020ac:	40d8      	lsrs	r0, r3
 80020ae:	4770      	bx	lr
 80020b0:	40021000 	.word	0x40021000
 80020b4:	08003a2e 	.word	0x08003a2e
 80020b8:	20000ce8 	.word	0x20000ce8

080020bc <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020c0:	6805      	ldr	r5, [r0, #0]
 80020c2:	68c2      	ldr	r2, [r0, #12]
 80020c4:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80020c6:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020c8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80020cc:	4313      	orrs	r3, r2
 80020ce:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80020d0:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 80020d2:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80020d4:	430b      	orrs	r3, r1
 80020d6:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 80020d8:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 80020dc:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80020e0:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 80020e2:	4313      	orrs	r3, r2
 80020e4:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80020e6:	696b      	ldr	r3, [r5, #20]
 80020e8:	6982      	ldr	r2, [r0, #24]
 80020ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020ee:	4313      	orrs	r3, r2
 80020f0:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80020f2:	4b40      	ldr	r3, [pc, #256]	; (80021f4 <UART_SetConfig+0x138>)
{
 80020f4:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 80020f6:	429d      	cmp	r5, r3
 80020f8:	f04f 0419 	mov.w	r4, #25
 80020fc:	d146      	bne.n	800218c <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80020fe:	f7ff ffcd 	bl	800209c <HAL_RCC_GetPCLK2Freq>
 8002102:	fb04 f300 	mul.w	r3, r4, r0
 8002106:	f8d9 6004 	ldr.w	r6, [r9, #4]
 800210a:	f04f 0864 	mov.w	r8, #100	; 0x64
 800210e:	00b6      	lsls	r6, r6, #2
 8002110:	fbb3 f3f6 	udiv	r3, r3, r6
 8002114:	fbb3 f3f8 	udiv	r3, r3, r8
 8002118:	011e      	lsls	r6, r3, #4
 800211a:	f7ff ffbf 	bl	800209c <HAL_RCC_GetPCLK2Freq>
 800211e:	4360      	muls	r0, r4
 8002120:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	fbb0 f7f3 	udiv	r7, r0, r3
 800212a:	f7ff ffb7 	bl	800209c <HAL_RCC_GetPCLK2Freq>
 800212e:	4360      	muls	r0, r4
 8002130:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	fbb0 f3f3 	udiv	r3, r0, r3
 800213a:	fbb3 f3f8 	udiv	r3, r3, r8
 800213e:	fb08 7313 	mls	r3, r8, r3, r7
 8002142:	011b      	lsls	r3, r3, #4
 8002144:	3332      	adds	r3, #50	; 0x32
 8002146:	fbb3 f3f8 	udiv	r3, r3, r8
 800214a:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 800214e:	f7ff ffa5 	bl	800209c <HAL_RCC_GetPCLK2Freq>
 8002152:	4360      	muls	r0, r4
 8002154:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8002158:	0092      	lsls	r2, r2, #2
 800215a:	fbb0 faf2 	udiv	sl, r0, r2
 800215e:	f7ff ff9d 	bl	800209c <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002162:	4360      	muls	r0, r4
 8002164:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	fbb0 f3f3 	udiv	r3, r0, r3
 800216e:	fbb3 f3f8 	udiv	r3, r3, r8
 8002172:	fb08 a313 	mls	r3, r8, r3, sl
 8002176:	011b      	lsls	r3, r3, #4
 8002178:	3332      	adds	r3, #50	; 0x32
 800217a:	fbb3 f3f8 	udiv	r3, r3, r8
 800217e:	f003 030f 	and.w	r3, r3, #15
 8002182:	433b      	orrs	r3, r7
 8002184:	4433      	add	r3, r6
 8002186:	60ab      	str	r3, [r5, #8]
 8002188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800218c:	f7ff ff76 	bl	800207c <HAL_RCC_GetPCLK1Freq>
 8002190:	fb04 f300 	mul.w	r3, r4, r0
 8002194:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8002198:	f04f 0864 	mov.w	r8, #100	; 0x64
 800219c:	00b6      	lsls	r6, r6, #2
 800219e:	fbb3 f3f6 	udiv	r3, r3, r6
 80021a2:	fbb3 f3f8 	udiv	r3, r3, r8
 80021a6:	011e      	lsls	r6, r3, #4
 80021a8:	f7ff ff68 	bl	800207c <HAL_RCC_GetPCLK1Freq>
 80021ac:	4360      	muls	r0, r4
 80021ae:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	fbb0 f7f3 	udiv	r7, r0, r3
 80021b8:	f7ff ff60 	bl	800207c <HAL_RCC_GetPCLK1Freq>
 80021bc:	4360      	muls	r0, r4
 80021be:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80021c8:	fbb3 f3f8 	udiv	r3, r3, r8
 80021cc:	fb08 7313 	mls	r3, r8, r3, r7
 80021d0:	011b      	lsls	r3, r3, #4
 80021d2:	3332      	adds	r3, #50	; 0x32
 80021d4:	fbb3 f3f8 	udiv	r3, r3, r8
 80021d8:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 80021dc:	f7ff ff4e 	bl	800207c <HAL_RCC_GetPCLK1Freq>
 80021e0:	4360      	muls	r0, r4
 80021e2:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80021e6:	0092      	lsls	r2, r2, #2
 80021e8:	fbb0 faf2 	udiv	sl, r0, r2
 80021ec:	f7ff ff46 	bl	800207c <HAL_RCC_GetPCLK1Freq>
 80021f0:	e7b7      	b.n	8002162 <UART_SetConfig+0xa6>
 80021f2:	bf00      	nop
 80021f4:	40013800 	.word	0x40013800

080021f8 <HAL_UART_Init>:
{
 80021f8:	b510      	push	{r4, lr}
  if(huart == NULL)
 80021fa:	4604      	mov	r4, r0
 80021fc:	b340      	cbz	r0, 8002250 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 80021fe:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002202:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002206:	b91b      	cbnz	r3, 8002210 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002208:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800220c:	f000 f9da 	bl	80025c4 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8002210:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8002212:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002214:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002218:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 800221a:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 800221c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002220:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002222:	f7ff ff4b 	bl	80020bc <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002226:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002228:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800222a:	691a      	ldr	r2, [r3, #16]
 800222c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002230:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002232:	695a      	ldr	r2, [r3, #20]
 8002234:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002238:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800223a:	68da      	ldr	r2, [r3, #12]
 800223c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002240:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 8002242:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002244:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8002246:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800224a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800224e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002250:	2001      	movs	r0, #1
}
 8002252:	bd10      	pop	{r4, pc}

08002254 <MX_GPIO_Init>:
        * EXTI
*/
void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002254:	2210      	movs	r2, #16
{
 8002256:	b530      	push	{r4, r5, lr}
 8002258:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800225a:	eb0d 0002 	add.w	r0, sp, r2
 800225e:	2100      	movs	r1, #0
 8002260:	f000 fa3c 	bl	80026dc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002264:	4b25      	ldr	r3, [pc, #148]	; (80022fc <MX_GPIO_Init+0xa8>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 8002266:	4d26      	ldr	r5, [pc, #152]	; (8002300 <MX_GPIO_Init+0xac>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002268:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 800226a:	4628      	mov	r0, r5
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800226c:	f042 0208 	orr.w	r2, r2, #8
 8002270:	619a      	str	r2, [r3, #24]
 8002272:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 8002274:	f44f 7170 	mov.w	r1, #960	; 0x3c0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002278:	f002 0208 	and.w	r2, r2, #8
 800227c:	9200      	str	r2, [sp, #0]
 800227e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002280:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002282:	2400      	movs	r4, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002284:	f042 0204 	orr.w	r2, r2, #4
 8002288:	619a      	str	r2, [r3, #24]
 800228a:	699a      	ldr	r2, [r3, #24]
 800228c:	f002 0204 	and.w	r2, r2, #4
 8002290:	9201      	str	r2, [sp, #4]
 8002292:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002294:	699a      	ldr	r2, [r3, #24]
 8002296:	f042 0210 	orr.w	r2, r2, #16
 800229a:	619a      	str	r2, [r3, #24]
 800229c:	699a      	ldr	r2, [r3, #24]
 800229e:	f002 0210 	and.w	r2, r2, #16
 80022a2:	9202      	str	r2, [sp, #8]
 80022a4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80022a6:	699a      	ldr	r2, [r3, #24]
 80022a8:	f042 0220 	orr.w	r2, r2, #32
 80022ac:	619a      	str	r2, [r3, #24]
 80022ae:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 80022b0:	2200      	movs	r2, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80022b2:	f003 0320 	and.w	r3, r3, #32
 80022b6:	9303      	str	r3, [sp, #12]
 80022b8:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 80022ba:	f7ff fa3b 	bl	8001734 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = KEY1_Pin;
 80022be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 80022c2:	a904      	add	r1, sp, #16
 80022c4:	480f      	ldr	r0, [pc, #60]	; (8002304 <MX_GPIO_Init+0xb0>)
  GPIO_InitStruct.Pin = KEY1_Pin;
 80022c6:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022c8:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ca:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 80022cc:	f7ff f952 	bl	8001574 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY2_Pin;
 80022d0:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(KEY2_GPIO_Port, &GPIO_InitStruct);
 80022d2:	a904      	add	r1, sp, #16
 80022d4:	480c      	ldr	r0, [pc, #48]	; (8002308 <MX_GPIO_Init+0xb4>)
  GPIO_InitStruct.Pin = KEY2_Pin;
 80022d6:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022d8:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022da:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(KEY2_GPIO_Port, &GPIO_InitStruct);
 80022dc:	f7ff f94a 	bl	8001574 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin;
 80022e0:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80022e4:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022e6:	2301      	movs	r3, #1
 80022e8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ea:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ec:	a904      	add	r1, sp, #16
 80022ee:	4628      	mov	r0, r5
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f0:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f2:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022f4:	f7ff f93e 	bl	8001574 <HAL_GPIO_Init>

}
 80022f8:	b009      	add	sp, #36	; 0x24
 80022fa:	bd30      	pop	{r4, r5, pc}
 80022fc:	40021000 	.word	0x40021000
 8002300:	40010c00 	.word	0x40010c00
 8002304:	40011000 	.word	0x40011000
 8002308:	40011400 	.word	0x40011400

0800230c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800230c:	b508      	push	{r3, lr}

  hi2c2.Instance = I2C2;
 800230e:	480c      	ldr	r0, [pc, #48]	; (8002340 <MX_I2C2_Init+0x34>)
  hi2c2.Init.ClockSpeed = 100000;
 8002310:	4b0c      	ldr	r3, [pc, #48]	; (8002344 <MX_I2C2_Init+0x38>)
 8002312:	f8df e034 	ldr.w	lr, [pc, #52]	; 8002348 <MX_I2C2_Init+0x3c>
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002316:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c2.Init.ClockSpeed = 100000;
 800231a:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800231e:	2300      	movs	r3, #0
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002320:	6102      	str	r2, [r0, #16]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002322:	6083      	str	r3, [r0, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002324:	60c3      	str	r3, [r0, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002326:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002328:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800232a:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800232c:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800232e:	f7ff fad5 	bl	80018dc <HAL_I2C_Init>
 8002332:	b118      	cbz	r0, 800233c <MX_I2C2_Init+0x30>
  {
    Error_Handler();
  }

}
 8002334:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002338:	f000 b8ba 	b.w	80024b0 <Error_Handler>
 800233c:	bd08      	pop	{r3, pc}
 800233e:	bf00      	nop
 8002340:	2000117c 	.word	0x2000117c
 8002344:	40005800 	.word	0x40005800
 8002348:	000186a0 	.word	0x000186a0

0800234c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800234c:	b510      	push	{r4, lr}
 800234e:	4604      	mov	r4, r0
 8002350:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002352:	2210      	movs	r2, #16
 8002354:	2100      	movs	r1, #0
 8002356:	a802      	add	r0, sp, #8
 8002358:	f000 f9c0 	bl	80026dc <memset>
  if(i2cHandle->Instance==I2C2)
 800235c:	6822      	ldr	r2, [r4, #0]
 800235e:	4b11      	ldr	r3, [pc, #68]	; (80023a4 <HAL_I2C_MspInit+0x58>)
 8002360:	429a      	cmp	r2, r3
 8002362:	d11d      	bne.n	80023a0 <HAL_I2C_MspInit+0x54>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002364:	4c10      	ldr	r4, [pc, #64]	; (80023a8 <HAL_I2C_MspInit+0x5c>)
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002366:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002368:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800236a:	4810      	ldr	r0, [pc, #64]	; (80023ac <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800236c:	f043 0308 	orr.w	r3, r3, #8
 8002370:	61a3      	str	r3, [r4, #24]
 8002372:	69a3      	ldr	r3, [r4, #24]
 8002374:	f003 0308 	and.w	r3, r3, #8
 8002378:	9300      	str	r3, [sp, #0]
 800237a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800237c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002380:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002382:	2312      	movs	r3, #18
 8002384:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002386:	2303      	movs	r3, #3
 8002388:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800238a:	f7ff f8f3 	bl	8001574 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800238e:	69e3      	ldr	r3, [r4, #28]
 8002390:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002394:	61e3      	str	r3, [r4, #28]
 8002396:	69e3      	ldr	r3, [r4, #28]
 8002398:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800239c:	9301      	str	r3, [sp, #4]
 800239e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80023a0:	b006      	add	sp, #24
 80023a2:	bd10      	pop	{r4, pc}
 80023a4:	40005800 	.word	0x40005800
 80023a8:	40021000 	.word	0x40021000
 80023ac:	40010c00 	.word	0x40010c00

080023b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023b0:	b500      	push	{lr}
 80023b2:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023b4:	2228      	movs	r2, #40	; 0x28
 80023b6:	2100      	movs	r1, #0
 80023b8:	a806      	add	r0, sp, #24
 80023ba:	f000 f98f 	bl	80026dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023be:	2214      	movs	r2, #20
 80023c0:	2100      	movs	r1, #0
 80023c2:	a801      	add	r0, sp, #4
 80023c4:	f000 f98a 	bl	80026dc <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80023c8:	2302      	movs	r3, #2
 80023ca:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023cc:	2301      	movs	r3, #1
 80023ce:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80023d0:	2310      	movs	r3, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023d2:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80023d4:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023d6:	f7ff fbd7 	bl	8001b88 <HAL_RCC_OscConfig>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80023da:	2100      	movs	r1, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023dc:	230f      	movs	r3, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80023de:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023e0:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80023e2:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023e4:	9103      	str	r1, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80023e6:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023e8:	9105      	str	r1, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80023ea:	f7ff fd95 	bl	8001f18 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 80023ee:	b011      	add	sp, #68	; 0x44
 80023f0:	f85d fb04 	ldr.w	pc, [sp], #4

080023f4 <main>:
{
 80023f4:	b508      	push	{r3, lr}
  HAL_Init();
 80023f6:	f7ff f82b 	bl	8001450 <HAL_Init>
  SystemClock_Config();
 80023fa:	f7ff ffd9 	bl	80023b0 <SystemClock_Config>
  MX_GPIO_Init();
 80023fe:	f7ff ff29 	bl	8002254 <MX_GPIO_Init>
  MX_I2C2_Init();
 8002402:	f7ff ff83 	bl	800230c <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8002406:	f000 f8c1 	bl	800258c <MX_USART1_UART_Init>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);    // LED1 off
 800240a:	2201      	movs	r2, #1
 800240c:	2140      	movs	r1, #64	; 0x40
 800240e:	4827      	ldr	r0, [pc, #156]	; (80024ac <main+0xb8>)
 8002410:	f7ff f990 	bl	8001734 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);    // LED2 off
 8002414:	2201      	movs	r2, #1
 8002416:	2180      	movs	r1, #128	; 0x80
 8002418:	4824      	ldr	r0, [pc, #144]	; (80024ac <main+0xb8>)
 800241a:	f7ff f98b 	bl	8001734 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);    // LED3 off
 800241e:	2201      	movs	r2, #1
 8002420:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002424:	4821      	ldr	r0, [pc, #132]	; (80024ac <main+0xb8>)
 8002426:	f7ff f985 	bl	8001734 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);    // LED4 off
 800242a:	2201      	movs	r2, #1
 800242c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002430:	481e      	ldr	r0, [pc, #120]	; (80024ac <main+0xb8>)
 8002432:	f7ff f97f 	bl	8001734 <HAL_GPIO_WritePin>
  OLED_Init();
 8002436:	f7fe ff79 	bl	800132c <OLED_Init>
  OLED_Clear(0x00);
 800243a:	2000      	movs	r0, #0
 800243c:	f7fe ff62 	bl	8001304 <OLED_Clear>
	  TEST_MainPage();
 8002440:	f7fe faf0 	bl	8000a24 <TEST_MainPage>
	  OLED_Clear(0);
 8002444:	2000      	movs	r0, #0
 8002446:	f7fe ff5d 	bl	8001304 <OLED_Clear>
	  Test_Color();
 800244a:	f7fe fb1d 	bl	8000a88 <Test_Color>
	  OLED_Clear(0);
 800244e:	2000      	movs	r0, #0
 8002450:	f7fe ff58 	bl	8001304 <OLED_Clear>
	  Test_Rectangular();
 8002454:	f7fe fb3e 	bl	8000ad4 <Test_Rectangular>
	  OLED_Clear(0);
 8002458:	2000      	movs	r0, #0
 800245a:	f7fe ff53 	bl	8001304 <OLED_Clear>
	  Test_Circle();
 800245e:	f7fe fb71 	bl	8000b44 <Test_Circle>
	  OLED_Clear(0);
 8002462:	2000      	movs	r0, #0
 8002464:	f7fe ff4e 	bl	8001304 <OLED_Clear>
	  Test_Triangle();
 8002468:	f7fe fba0 	bl	8000bac <Test_Triangle>
	  OLED_Clear(0);
 800246c:	2000      	movs	r0, #0
 800246e:	f7fe ff49 	bl	8001304 <OLED_Clear>
	  TEST_English();
 8002472:	f7fe fbdf 	bl	8000c34 <TEST_English>
	  OLED_Clear(0);
 8002476:	2000      	movs	r0, #0
 8002478:	f7fe ff44 	bl	8001304 <OLED_Clear>
	  TEST_Number_Character();
 800247c:	f7fe fc0c 	bl	8000c98 <TEST_Number_Character>
	  OLED_Clear(0);
 8002480:	2000      	movs	r0, #0
 8002482:	f7fe ff3f 	bl	8001304 <OLED_Clear>
	  TEST_Chinese();
 8002486:	f7fe fc49 	bl	8000d1c <TEST_Chinese>
	  OLED_Clear(0);
 800248a:	2000      	movs	r0, #0
 800248c:	f7fe ff3a 	bl	8001304 <OLED_Clear>
	  TEST_BMP();
 8002490:	f7fe fc94 	bl	8000dbc <TEST_BMP>
	  OLED_Clear(0);
 8002494:	2000      	movs	r0, #0
 8002496:	f7fe ff35 	bl	8001304 <OLED_Clear>
	  TEST_Menu1();
 800249a:	f7fe fcc1 	bl	8000e20 <TEST_Menu1>
	  OLED_Clear(0);
 800249e:	2000      	movs	r0, #0
 80024a0:	f7fe ff30 	bl	8001304 <OLED_Clear>
	  TEST_Menu2();
 80024a4:	f7fe fe1a 	bl	80010dc <TEST_Menu2>
 80024a8:	e7c7      	b.n	800243a <main+0x46>
 80024aa:	bf00      	nop
 80024ac:	40010c00 	.word	0x40010c00

080024b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024b0:	4770      	bx	lr
	...

080024b4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80024b4:	4b0e      	ldr	r3, [pc, #56]	; (80024f0 <HAL_MspInit+0x3c>)
{
 80024b6:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80024b8:	699a      	ldr	r2, [r3, #24]
 80024ba:	f042 0201 	orr.w	r2, r2, #1
 80024be:	619a      	str	r2, [r3, #24]
 80024c0:	699a      	ldr	r2, [r3, #24]
 80024c2:	f002 0201 	and.w	r2, r2, #1
 80024c6:	9200      	str	r2, [sp, #0]
 80024c8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024ca:	69da      	ldr	r2, [r3, #28]
 80024cc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80024d0:	61da      	str	r2, [r3, #28]
 80024d2:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80024d4:	4a07      	ldr	r2, [pc, #28]	; (80024f4 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80024d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024da:	9301      	str	r3, [sp, #4]
 80024dc:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80024de:	6853      	ldr	r3, [r2, #4]
 80024e0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80024e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80024e8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024ea:	b002      	add	sp, #8
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	40021000 	.word	0x40021000
 80024f4:	40010000 	.word	0x40010000

080024f8 <NMI_Handler>:
 80024f8:	4770      	bx	lr

080024fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024fa:	e7fe      	b.n	80024fa <HardFault_Handler>

080024fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024fc:	e7fe      	b.n	80024fc <MemManage_Handler>

080024fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024fe:	e7fe      	b.n	80024fe <BusFault_Handler>

08002500 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002500:	e7fe      	b.n	8002500 <UsageFault_Handler>

08002502 <SVC_Handler>:
 8002502:	4770      	bx	lr

08002504 <DebugMon_Handler>:
 8002504:	4770      	bx	lr

08002506 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002506:	4770      	bx	lr

08002508 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002508:	f7fe bfb4 	b.w	8001474 <HAL_IncTick>

0800250c <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 800250c:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800250e:	4b0a      	ldr	r3, [pc, #40]	; (8002538 <_sbrk+0x2c>)
{
 8002510:	4602      	mov	r2, r0
	if (heap_end == 0)
 8002512:	6819      	ldr	r1, [r3, #0]
 8002514:	b909      	cbnz	r1, 800251a <_sbrk+0xe>
		heap_end = &end;
 8002516:	4909      	ldr	r1, [pc, #36]	; (800253c <_sbrk+0x30>)
 8002518:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 800251a:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 800251c:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 800251e:	4402      	add	r2, r0
 8002520:	428a      	cmp	r2, r1
 8002522:	d906      	bls.n	8002532 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8002524:	f000 f8b0 	bl	8002688 <__errno>
 8002528:	230c      	movs	r3, #12
 800252a:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 800252c:	f04f 30ff 	mov.w	r0, #4294967295
 8002530:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8002532:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8002534:	bd08      	pop	{r3, pc}
 8002536:	bf00      	nop
 8002538:	2000116c 	.word	0x2000116c
 800253c:	20001214 	.word	0x20001214

08002540 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002540:	4b0f      	ldr	r3, [pc, #60]	; (8002580 <SystemInit+0x40>)
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	f042 0201 	orr.w	r2, r2, #1
 8002548:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800254a:	6859      	ldr	r1, [r3, #4]
 800254c:	4a0d      	ldr	r2, [pc, #52]	; (8002584 <SystemInit+0x44>)
 800254e:	400a      	ands	r2, r1
 8002550:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002558:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800255c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002564:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002566:	685a      	ldr	r2, [r3, #4]
 8002568:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800256c:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800256e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002572:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002574:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002578:	4b03      	ldr	r3, [pc, #12]	; (8002588 <SystemInit+0x48>)
 800257a:	609a      	str	r2, [r3, #8]
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	40021000 	.word	0x40021000
 8002584:	f8ff0000 	.word	0xf8ff0000
 8002588:	e000ed00 	.word	0xe000ed00

0800258c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800258c:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
 800258e:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
  huart1.Instance = USART1;
 8002592:	480a      	ldr	r0, [pc, #40]	; (80025bc <MX_USART1_UART_Init+0x30>)
  huart1.Init.BaudRate = 115200;
 8002594:	4b0a      	ldr	r3, [pc, #40]	; (80025c0 <MX_USART1_UART_Init+0x34>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002596:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 115200;
 8002598:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800259c:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 800259e:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80025a0:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80025a2:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80025a4:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025a6:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80025a8:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80025aa:	f7ff fe25 	bl	80021f8 <HAL_UART_Init>
 80025ae:	b118      	cbz	r0, 80025b8 <MX_USART1_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 80025b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80025b4:	f7ff bf7c 	b.w	80024b0 <Error_Handler>
 80025b8:	bd08      	pop	{r3, pc}
 80025ba:	bf00      	nop
 80025bc:	200011d0 	.word	0x200011d0
 80025c0:	40013800 	.word	0x40013800

080025c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80025c4:	b510      	push	{r4, lr}
 80025c6:	4604      	mov	r4, r0
 80025c8:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ca:	2210      	movs	r2, #16
 80025cc:	2100      	movs	r1, #0
 80025ce:	a802      	add	r0, sp, #8
 80025d0:	f000 f884 	bl	80026dc <memset>
  if(uartHandle->Instance==USART1)
 80025d4:	6822      	ldr	r2, [r4, #0]
 80025d6:	4b17      	ldr	r3, [pc, #92]	; (8002634 <HAL_UART_MspInit+0x70>)
 80025d8:	429a      	cmp	r2, r3
 80025da:	d128      	bne.n	800262e <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80025dc:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80025e0:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025e2:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 80025e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025e8:	619a      	str	r2, [r3, #24]
 80025ea:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ec:	4812      	ldr	r0, [pc, #72]	; (8002638 <HAL_UART_MspInit+0x74>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80025ee:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80025f2:	9200      	str	r2, [sp, #0]
 80025f4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025f6:	699a      	ldr	r2, [r3, #24]
 80025f8:	f042 0204 	orr.w	r2, r2, #4
 80025fc:	619a      	str	r2, [r3, #24]
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	f003 0304 	and.w	r3, r3, #4
 8002604:	9301      	str	r3, [sp, #4]
 8002606:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002608:	f44f 7300 	mov.w	r3, #512	; 0x200
 800260c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800260e:	2302      	movs	r3, #2
 8002610:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002612:	2303      	movs	r3, #3
 8002614:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002616:	f7fe ffad 	bl	8001574 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800261a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800261e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002620:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002622:	a902      	add	r1, sp, #8
 8002624:	4804      	ldr	r0, [pc, #16]	; (8002638 <HAL_UART_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002626:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002628:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800262a:	f7fe ffa3 	bl	8001574 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800262e:	b006      	add	sp, #24
 8002630:	bd10      	pop	{r4, pc}
 8002632:	bf00      	nop
 8002634:	40013800 	.word	0x40013800
 8002638:	40010800 	.word	0x40010800

0800263c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800263c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800263e:	e003      	b.n	8002648 <LoopCopyDataInit>

08002640 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002640:	4b0b      	ldr	r3, [pc, #44]	; (8002670 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002642:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002644:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002646:	3104      	adds	r1, #4

08002648 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002648:	480a      	ldr	r0, [pc, #40]	; (8002674 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800264a:	4b0b      	ldr	r3, [pc, #44]	; (8002678 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800264c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800264e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002650:	d3f6      	bcc.n	8002640 <CopyDataInit>
  ldr r2, =_sbss
 8002652:	4a0a      	ldr	r2, [pc, #40]	; (800267c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002654:	e002      	b.n	800265c <LoopFillZerobss>

08002656 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002656:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002658:	f842 3b04 	str.w	r3, [r2], #4

0800265c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800265c:	4b08      	ldr	r3, [pc, #32]	; (8002680 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800265e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002660:	d3f9      	bcc.n	8002656 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002662:	f7ff ff6d 	bl	8002540 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002666:	f000 f815 	bl	8002694 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800266a:	f7ff fec3 	bl	80023f4 <main>
  bx lr
 800266e:	4770      	bx	lr
  ldr r3, =_sidata
 8002670:	08003a40 	.word	0x08003a40
  ldr r0, =_sdata
 8002674:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002678:	20000d50 	.word	0x20000d50
  ldr r2, =_sbss
 800267c:	20000d50 	.word	0x20000d50
  ldr r3, = _ebss
 8002680:	20001214 	.word	0x20001214

08002684 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002684:	e7fe      	b.n	8002684 <ADC1_2_IRQHandler>
	...

08002688 <__errno>:
 8002688:	4b01      	ldr	r3, [pc, #4]	; (8002690 <__errno+0x8>)
 800268a:	6818      	ldr	r0, [r3, #0]
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	20000cec 	.word	0x20000cec

08002694 <__libc_init_array>:
 8002694:	b570      	push	{r4, r5, r6, lr}
 8002696:	2500      	movs	r5, #0
 8002698:	4e0c      	ldr	r6, [pc, #48]	; (80026cc <__libc_init_array+0x38>)
 800269a:	4c0d      	ldr	r4, [pc, #52]	; (80026d0 <__libc_init_array+0x3c>)
 800269c:	1ba4      	subs	r4, r4, r6
 800269e:	10a4      	asrs	r4, r4, #2
 80026a0:	42a5      	cmp	r5, r4
 80026a2:	d109      	bne.n	80026b8 <__libc_init_array+0x24>
 80026a4:	f000 f8fc 	bl	80028a0 <_init>
 80026a8:	2500      	movs	r5, #0
 80026aa:	4e0a      	ldr	r6, [pc, #40]	; (80026d4 <__libc_init_array+0x40>)
 80026ac:	4c0a      	ldr	r4, [pc, #40]	; (80026d8 <__libc_init_array+0x44>)
 80026ae:	1ba4      	subs	r4, r4, r6
 80026b0:	10a4      	asrs	r4, r4, #2
 80026b2:	42a5      	cmp	r5, r4
 80026b4:	d105      	bne.n	80026c2 <__libc_init_array+0x2e>
 80026b6:	bd70      	pop	{r4, r5, r6, pc}
 80026b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80026bc:	4798      	blx	r3
 80026be:	3501      	adds	r5, #1
 80026c0:	e7ee      	b.n	80026a0 <__libc_init_array+0xc>
 80026c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80026c6:	4798      	blx	r3
 80026c8:	3501      	adds	r5, #1
 80026ca:	e7f2      	b.n	80026b2 <__libc_init_array+0x1e>
 80026cc:	08003a38 	.word	0x08003a38
 80026d0:	08003a38 	.word	0x08003a38
 80026d4:	08003a38 	.word	0x08003a38
 80026d8:	08003a3c 	.word	0x08003a3c

080026dc <memset>:
 80026dc:	4603      	mov	r3, r0
 80026de:	4402      	add	r2, r0
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d100      	bne.n	80026e6 <memset+0xa>
 80026e4:	4770      	bx	lr
 80026e6:	f803 1b01 	strb.w	r1, [r3], #1
 80026ea:	e7f9      	b.n	80026e0 <memset+0x4>

080026ec <srand>:
 80026ec:	b538      	push	{r3, r4, r5, lr}
 80026ee:	4b12      	ldr	r3, [pc, #72]	; (8002738 <srand+0x4c>)
 80026f0:	4605      	mov	r5, r0
 80026f2:	681c      	ldr	r4, [r3, #0]
 80026f4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80026f6:	b9d3      	cbnz	r3, 800272e <srand+0x42>
 80026f8:	2018      	movs	r0, #24
 80026fa:	f000 f859 	bl	80027b0 <malloc>
 80026fe:	f243 330e 	movw	r3, #13070	; 0x330e
 8002702:	63a0      	str	r0, [r4, #56]	; 0x38
 8002704:	8003      	strh	r3, [r0, #0]
 8002706:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 800270a:	8043      	strh	r3, [r0, #2]
 800270c:	f241 2334 	movw	r3, #4660	; 0x1234
 8002710:	8083      	strh	r3, [r0, #4]
 8002712:	f24e 636d 	movw	r3, #58989	; 0xe66d
 8002716:	80c3      	strh	r3, [r0, #6]
 8002718:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 800271c:	8103      	strh	r3, [r0, #8]
 800271e:	2305      	movs	r3, #5
 8002720:	8143      	strh	r3, [r0, #10]
 8002722:	230b      	movs	r3, #11
 8002724:	2201      	movs	r2, #1
 8002726:	8183      	strh	r3, [r0, #12]
 8002728:	2300      	movs	r3, #0
 800272a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800272e:	2200      	movs	r2, #0
 8002730:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002732:	611d      	str	r5, [r3, #16]
 8002734:	615a      	str	r2, [r3, #20]
 8002736:	bd38      	pop	{r3, r4, r5, pc}
 8002738:	20000cec 	.word	0x20000cec

0800273c <rand>:
 800273c:	4b19      	ldr	r3, [pc, #100]	; (80027a4 <rand+0x68>)
 800273e:	b510      	push	{r4, lr}
 8002740:	681c      	ldr	r4, [r3, #0]
 8002742:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002744:	b9d3      	cbnz	r3, 800277c <rand+0x40>
 8002746:	2018      	movs	r0, #24
 8002748:	f000 f832 	bl	80027b0 <malloc>
 800274c:	f243 330e 	movw	r3, #13070	; 0x330e
 8002750:	63a0      	str	r0, [r4, #56]	; 0x38
 8002752:	8003      	strh	r3, [r0, #0]
 8002754:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 8002758:	8043      	strh	r3, [r0, #2]
 800275a:	f241 2334 	movw	r3, #4660	; 0x1234
 800275e:	8083      	strh	r3, [r0, #4]
 8002760:	f24e 636d 	movw	r3, #58989	; 0xe66d
 8002764:	80c3      	strh	r3, [r0, #6]
 8002766:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 800276a:	8103      	strh	r3, [r0, #8]
 800276c:	2305      	movs	r3, #5
 800276e:	8143      	strh	r3, [r0, #10]
 8002770:	230b      	movs	r3, #11
 8002772:	2201      	movs	r2, #1
 8002774:	8183      	strh	r3, [r0, #12]
 8002776:	2300      	movs	r3, #0
 8002778:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800277c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800277e:	480a      	ldr	r0, [pc, #40]	; (80027a8 <rand+0x6c>)
 8002780:	690a      	ldr	r2, [r1, #16]
 8002782:	694b      	ldr	r3, [r1, #20]
 8002784:	4350      	muls	r0, r2
 8002786:	4c09      	ldr	r4, [pc, #36]	; (80027ac <rand+0x70>)
 8002788:	fb04 0003 	mla	r0, r4, r3, r0
 800278c:	fba2 2304 	umull	r2, r3, r2, r4
 8002790:	3201      	adds	r2, #1
 8002792:	4403      	add	r3, r0
 8002794:	f143 0300 	adc.w	r3, r3, #0
 8002798:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800279c:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 80027a0:	bd10      	pop	{r4, pc}
 80027a2:	bf00      	nop
 80027a4:	20000cec 	.word	0x20000cec
 80027a8:	5851f42d 	.word	0x5851f42d
 80027ac:	4c957f2d 	.word	0x4c957f2d

080027b0 <malloc>:
 80027b0:	4b02      	ldr	r3, [pc, #8]	; (80027bc <malloc+0xc>)
 80027b2:	4601      	mov	r1, r0
 80027b4:	6818      	ldr	r0, [r3, #0]
 80027b6:	f000 b803 	b.w	80027c0 <_malloc_r>
 80027ba:	bf00      	nop
 80027bc:	20000cec 	.word	0x20000cec

080027c0 <_malloc_r>:
 80027c0:	b570      	push	{r4, r5, r6, lr}
 80027c2:	1ccd      	adds	r5, r1, #3
 80027c4:	f025 0503 	bic.w	r5, r5, #3
 80027c8:	3508      	adds	r5, #8
 80027ca:	2d0c      	cmp	r5, #12
 80027cc:	bf38      	it	cc
 80027ce:	250c      	movcc	r5, #12
 80027d0:	2d00      	cmp	r5, #0
 80027d2:	4606      	mov	r6, r0
 80027d4:	db01      	blt.n	80027da <_malloc_r+0x1a>
 80027d6:	42a9      	cmp	r1, r5
 80027d8:	d903      	bls.n	80027e2 <_malloc_r+0x22>
 80027da:	230c      	movs	r3, #12
 80027dc:	6033      	str	r3, [r6, #0]
 80027de:	2000      	movs	r0, #0
 80027e0:	bd70      	pop	{r4, r5, r6, pc}
 80027e2:	f000 f85b 	bl	800289c <__malloc_lock>
 80027e6:	4a23      	ldr	r2, [pc, #140]	; (8002874 <_malloc_r+0xb4>)
 80027e8:	6814      	ldr	r4, [r2, #0]
 80027ea:	4621      	mov	r1, r4
 80027ec:	b991      	cbnz	r1, 8002814 <_malloc_r+0x54>
 80027ee:	4c22      	ldr	r4, [pc, #136]	; (8002878 <_malloc_r+0xb8>)
 80027f0:	6823      	ldr	r3, [r4, #0]
 80027f2:	b91b      	cbnz	r3, 80027fc <_malloc_r+0x3c>
 80027f4:	4630      	mov	r0, r6
 80027f6:	f000 f841 	bl	800287c <_sbrk_r>
 80027fa:	6020      	str	r0, [r4, #0]
 80027fc:	4629      	mov	r1, r5
 80027fe:	4630      	mov	r0, r6
 8002800:	f000 f83c 	bl	800287c <_sbrk_r>
 8002804:	1c43      	adds	r3, r0, #1
 8002806:	d126      	bne.n	8002856 <_malloc_r+0x96>
 8002808:	230c      	movs	r3, #12
 800280a:	4630      	mov	r0, r6
 800280c:	6033      	str	r3, [r6, #0]
 800280e:	f000 f846 	bl	800289e <__malloc_unlock>
 8002812:	e7e4      	b.n	80027de <_malloc_r+0x1e>
 8002814:	680b      	ldr	r3, [r1, #0]
 8002816:	1b5b      	subs	r3, r3, r5
 8002818:	d41a      	bmi.n	8002850 <_malloc_r+0x90>
 800281a:	2b0b      	cmp	r3, #11
 800281c:	d90f      	bls.n	800283e <_malloc_r+0x7e>
 800281e:	600b      	str	r3, [r1, #0]
 8002820:	18cc      	adds	r4, r1, r3
 8002822:	50cd      	str	r5, [r1, r3]
 8002824:	4630      	mov	r0, r6
 8002826:	f000 f83a 	bl	800289e <__malloc_unlock>
 800282a:	f104 000b 	add.w	r0, r4, #11
 800282e:	1d23      	adds	r3, r4, #4
 8002830:	f020 0007 	bic.w	r0, r0, #7
 8002834:	1ac3      	subs	r3, r0, r3
 8002836:	d01b      	beq.n	8002870 <_malloc_r+0xb0>
 8002838:	425a      	negs	r2, r3
 800283a:	50e2      	str	r2, [r4, r3]
 800283c:	bd70      	pop	{r4, r5, r6, pc}
 800283e:	428c      	cmp	r4, r1
 8002840:	bf0b      	itete	eq
 8002842:	6863      	ldreq	r3, [r4, #4]
 8002844:	684b      	ldrne	r3, [r1, #4]
 8002846:	6013      	streq	r3, [r2, #0]
 8002848:	6063      	strne	r3, [r4, #4]
 800284a:	bf18      	it	ne
 800284c:	460c      	movne	r4, r1
 800284e:	e7e9      	b.n	8002824 <_malloc_r+0x64>
 8002850:	460c      	mov	r4, r1
 8002852:	6849      	ldr	r1, [r1, #4]
 8002854:	e7ca      	b.n	80027ec <_malloc_r+0x2c>
 8002856:	1cc4      	adds	r4, r0, #3
 8002858:	f024 0403 	bic.w	r4, r4, #3
 800285c:	42a0      	cmp	r0, r4
 800285e:	d005      	beq.n	800286c <_malloc_r+0xac>
 8002860:	1a21      	subs	r1, r4, r0
 8002862:	4630      	mov	r0, r6
 8002864:	f000 f80a 	bl	800287c <_sbrk_r>
 8002868:	3001      	adds	r0, #1
 800286a:	d0cd      	beq.n	8002808 <_malloc_r+0x48>
 800286c:	6025      	str	r5, [r4, #0]
 800286e:	e7d9      	b.n	8002824 <_malloc_r+0x64>
 8002870:	bd70      	pop	{r4, r5, r6, pc}
 8002872:	bf00      	nop
 8002874:	20001170 	.word	0x20001170
 8002878:	20001174 	.word	0x20001174

0800287c <_sbrk_r>:
 800287c:	b538      	push	{r3, r4, r5, lr}
 800287e:	2300      	movs	r3, #0
 8002880:	4c05      	ldr	r4, [pc, #20]	; (8002898 <_sbrk_r+0x1c>)
 8002882:	4605      	mov	r5, r0
 8002884:	4608      	mov	r0, r1
 8002886:	6023      	str	r3, [r4, #0]
 8002888:	f7ff fe40 	bl	800250c <_sbrk>
 800288c:	1c43      	adds	r3, r0, #1
 800288e:	d102      	bne.n	8002896 <_sbrk_r+0x1a>
 8002890:	6823      	ldr	r3, [r4, #0]
 8002892:	b103      	cbz	r3, 8002896 <_sbrk_r+0x1a>
 8002894:	602b      	str	r3, [r5, #0]
 8002896:	bd38      	pop	{r3, r4, r5, pc}
 8002898:	20001210 	.word	0x20001210

0800289c <__malloc_lock>:
 800289c:	4770      	bx	lr

0800289e <__malloc_unlock>:
 800289e:	4770      	bx	lr

080028a0 <_init>:
 80028a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028a2:	bf00      	nop
 80028a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028a6:	bc08      	pop	{r3}
 80028a8:	469e      	mov	lr, r3
 80028aa:	4770      	bx	lr

080028ac <_fini>:
 80028ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028ae:	bf00      	nop
 80028b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028b2:	bc08      	pop	{r3}
 80028b4:	469e      	mov	lr, r3
 80028b6:	4770      	bx	lr
